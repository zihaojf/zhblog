const _astro_dataLayerContent = [["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.7.12","content-config-digest","18ea64504a2556e4","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://astro-pure.js.org\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"never\",\"output\":\"server\",\"scopedStyleStrategy\":\"where\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":false,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":true,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"prefetch\":true,\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{\"light\":\"github-light\",\"dark\":\"github-dark\"},\"wrap\":false,\"transformers\":[{\"name\":\"@shikijs/transformers:notation-diff\"},{\"name\":\"@shikijs/transformers:notation-highlight\"},{\"name\":\"shiki-transformer-update-style\"},{\"name\":\"shiki-transformer-add-title\"},{\"name\":\"shiki-transformer-add-language\"},{\"name\":\"shiki-transformer-copy-button\"}]},\"remarkPlugins\":[null,[null,{\"className\":\"zoomable\"}],null],\"rehypePlugins\":[[null,{}],null,[null,{\"behavior\":\"append\",\"properties\":{\"className\":[\"anchor\"]},\"content\":{\"type\":\"text\",\"value\":\"#\"}}],[null,{\"content\":{\"type\":\"text\",\"value\":\" ↗\"},\"target\":\"_blank\",\"rel\":[\"nofollow\",\"noopener\",\"noreferrer\"]}]],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":true,\"responsiveImages\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false},\"session\":{\"driver\":\"fs-lite\",\"options\":{\"base\":\"D:\\\\1大学学习\\\\blog\\\\astro-theme-pure-main\\\\node_modules\\\\.astro\\\\sessions\"}}}","blog",["Map",11,12,63,64,116,117,164,165,191,192,230,231,282,283,332,333,380,381,420,421],"csapp/c-lab实验报告",{id:11,data:13,body:24,filePath:25,digest:26,rendered:27},{title:14,description:15,publishDate:16,updatedDate:17,tags:18,language:21,draft:22,comment:23},"C Lab实验报告","CSAPP C Lab实验解析",["Date","2025-03-04T00:00:00.000Z"],["Date","2025-03-04T00:00:00.000Z"],[19,20],"csapp","whucs","中文",false,true,"## 头文件queue.h\n\n为了实现在时间复杂度O(1)内能够返回链表的大小和在尾部插入新节点，我们需要加上`q_size`和`q_tail`并实时维护。\n## 源文件queue.c\n### q_new\n需要使用malloc开辟一个大小为`queue_t`的内存空间并将类型为`queue_t`的指针指向它，并将其`head`、`tail`设置为NULL\n```c++\nqueue_t *q_new()\n{\n    /* Remember to handle the case if malloc returned NULL */\n    queue_t *q = NULL;\n    bool ok = (q = malloc(sizeof(queue_t)));\n    if(ok)\n    {\n      q->head = NULL;\n      q->tail = NULL;\n      q->size = 0;\n      return q;\n    }\n    else\n      return NULL;\n}\n```\n### q_free\n首先判断传入`queue_t *q`是否为nul,如果存在则从头节点遍历访问，删除每个节点\n```c++\noid q_free(queue_t *q)\n{\n    /* Remember to free the queue structue and list elements */\n    if(q)\n    {\n      list_ele_t *t= q->head;\n      while(t)\n      {\n        list_ele_t *temp = t;\n        t = t->next;\n        free(temp);\n      }\n      free(q);\n    }\n    \n}\n```\n### q_insert_head\n先新建一个节点并分配内存空间，在将新节点的`next`指向原链表的`head`节点，再将`head`节点更新为新节点，对应的`size++`。注意：如果原本q的大小为1，则新节点同时也是`tail`节点\n```c++\nbool q_insert_head(queue_t *q, int v)\n{\n    /* What should you do if the q is NULL? */\n    /* What if malloc returned NULL? */\n    list_ele_t *newq;\n    if(q)\n    {\n      bool ok = (newq = malloc(sizeof(list_ele_t)));\n      if(ok)\n      {\n        newq->value = v;\n        newq->next = q->head;\n        q->head = newq;\n        if(!q->size)\n        {\n          q->tail = newq;\n        }\n        q->size++;\n        return true;\n      }\n      else return false;\n    }\n    return false;\n}\n```\n\n### q_insert_tail\n与`q_insert_head`实现方法类似，唯一区别是要求在时间复杂度O(1)内实现插入，无法使用从头节点遍历的方法找到尾节点，可以直接使用维护的`tail`节点。注意：如果原本q的大小为1,则新节点同时也是`head`节点。\n```c++\nbool q_insert_tail(queue_t *q, int v)\n{\n    /* Remember: It should operate in O(1) time */\n    list_ele_t *newq;\n    if(q)\n    {\n      bool ok = (newq = malloc(sizeof(list_ele_t)));\n      if(ok)\n      {\n        newq->value = v;\n        newq->next = NULL;\n        if(!q->size)\n        {\n          q->tail = newq;\n          q->head = newq;\n          q->size++;\n        }\n        else{\n          q->tail->next = newq;\n          q->tail = newq;\n          q->size++;\n        }\n        return true;\n      }\n      return false;\n    }\n    return false;\n}\n```\n### q_remove_head\n删除头节点，并在删除后将头节点设置为原头节点的下一节点。如果`q_size`原本为1，则只有头节点，删除后应将头节点设置为null\n```c++\nbool q_remove_head(queue_t *q, int *vp)\n{\n    if(!q || !q->size)\n      return false;\n    else{\n      if(vp)\n      {\n        *vp = q->head->value;\n        list_ele_t *temp = q->head;\n        q->head = temp->next;\n        free(temp);\n        --q->size;\n        return true;\n      }\n    }\n    return false;\n}\n```\n### q_size\n直接返回维护的`size`即可\n```c++\nint q_size(queue_t *q)\n{\n    /* Remember: It should operate in O(1) time */\n    if(!q || !q->size)\n      return 0;\n    else return q->size;\n}\n```\n### q_reverse\n翻转我们可以遍历两次实现，第一次将节点的值记录下来，第二次将节点的值反向更新，在不反转节点next节点的情况下即可实现反转操作\n```c++\nvoid q_reverse(queue_t *q)\n{\n  if(q && q->size)\n  {\n      int value[q->size];\n      list_ele_t *t = q->head;\n      for(int i = q->size-1;i>=0 &&t!=NULL;i--)\n      {\n        value[i] = t->value;\n        t = t->next;\n      }\n      t = q->head;\n      for(int i = 0;i<q->size && t!=NULL;i++)\n      {\n        t->value = value[i];\n        t = t->next;\n      }\n  }\n}\n```\n\n010011 010011   q = 1/64\na = 1/4 +1/32 + 1/64 = 19/64\n19/63","src/content/blog/CSAPP/C Lab实验报告.md","d326b318c0fd2a33",{html:28,metadata:29},"<h2 id=\"头文件queueh\">头文件queue.h<a class=\"anchor\" href=\"#头文件queueh\">#</a></h2>\n<p>为了实现在时间复杂度O(1)内能够返回链表的大小和在尾部插入新节点，我们需要加上<code>q_size</code>和<code>q_tail</code>并实时维护。</p>\n<h2 id=\"源文件queuec\">源文件queue.c<a class=\"anchor\" href=\"#源文件queuec\">#</a></h2>\n<h3 id=\"q_new\">q_new<a class=\"anchor\" href=\"#q_new\">#</a></h3>\n<p>需要使用malloc开辟一个大小为<code>queue_t</code>的内存空间并将类型为<code>queue_t</code>的指针指向它，并将其<code>head</code>、<code>tail</code>设置为NULL</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">queue_t</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">q_new</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">    /* Remember to handle the case if malloc returned NULL */</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">    queue_t</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> *</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">q </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> NULL</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    bool</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ok </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (q </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> malloc</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">sizeof</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">queue_t</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)));</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(ok)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      q->head </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> NULL</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      q->tail </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> NULL</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      q->size </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">      return</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> q;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    else</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">      return</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> NULL</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"queue_t *q_new()\n{\n    /* Remember to handle the case if malloc returned NULL */\n    queue_t *q = NULL;\n    bool ok = (q = malloc(sizeof(queue_t)));\n    if(ok)\n    {\n      q->head = NULL;\n      q->tail = NULL;\n      q->size = 0;\n      return q;\n    }\n    else\n      return NULL;\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<h3 id=\"q_free\">q_free<a class=\"anchor\" href=\"#q_free\">#</a></h3>\n<p>首先判断传入<code>queue_t *q</code>是否为nul,如果存在则从头节点遍历访问，删除每个节点</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">oid </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">q_free</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">queue_t</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> *</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">q</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">    /* Remember to free the queue structue and list elements */</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(q)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">      list_ele_t</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> *</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">t</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> q->head;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">      while</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(t)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">        list_ele_t</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> *</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">temp </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> t;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        t </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> t->next;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">        free</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(temp);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      }</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">      free</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(q);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"oid q_free(queue_t *q)\n{\n    /* Remember to free the queue structue and list elements */\n    if(q)\n    {\n      list_ele_t *t= q->head;\n      while(t)\n      {\n        list_ele_t *temp = t;\n        t = t->next;\n        free(temp);\n      }\n      free(q);\n    }\n    \n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<h3 id=\"q_insert_head\">q_insert_head<a class=\"anchor\" href=\"#q_insert_head\">#</a></h3>\n<p>先新建一个节点并分配内存空间，在将新节点的<code>next</code>指向原链表的<code>head</code>节点，再将<code>head</code>节点更新为新节点，对应的<code>size++</code>。注意：如果原本q的大小为1，则新节点同时也是<code>tail</code>节点</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">bool</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> q_insert_head</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">queue_t</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> *</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">q</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> v</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">    /* What should you do if the q is NULL? */</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">    /* What if malloc returned NULL? */</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">    list_ele_t</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> *</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">newq;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(q)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">      bool</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ok </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (newq </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> malloc</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">sizeof</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">list_ele_t</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)));</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">      if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(ok)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        newq->value </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> v;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        newq->next </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> q->head;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        q->head </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> newq;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">!</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">q->size)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">          q->tail </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> newq;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        q->size</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        return</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> true</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">      else</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> return</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> false</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    return</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> false</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"bool q_insert_head(queue_t *q, int v)\n{\n    /* What should you do if the q is NULL? */\n    /* What if malloc returned NULL? */\n    list_ele_t *newq;\n    if(q)\n    {\n      bool ok = (newq = malloc(sizeof(list_ele_t)));\n      if(ok)\n      {\n        newq->value = v;\n        newq->next = q->head;\n        q->head = newq;\n        if(!q->size)\n        {\n          q->tail = newq;\n        }\n        q->size++;\n        return true;\n      }\n      else return false;\n    }\n    return false;\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<h3 id=\"q_insert_tail\">q_insert_tail<a class=\"anchor\" href=\"#q_insert_tail\">#</a></h3>\n<p>与<code>q_insert_head</code>实现方法类似，唯一区别是要求在时间复杂度O(1)内实现插入，无法使用从头节点遍历的方法找到尾节点，可以直接使用维护的<code>tail</code>节点。注意：如果原本q的大小为1,则新节点同时也是<code>head</code>节点。</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">bool</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> q_insert_tail</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">queue_t</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> *</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">q</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> v</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">    /* Remember: It should operate in O(1) time */</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">    list_ele_t</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> *</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">newq;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(q)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">      bool</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ok </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (newq </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> malloc</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">sizeof</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">list_ele_t</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)));</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">      if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(ok)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        newq->value </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> v;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        newq->next </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> NULL</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">!</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">q->size)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">          q->tail </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> newq;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">          q->head </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> newq;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">          q->size</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        else</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">          q->tail->next </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> newq;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">          q->tail </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> newq;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">          q->size</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        return</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> true</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">      return</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> false</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    return</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> false</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"bool q_insert_tail(queue_t *q, int v)\n{\n    /* Remember: It should operate in O(1) time */\n    list_ele_t *newq;\n    if(q)\n    {\n      bool ok = (newq = malloc(sizeof(list_ele_t)));\n      if(ok)\n      {\n        newq->value = v;\n        newq->next = NULL;\n        if(!q->size)\n        {\n          q->tail = newq;\n          q->head = newq;\n          q->size++;\n        }\n        else{\n          q->tail->next = newq;\n          q->tail = newq;\n          q->size++;\n        }\n        return true;\n      }\n      return false;\n    }\n    return false;\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<h3 id=\"q_remove_head\">q_remove_head<a class=\"anchor\" href=\"#q_remove_head\">#</a></h3>\n<p>删除头节点，并在删除后将头节点设置为原头节点的下一节点。如果<code>q_size</code>原本为1，则只有头节点，删除后应将头节点设置为null</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">bool</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> q_remove_head</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">queue_t</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> *</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">q</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> *</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">vp</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">!</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">q </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">||</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> !</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">q->size)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">      return</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> false</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    else</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">      if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(vp)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        *</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">vp </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> q->head->value;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">        list_ele_t</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> *</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">temp </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> q->head;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        q->head </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> temp->next;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">        free</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(temp);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        --</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">q->size;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        return</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> true</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    return</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> false</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"bool q_remove_head(queue_t *q, int *vp)\n{\n    if(!q || !q->size)\n      return false;\n    else{\n      if(vp)\n      {\n        *vp = q->head->value;\n        list_ele_t *temp = q->head;\n        q->head = temp->next;\n        free(temp);\n        --q->size;\n        return true;\n      }\n    }\n    return false;\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<h3 id=\"q_size\">q_size<a class=\"anchor\" href=\"#q_size\">#</a></h3>\n<p>直接返回维护的<code>size</code>即可</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> q_size</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">queue_t</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> *</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">q</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">    /* Remember: It should operate in O(1) time */</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">!</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">q </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">||</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> !</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">q->size)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">      return</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    else</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> return</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> q->size;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"int q_size(queue_t *q)\n{\n    /* Remember: It should operate in O(1) time */\n    if(!q || !q->size)\n      return 0;\n    else return q->size;\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<h3 id=\"q_reverse\">q_reverse<a class=\"anchor\" href=\"#q_reverse\">#</a></h3>\n<p>翻转我们可以遍历两次实现，第一次将节点的值记录下来，第二次将节点的值反向更新，在不反转节点next节点的情况下即可实现反转操作</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">void</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> q_reverse</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">queue_t</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> *</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">q</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(q </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> q->size)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">      int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> value</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">[q->size];</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">      list_ele_t</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> *</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">t </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> q->head;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">      for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> q->size</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x26;&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">t</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">!=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">NULL</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">--</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#FFAB70\">        value</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">[i] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> t->value;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        t </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> t->next;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      t </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> q->head;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">      for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">q->size </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> t</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">!=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">NULL</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        t->value </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> value</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">[i];</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        t </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> t->next;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"void q_reverse(queue_t *q)\n{\n  if(q &#x26;&#x26; q->size)\n  {\n      int value[q->size];\n      list_ele_t *t = q->head;\n      for(int i = q->size-1;i>=0 &#x26;&#x26;t!=NULL;i--)\n      {\n        value[i] = t->value;\n        t = t->next;\n      }\n      t = q->head;\n      for(int i = 0;i<q->size &#x26;&#x26; t!=NULL;i++)\n      {\n        t->value = value[i];\n        t = t->next;\n      }\n  }\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<p>010011 010011   q = 1/64\na = 1/4 +1/32 + 1/64 = 19/64\n19/63</p>",{headings:30,localImagePaths:53,remoteImagePaths:54,frontmatter:55,imagePaths:62},[31,35,38,41,43,45,47,49,51],{depth:32,slug:33,text:34},2,"头文件queueh","头文件queue.h",{depth:32,slug:36,text:37},"源文件queuec","源文件queue.c",{depth:39,slug:40,text:40},3,"q_new",{depth:39,slug:42,text:42},"q_free",{depth:39,slug:44,text:44},"q_insert_head",{depth:39,slug:46,text:46},"q_insert_tail",{depth:39,slug:48,text:48},"q_remove_head",{depth:39,slug:50,text:50},"q_size",{depth:39,slug:52,text:52},"q_reverse",[],[],{title:14,publishDate:56,updatedDate:56,description:15,tags:57,language:21,minutesRead:60,words:61},"2025-03-04",[58,59],"CSAPP","WhuCS","2 min read",361,[],"csapp/data-lab实验报告",{id:63,data:65,body:71,filePath:72,digest:73,rendered:74},{title:66,description:67,publishDate:68,updatedDate:69,tags:70,language:21,draft:22,comment:23},"DataLab实验报告","CSAPP DataLab实验解析",["Date","2025-03-05T00:00:00.000Z"],["Date","2025-03-05T00:00:00.000Z"],[19,20],"## 1.bitOr\n\n```c\nint bitOr(int x, int y) {\n  return ~(~x & ~y);\n}\n```\n\n用&和~实现或运算。或运算为假当且仅当x,y均为假，只需要对~x和~y进行与运算即可判断是否x,y都为假\n\n## 2.anyEvenBit\n\n```c\nint anyEvenBit(int x) {\n  int mask = 0x55 | 0x55<<8;\n  int mask2 = mask << 16;\n  return !!(x &(mask | mask2));\n}\n```\n\n只需要用一个所有偶数位为1的掩码对x进行与运算，如果为0，则偶数位上不存在1，否则存在\n\n## 3.rotateLeft\n\n```c\nint rotateLeft(int x, int n) {\n  return (x<<n|(x>>(32+(~n+1)) & ((1<<n)+(~1+1))));\n}\n```\n\n题目要求实现一个环形的左移，即要考虑溢出的高位应该填充到低位上。`x<<n`会将高位截断，再思考如何将溢出的填充到低位上。可以将x右移$32-n$位，特别注意如果x为负数，应该将高位全部设置为0\n\n## 4.greatestBitPos\n\n```c\nint greatestBitPos(int x) {\n   int m=!x+(~0);\n   int sign=x>>31;\n   x |= x>>1;\n   x |= x>>2;\n   x |= x>>4;\n   x |= x>>8;\n   x |= x>>16;\n   x=(x>>1)+1;\n   return (x&m)|((1<<31)&sign);\n}\n```\n\n当x为0时,$m=1-1=0,sign=0$ 返回值为0\n当$x>0$时，$m=0-1=-1,sign=0$ ,接着将x右移1、2、4、8、16位，将x最高位后的位全部设置为1，最后将x>>1+1取出x的最高位，返回x&-1\n当$x<0$时，$m=0-1=-1,sign=-1$，接着将x右移1、2、4、8、16位，将x最高位后的位全部设置为1，最后将x>>1+1取出x的最高位，返回x&1并加上负号\n\n## 5.leastBitPos\n\n```c\nint leastBitPos(int x) {\n    return x & (~x+1);\n}\n```\n\n根据lowerbit的结论,**lowerbit=n&(-n)**\n\n## 6.subOk\n\n```c\nint subOK(int x, int y) {\n   int sum = x + (~y + 1);\n   int sign = (x ^ y) & (x ^ sum);\n   return !(sign >> 31);\n}\n```\n\n需要检验x-y是否溢出！\n溢出只有两种情况,一是x为正，y为负，sum为负，另一种是x为负，y为正，sum为正，可以观察到：x与y异号并且x与sum异号，可以使用异或检查符号位是否满足溢出条件\n\n## 7.satMul3\n\n```c\nint satMul3(int x) {\n   int two = x + x;\n   int three = two + x;\n   int mask = ((x^two) | (x^three))>>31;\n   return (mask | three) ^ (mask & ((x>>31) ^ (1<<31)));\n}\n```\n\n首先我们考虑求出$3x$，思路易得，先求出$2x$，再加上$x$得到$3x$。\n接着我们需要思考是否溢出，可以将3x变为x+2x = 3x，即可化成x+y=sum是否溢出的情形。\n\n## 8.divpwr2\n\n```c\nint divpwr2(int x, int n) {\n   int sign = (x>>31);\n   int mask = ((1<<n)+(~1+1));\n   int res = ( x + (mask&sign) )>> n;\n    return res;\n}\n```\n\n除以2的n次方，可以等效为二进制右移n位。特别注意x为负数时，应该向上舍入。当x<0时，加上$2^n-1$即可实现向上舍入\n\n## 9.float_abs\n\n```c\nunsigned float_abs(unsigned uf) {\n   unsigned abs = uf & 0x7FFFFFFF;\n   return abs > 0x7F800000 ? uf : abs;\n}\n```\n\n这是要求一个浮点数的绝对值。符号位在最高位，0为正数，1为负数。当uf不为NAN时，直接返回abs即可。\n当uf为NaN时，我们详细讨论一下：float有1位符号位，8位指数位，以及23位小数位。当指数位全为1且小数不为0时，uf为NaN。abs为uf除最高符号位的值，如果abs>0x7F800000（即uf的指数位全为1且小数位不为0）返回uf。\n\n## 10.float_i2f\n\n```c\nunsigned float_i2f(int x) {\n   unsigned uf, sign = 0, i, t;\n   if (!x) return 0;\n   if (x == -x) return 0xcf000000;\n   sign = x < 0 ? 0x80000000 : 0;\n   uf = x < 0 ? -x : x;\n\n   for (i = 30; !(uf & (1 << i)); i--); \n   uf -= 1 << i;\n\n   if (i < 24) uf <<= 23 - i;\n   else {\n       t = i - 23;\n       uf += 1 << (t - 1); \n       uf -= (uf & ((1 << (t + 1)) - 1)) != 0;\n       uf >>= t;\n   }\n   return uf + ((i + 127) << 23) + sign;\n}\n```\n\n本题模拟int转到float的过程。关键在于确定小数位、指数位和符号位。\n\n- 如果x为0或者x为$T_{min}$，特殊情况特殊处理\n- 符号位：变量sign存储符号位\n- uf变为x的绝对值（去除符号位的干扰）\n- 从高位扫描到低位，找到最高位的1的位置，并将最高位的1去除（减去1<<i），原因在于规格化值的小数部分已经隐含了1\n- 如果最高位的1在第23位或更低位，表明23位的小数部分可完全存下，无需舍入，只需要将uf的最高位1与最高位对齐即可。（如.01010->.10100)\n- 如果最高位的1在24位及更高位，需要进行舍入处理（偶舍入）。$t=i-23$是需要舍入的低位的位数。先加上1<<(t-1)即要被丢弃的数的一半先进行舍入操作。再由uf的低(t+1)位是否为0，如果不为0，表明1后面跟着0，不应该进位","src/content/blog/CSAPP/Data Lab实验报告.md","25e30e6ba13deadd",{html:75,metadata:76},"<h2 id=\"1bitor\">1.bitOr<a class=\"anchor\" href=\"#1bitor\">#</a></h2>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> bitOr</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> y</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  return</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> ~</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">~</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> ~</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">y);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"int bitOr(int x, int y) {\n  return ~(~x &#x26; ~y);\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<p>用&#x26;和<del>实现或运算。或运算为假当且仅当x,y均为假，只需要对</del>x和~y进行与运算即可判断是否x,y都为假</p>\n<h2 id=\"2anyevenbit\">2.anyEvenBit<a class=\"anchor\" href=\"#2anyevenbit\">#</a></h2>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> anyEvenBit</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mask </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> 0x</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">55</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> |</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> 0x</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">55</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">8</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mask2 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mask </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 16</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  return</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> !!</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(mask </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">|</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mask2));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"int anyEvenBit(int x) {\n  int mask = 0x55 | 0x55<<8;\n  int mask2 = mask << 16;\n  return !!(x &#x26;(mask | mask2));\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<p>只需要用一个所有偶数位为1的掩码对x进行与运算，如果为0，则偶数位上不存在1，否则存在</p>\n<h2 id=\"3rotateleft\">3.rotateLeft<a class=\"anchor\" href=\"#3rotateleft\">#</a></h2>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> rotateLeft</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> n</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  return</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">|</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">32</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">~</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">~</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">))));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"int rotateLeft(int x, int n) {\n  return (x<<n|(x>>(32+(~n+1)) &#x26; ((1<<n)+(~1+1))));\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<p>题目要求实现一个环形的左移，即要考虑溢出的高位应该填充到低位上。<code>x&#x3C;&#x3C;n</code>会将高位截断，再思考如何将溢出的填充到低位上。可以将x右移<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>32</mn><mo>−</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">32-n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">32</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>位，特别注意如果x为负数，应该将高位全部设置为0</p>\n<h2 id=\"4greatestbitpos\">4.greatestBitPos<a class=\"anchor\" href=\"#4greatestbitpos\">#</a></h2>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> greatestBitPos</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">   int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> m</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=!</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">~</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">   int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> sign</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">31</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">   x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">|=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">   x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">|=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">   x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">|=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">4</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">   x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">|=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">8</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">   x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">|=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">16</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">   x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">   return</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">m)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">|</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">((</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">31</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">sign);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"int greatestBitPos(int x) {\n   int m=!x+(~0);\n   int sign=x>>31;\n   x |= x>>1;\n   x |= x>>2;\n   x |= x>>4;\n   x |= x>>8;\n   x |= x>>16;\n   x=(x>>1)+1;\n   return (x&#x26;m)|((1<<31)&#x26;sign);\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<p>当x为0时,<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>=</mo><mn>1</mn><mo>−</mo><mn>1</mn><mo>=</mo><mn>0</mn><mo separator=\"true\">,</mo><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">m=1-1=0,sign=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> 返回值为0\n当<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>></mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x>0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>时，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>=</mo><mn>0</mn><mo>−</mo><mn>1</mn><mo>=</mo><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">m=0-1=-1,sign=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> ,接着将x右移1、2、4、8、16位，将x最高位后的位全部设置为1，最后将x>>1+1取出x的最高位，返回x&#x26;-1\n当<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>&#x3C;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x&#x3C;0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&#x3C;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>时，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>=</mo><mn>0</mn><mo>−</mo><mn>1</mn><mo>=</mo><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">m=0-1=-1,sign=-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>，接着将x右移1、2、4、8、16位，将x最高位后的位全部设置为1，最后将x>>1+1取出x的最高位，返回x&#x26;1并加上负号</p>\n<h2 id=\"5leastbitpos\">5.leastBitPos<a class=\"anchor\" href=\"#5leastbitpos\">#</a></h2>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> leastBitPos</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    return</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">~</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"int leastBitPos(int x) {\n    return x &#x26; (~x+1);\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<p>根据lowerbit的结论,<strong>lowerbit=n&#x26;(-n)</strong></p>\n<h2 id=\"6subok\">6.subOk<a class=\"anchor\" href=\"#6subok\">#</a></h2>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> subOK</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> y</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">   int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> sum </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">~</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">y </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">   int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> sign </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">^</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> y) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">^</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> sum);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">   return</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> !</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(sign </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 31</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"int subOK(int x, int y) {\n   int sum = x + (~y + 1);\n   int sign = (x ^ y) &#x26; (x ^ sum);\n   return !(sign >> 31);\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<p>需要检验x-y是否溢出！\n溢出只有两种情况,一是x为正，y为负，sum为负，另一种是x为负，y为正，sum为正，可以观察到：x与y异号并且x与sum异号，可以使用异或检查符号位是否满足溢出条件</p>\n<h2 id=\"7satmul3\">7.satMul3<a class=\"anchor\" href=\"#7satmul3\">#</a></h2>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> satMul3</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">   int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> two </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">   int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> three </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> two </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">   int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mask </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">^</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">two) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">|</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">^</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">three))</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">31</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">   return</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (mask </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">|</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> three) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">^</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (mask </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">31</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">^</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">31</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"int satMul3(int x) {\n   int two = x + x;\n   int three = two + x;\n   int mask = ((x^two) | (x^three))>>31;\n   return (mask | three) ^ (mask &#x26; ((x>>31) ^ (1<<31)));\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<p>首先我们考虑求出<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">3x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span><span class=\"mord mathnormal\">x</span></span></span></span>，思路易得，先求出<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">2x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">x</span></span></span></span>，再加上<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>得到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">3x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span><span class=\"mord mathnormal\">x</span></span></span></span>。\n接着我们需要思考是否溢出，可以将3x变为x+2x = 3x，即可化成x+y=sum是否溢出的情形。</p>\n<h2 id=\"8divpwr2\">8.divpwr2<a class=\"anchor\" href=\"#8divpwr2\">#</a></h2>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> divpwr2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> n</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">   int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> sign </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">31</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">   int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mask </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">~</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">));</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">   int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ( x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (mask</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">sign) )</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    return</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"int divpwr2(int x, int n) {\n   int sign = (x>>31);\n   int mask = ((1<<n)+(~1+1));\n   int res = ( x + (mask&#x26;sign) )>> n;\n    return res;\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<p>除以2的n次方，可以等效为二进制右移n位。特别注意x为负数时，应该向上舍入。当x&#x3C;0时，加上<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7477em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>即可实现向上舍入</p>\n<h2 id=\"9float_abs\">9.float_abs<a class=\"anchor\" href=\"#9float_abs\">#</a></h2>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">unsigned</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> float_abs</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">unsigned</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> uf</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">   unsigned</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> abs </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> uf </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> 0x</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">7FFFFFFF</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">   return</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> abs </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">></span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> 0x</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">7F800000</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> ?</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> uf </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">:</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> abs;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"unsigned float_abs(unsigned uf) {\n   unsigned abs = uf &#x26; 0x7FFFFFFF;\n   return abs > 0x7F800000 ? uf : abs;\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<p>这是要求一个浮点数的绝对值。符号位在最高位，0为正数，1为负数。当uf不为NAN时，直接返回abs即可。\n当uf为NaN时，我们详细讨论一下：float有1位符号位，8位指数位，以及23位小数位。当指数位全为1且小数不为0时，uf为NaN。abs为uf除最高符号位的值，如果abs>0x7F800000（即uf的指数位全为1且小数位不为0）返回uf。</p>\n<h2 id=\"10float_i2f\">10.float_i2f<a class=\"anchor\" href=\"#10float_i2f\">#</a></h2>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">unsigned</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> float_i2f</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">   unsigned</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> uf, sign </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, i, t;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">   if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">!</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">return</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">   if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> -</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">return</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> 0x</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">cf000000</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">   sign </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> ?</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> 0x</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">80000000</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> :</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">   uf </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> ?</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> -</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">:</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">   for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 30</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">; </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">!</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(uf </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i)); i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">--</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">); </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">   uf </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">   if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 24</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) uf </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 23</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> -</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">   else</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">       t </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 23</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">       uf </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (t </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">); </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">       uf </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (uf </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (t </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">!=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">       uf </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>>=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> t;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">   }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">   return</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> uf </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 127</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 23</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> sign;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"unsigned float_i2f(int x) {\n   unsigned uf, sign = 0, i, t;\n   if (!x) return 0;\n   if (x == -x) return 0xcf000000;\n   sign = x < 0 ? 0x80000000 : 0;\n   uf = x < 0 ? -x : x;\n\n   for (i = 30; !(uf &#x26; (1 << i)); i--); \n   uf -= 1 << i;\n\n   if (i < 24) uf <<= 23 - i;\n   else {\n       t = i - 23;\n       uf += 1 << (t - 1); \n       uf -= (uf &#x26; ((1 << (t + 1)) - 1)) != 0;\n       uf >>= t;\n   }\n   return uf + ((i + 127) << 23) + sign;\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<p>本题模拟int转到float的过程。关键在于确定小数位、指数位和符号位。</p>\n<ul>\n<li>如果x为0或者x为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">T_{min}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">min</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，特殊情况特殊处理</li>\n<li>符号位：变量sign存储符号位</li>\n<li>uf变为x的绝对值（去除符号位的干扰）</li>\n<li>从高位扫描到低位，找到最高位的1的位置，并将最高位的1去除（减去1&#x3C;&#x3C;i），原因在于规格化值的小数部分已经隐含了1</li>\n<li>如果最高位的1在第23位或更低位，表明23位的小数部分可完全存下，无需舍入，只需要将uf的最高位1与最高位对齐即可。（如.01010->.10100)</li>\n<li>如果最高位的1在24位及更高位，需要进行舍入处理（偶舍入）。<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>=</mo><mi>i</mi><mo>−</mo><mn>23</mn></mrow><annotation encoding=\"application/x-tex\">t=i-23</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">23</span></span></span></span>是需要舍入的低位的位数。先加上1&#x3C;&#x3C;(t-1)即要被丢弃的数的一半先进行舍入操作。再由uf的低(t+1)位是否为0，如果不为0，表明1后面跟着0，不应该进位</li>\n</ul>",{headings:77,localImagePaths:108,remoteImagePaths:109,frontmatter:110,imagePaths:115},[78,81,84,87,90,93,96,99,102,105],{depth:32,slug:79,text:80},"1bitor","1.bitOr",{depth:32,slug:82,text:83},"2anyevenbit","2.anyEvenBit",{depth:32,slug:85,text:86},"3rotateleft","3.rotateLeft",{depth:32,slug:88,text:89},"4greatestbitpos","4.greatestBitPos",{depth:32,slug:91,text:92},"5leastbitpos","5.leastBitPos",{depth:32,slug:94,text:95},"6subok","6.subOk",{depth:32,slug:97,text:98},"7satmul3","7.satMul3",{depth:32,slug:100,text:101},"8divpwr2","8.divpwr2",{depth:32,slug:103,text:104},"9float_abs","9.float_abs",{depth:32,slug:106,text:107},"10float_i2f","10.float_i2f",[],[],{title:66,publishDate:111,updatedDate:111,description:67,tags:112,language:21,minutesRead:113,words:114},"2025-03-05",[58,59],"3 min read",459,[],"补题记录/cf-round996div2",{id:116,data:118,body:125,filePath:126,digest:127,rendered:128},{title:119,description:119,publishDate:120,updatedDate:121,tags:122,language:21,draft:22,comment:23},"CF Round996(Div2)补题",["Date","2025-01-14T00:00:00.000Z"],["Date","2025-01-14T00:00:00.000Z"],[123,124],"算法","codeforces","# B.Crafting\n\n## 思路\n对于需要增加的材料，最多只能有一个，不能有两个及以上，因为如果有两个及以上的话，所有需要增加材料的和是不变的，不可能最终每个材料增加满足b(i)\n对于有一个需要增加的材料：依次枚举验证其他的材料减少完之后是否会小于b(i)即可\n\n# C.The Trail\n## 题目大意\n一个$n*m$ 的格子中有一条路径从(1,1)到(n,m)，其路径上的格子中的数未知，其他格子中都给定有数字，题目要求所有的行、列数字之和均相等，求路径上未知的数字\n## 思路\n设$a_{ij}$为第i行第j列的数字，$rowsum=columnsum$,$n*rowsum=m*columnsum$\n有两种情况\n- $n \\neq m$ 时：此时$rowsum=columnsum=0$ \n- $n=m$ 时：此时$rowsum=columnsum=任意值$ \n为了方便讨论，直接令所有情况全为0\n**注意到路径仅能往下或者往右走，那么总有某行或者某列只有路径上的一个点未知**\n可以用这个性质递推\n- 当D即向下走时，所在行只有路径上的点未知\n- 当R即向右走时，所在列只有路径上的点未知\n## 代码\n```cpp\nvoid solve(){\n\tint n,m;\n\tcin>>n>>m;\n\tstring s;\n\tcin>>s;\n\tvector<vector<long long>> a;\n\tfor(int i = 0;i < n;i++){//输入\n\t\ta.push_back(vector<long long>(m));\n\t\tfor(int j = 0;j<m;j++){\n\t\t\tcin>>a[i][j];\n\t\t}\n\t}\n\t//模拟路径\n\tint x = 0,y = 0;//当前的坐标位置\n\tfor(char c : s){\n\t\tif(c=='D'){\n\t\t\tlong long su = 0;\n\t\t\tfor(int i = 0;i<m;i++){\n\t\t\t\tsu += a[x][i];\n\t\t\t}\n\t\t\ta[x][y] = -su;//赋相反值\n\t\t\t++x;\n\t\t}\n\t\telse{\n\t\t\tlong long su = 0;\n\t\t\tfor(int i = 0;i<n;i++){\n\t\t\t\tsu += a[i][y];\n\t\t\t}\n\t\t\ta[x][y] = -su;//赋相反值\n\t\t\t++y;\n\t\t}\n\t}\n\tlong long su = 0;\n\tfor(int i = 0;i< m;i++){\n\t\tsu += a[n-1][i];//终点\n\t}\n\ta[n-1][m-1] = -su;//终点处赋值\n\tfor(int i = 0;i< n;i++){\n\t\tfor(int j = 0;j<m;j++){\n\t\t\tcout<<a[i][j]<<\" \";\n\t\t\t\n\t\t}\n\t\tcout<<endl;\n\t}\n}\n```\n\n# D.Scarecrow\n## 题目大意\n在一维数轴上有一些稻草人(>0)，乌鸦初始在x=0处，乌鸦会一直检测左侧是否有稻草人，如果左侧稻草人距离自己小于k（左侧最近稻草人的坐标为y），那么它立马会向右移动到y+k个，稻草人每秒移动1个单位长度，左右或者停止都可以。问乌鸦要到达l至少需要的时间的两倍。\n## 思路\n乌鸦可以被距离k的稻草人推着走，也可以被小于k的稻草人跳跃着走。易得跳跃时花费的时间更少，所以要最大化跳跃次数。\n- case1:只有左侧有稻草人时，只与左侧最近的稻草人有关，被左侧的稻草人推着走\n- case2:只有右侧有稻草人时，需要右侧最近的稻草人移动到乌鸦处，让乌鸦开始跳跃起来\n- case3:左右都有稻草人时，左右的稻草人应该同时向乌鸦处运动，左侧离乌鸦最近的稻草人一定距离k（刚刚跳跃过来），**左侧稻草人推着乌鸦右移，右侧稻草人左移接近乌鸦，到达乌鸦处实现下一次跳跃**\n## 代码\n```cpp\nvoid solve(){\n\t int n;\n\t int k,l;\n\t cin>>n>>k>>l;\n\t k *= 2;\n\t l *= 2;\n\n\t vector<int> a(n);\n\t for(int i = 0;i<n;i++ ) cin>>a[i];//输入\n\t for(int i = 0;i<n;i++ ) a[i]*=2;\n\n\tint ans = a[0];//初始a[0]移到原点时间\n\tint x = k;//x是当前乌鸦的位置\n\tfor(int i = 1;i< n;i++){//开始枚举第二到第n个的稻草人\n\t\tif(a[i]>x){//如果在乌鸦右侧\n\t\t\ta[i] = max(x,a[i]-ans);//稻草人当前位置，最左时停在乌鸦当前处\n\t\t\tans += (a[i]-x)/2;//左侧乌鸦会一直推着走，相当于相向而行\n\t\t\tx = (x + a[i])/2 + k;//最终走到乌鸦出发点x和下一个稻草人处中点进行跳跃\n\t\t}\n\t\telse{//下一个稻草人在左侧\n\t\t\ta[i] = min(x,a[i]+ans);//a[i]朝稻草人动\n\t\t\tx = a[i] + k;//下一个稻草人一定会在上一个稻草人的右方，一定和稻草人的间距小于k\n\t\t}\n\t}\n\n\tif(x < l){//若通过跳跃无法到达l处，则只能用稻草人推着乌鸦走\n\t\tans += l - x;\n\t}\n\tcout<<ans<<endl;\n}\n```","src/content/blog/补题记录/CF Round996(Div2).md","cc4c1d3d2a1c6c85",{html:129,metadata:130},"<h1 id=\"bcrafting\">B.Crafting<a class=\"anchor\" href=\"#bcrafting\">#</a></h1>\n<h2 id=\"思路\">思路<a class=\"anchor\" href=\"#思路\">#</a></h2>\n<p>对于需要增加的材料，最多只能有一个，不能有两个及以上，因为如果有两个及以上的话，所有需要增加材料的和是不变的，不可能最终每个材料增加满足b(i)\n对于有一个需要增加的材料：依次枚举验证其他的材料减少完之后是否会小于b(i)即可</p>\n<h1 id=\"cthe-trail\">C.The Trail<a class=\"anchor\" href=\"#cthe-trail\">#</a></h1>\n<h2 id=\"题目大意\">题目大意<a class=\"anchor\" href=\"#题目大意\">#</a></h2>\n<p>一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>∗</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">n*m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 的格子中有一条路径从(1,1)到(n,m)，其路径上的格子中的数未知，其他格子中都给定有数字，题目要求所有的行、列数字之和均相等，求路径上未知的数字</p>\n<h2 id=\"思路-1\">思路<a class=\"anchor\" href=\"#思路-1\">#</a></h2>\n<p>设<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">a_{ij}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7167em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">ij</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>为第i行第j列的数字，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>w</mi><mi>s</mi><mi>u</mi><mi>m</mi><mo>=</mo><mi>c</mi><mi>o</mi><mi>l</mi><mi>u</mi><mi>m</mi><mi>n</mi><mi>s</mi><mi>u</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">rowsum=columnsum</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ro</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">co</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">mn</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span></span></span></span>,<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>∗</mo><mi>r</mi><mi>o</mi><mi>w</mi><mi>s</mi><mi>u</mi><mi>m</mi><mo>=</mo><mi>m</mi><mo>∗</mo><mi>c</mi><mi>o</mi><mi>l</mi><mi>u</mi><mi>m</mi><mi>n</mi><mi>s</mi><mi>u</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">n*rowsum=m*columnsum</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ro</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">co</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">mn</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span></span></span></span>\n有两种情况</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo mathvariant=\"normal\">≠</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">n \\neq m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 时：此时<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>w</mi><mi>s</mi><mi>u</mi><mi>m</mi><mo>=</mo><mi>c</mi><mi>o</mi><mi>l</mi><mi>u</mi><mi>m</mi><mi>n</mi><mi>s</mi><mi>u</mi><mi>m</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">rowsum=columnsum=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ro</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">co</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">mn</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">n=m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 时：此时<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>w</mi><mi>s</mi><mi>u</mi><mi>m</mi><mo>=</mo><mi>c</mi><mi>o</mi><mi>l</mi><mi>u</mi><mi>m</mi><mi>n</mi><mi>s</mi><mi>u</mi><mi>m</mi><mo>=</mo><mtext>任意值</mtext></mrow><annotation encoding=\"application/x-tex\">rowsum=columnsum=任意值</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ro</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">co</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">mn</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\">任意值</span></span></span></span>\n为了方便讨论，直接令所有情况全为0\n<strong>注意到路径仅能往下或者往右走，那么总有某行或者某列只有路径上的一个点未知</strong>\n可以用这个性质递推</li>\n<li>当D即向下走时，所在行只有路径上的点未知</li>\n<li>当R即向右走时，所在列只有路径上的点未知</li>\n</ul>\n<h2 id=\"代码\">代码<a class=\"anchor\" href=\"#代码\">#</a></h2>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">void</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> solve</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n,m;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tcin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">m;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tstring s;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tcin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">s;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tvector</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">vector</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;long</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//输入</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\ta.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">push_back</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">vector</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">long</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">>(m));</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> j </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;j</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">m;j</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\tcin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">a[i][j];</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">\t//模拟路径</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,y </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//当前的坐标位置</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">char</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> c : s){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(c</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">'D'</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\tlong</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> su </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">m;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\tsu </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a[x][i];</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\ta[x][y] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> -</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">su;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//赋相反值</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\t++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\telse</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\tlong</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> su </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\tsu </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a[i][y];</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\ta[x][y] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> -</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">su;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//赋相反值</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\t++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">y;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tlong</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> su </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> m;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tsu </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a[n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">][i];</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//终点</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\ta[n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">][m</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> -</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">su;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//终点处赋值</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> j </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;j</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">m;j</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\tcout</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">a[i][j]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\" \"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tcout</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">endl;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"void solve(){\n\tint n,m;\n\tcin>>n>>m;\n\tstring s;\n\tcin>>s;\n\tvector<vector<long long>> a;\n\tfor(int i = 0;i < n;i++){//输入\n\t\ta.push_back(vector<long long>(m));\n\t\tfor(int j = 0;j<m;j++){\n\t\t\tcin>>a[i][j];\n\t\t}\n\t}\n\t//模拟路径\n\tint x = 0,y = 0;//当前的坐标位置\n\tfor(char c : s){\n\t\tif(c==&#x27;D&#x27;){\n\t\t\tlong long su = 0;\n\t\t\tfor(int i = 0;i<m;i++){\n\t\t\t\tsu += a[x][i];\n\t\t\t}\n\t\t\ta[x][y] = -su;//赋相反值\n\t\t\t++x;\n\t\t}\n\t\telse{\n\t\t\tlong long su = 0;\n\t\t\tfor(int i = 0;i<n;i++){\n\t\t\t\tsu += a[i][y];\n\t\t\t}\n\t\t\ta[x][y] = -su;//赋相反值\n\t\t\t++y;\n\t\t}\n\t}\n\tlong long su = 0;\n\tfor(int i = 0;i< m;i++){\n\t\tsu += a[n-1][i];//终点\n\t}\n\ta[n-1][m-1] = -su;//终点处赋值\n\tfor(int i = 0;i< n;i++){\n\t\tfor(int j = 0;j<m;j++){\n\t\t\tcout<<a[i][j]<<&#x22; &#x22;;\n\t\t\t\n\t\t}\n\t\tcout<<endl;\n\t}\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<h1 id=\"dscarecrow\">D.Scarecrow<a class=\"anchor\" href=\"#dscarecrow\">#</a></h1>\n<h2 id=\"题目大意-1\">题目大意<a class=\"anchor\" href=\"#题目大意-1\">#</a></h2>\n<p>在一维数轴上有一些稻草人(>0)，乌鸦初始在x=0处，乌鸦会一直检测左侧是否有稻草人，如果左侧稻草人距离自己小于k（左侧最近稻草人的坐标为y），那么它立马会向右移动到y+k个，稻草人每秒移动1个单位长度，左右或者停止都可以。问乌鸦要到达l至少需要的时间的两倍。</p>\n<h2 id=\"思路-2\">思路<a class=\"anchor\" href=\"#思路-2\">#</a></h2>\n<p>乌鸦可以被距离k的稻草人推着走，也可以被小于k的稻草人跳跃着走。易得跳跃时花费的时间更少，所以要最大化跳跃次数。</p>\n<ul>\n<li>case1:只有左侧有稻草人时，只与左侧最近的稻草人有关，被左侧的稻草人推着走</li>\n<li>case2:只有右侧有稻草人时，需要右侧最近的稻草人移动到乌鸦处，让乌鸦开始跳跃起来</li>\n<li>case3:左右都有稻草人时，左右的稻草人应该同时向乌鸦处运动，左侧离乌鸦最近的稻草人一定距离k（刚刚跳跃过来），<strong>左侧稻草人推着乌鸦右移，右侧稻草人左移接近乌鸦，到达乌鸦处实现下一次跳跃</strong></li>\n</ul>\n<h2 id=\"代码-1\">代码<a class=\"anchor\" href=\"#代码-1\">#</a></h2>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">void</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> solve</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> k,l;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t cin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">k</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">l;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t k </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t l </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t vector</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;int></span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> a</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(n);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ) cin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">a[i];</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//输入</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ) a[i]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ans </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">];</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//初始a[0]移到原点时间</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> k;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//x是当前乌鸦的位置</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//开始枚举第二到第n个的稻草人</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(a[i]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x){</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//如果在乌鸦右侧</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\ta[i] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> max</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x,a[i]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">ans);</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//稻草人当前位置，最左时停在乌鸦当前处</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\tans </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (a[i]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//左侧乌鸦会一直推着走，相当于相向而行</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\tx </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a[i])</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> +</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> k;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//最终走到乌鸦出发点x和下一个稻草人处中点进行跳跃</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\telse</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//下一个稻草人在左侧</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\ta[i] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> min</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x,a[i]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">ans);</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//a[i]朝稻草人动</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\tx </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a[i] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> k;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//下一个稻草人一定会在上一个稻草人的右方，一定和稻草人的间距小于k</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> l){</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//若通过跳跃无法到达l处，则只能用稻草人推着乌鸦走</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tans </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> l </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tcout</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">ans</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">endl;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"void solve(){\n\t int n;\n\t int k,l;\n\t cin>>n>>k>>l;\n\t k *= 2;\n\t l *= 2;\n\n\t vector<int> a(n);\n\t for(int i = 0;i<n;i++ ) cin>>a[i];//输入\n\t for(int i = 0;i<n;i++ ) a[i]*=2;\n\n\tint ans = a[0];//初始a[0]移到原点时间\n\tint x = k;//x是当前乌鸦的位置\n\tfor(int i = 1;i< n;i++){//开始枚举第二到第n个的稻草人\n\t\tif(a[i]>x){//如果在乌鸦右侧\n\t\t\ta[i] = max(x,a[i]-ans);//稻草人当前位置，最左时停在乌鸦当前处\n\t\t\tans += (a[i]-x)/2;//左侧乌鸦会一直推着走，相当于相向而行\n\t\t\tx = (x + a[i])/2 + k;//最终走到乌鸦出发点x和下一个稻草人处中点进行跳跃\n\t\t}\n\t\telse{//下一个稻草人在左侧\n\t\t\ta[i] = min(x,a[i]+ans);//a[i]朝稻草人动\n\t\t\tx = a[i] + k;//下一个稻草人一定会在上一个稻草人的右方，一定和稻草人的间距小于k\n\t\t}\n\t}\n\n\tif(x < l){//若通过跳跃无法到达l处，则只能用稻草人推着乌鸦走\n\t\tans += l - x;\n\t}\n\tcout<<ans<<endl;\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>",{headings:131,localImagePaths:156,remoteImagePaths:157,frontmatter:158,imagePaths:163},[132,136,138,141,143,145,147,150,152,154],{depth:133,slug:134,text:135},1,"bcrafting","B.Crafting",{depth:32,slug:137,text:137},"思路",{depth:133,slug:139,text:140},"cthe-trail","C.The Trail",{depth:32,slug:142,text:142},"题目大意",{depth:32,slug:144,text:137},"思路-1",{depth:32,slug:146,text:146},"代码",{depth:133,slug:148,text:149},"dscarecrow","D.Scarecrow",{depth:32,slug:151,text:142},"题目大意-1",{depth:32,slug:153,text:137},"思路-2",{depth:32,slug:155,text:146},"代码-1",[],[],{title:119,publishDate:159,updatedDate:159,description:119,tags:160,language:21,minutesRead:60,words:162},"2025-01-14",[123,161],"Codeforces",297,[],"补题记录/魔法三角形以及二项式系数的模2形式",{id:164,data:166,body:171,filePath:172,digest:173,rendered:174},{title:167,description:167,publishDate:168,updatedDate:169,tags:170,language:21,draft:22,comment:23},"魔法三角形以及二项式系数的模2形式",["Date","2025-02-26T00:00:00.000Z"],["Date","2025-02-26T00:00:00.000Z"],[123,124],"题目来源于CF2072F[Problem - F - Codeforces](https://codeforces.com/contest/2072/problem/F)\n我们需要生成一个魔法三角形的第 nn 行。这个三角形的定义如下：\n\n1. 第 i行有 i个整数。\n2. 第一行只有一个整数 k。\n3. 对于第 i 行的第 j个元素 $T_i,T_j$其值由以下规则决定：\n    - 如果$1<j<i$，则 $T_{i,j}=T_{i-1,j-1}$⊕$T_{i-1,j}$​（即上一行的第 j−1 和第 j 个元素的异或结果）。\n    - 如果 j=1，则$T_{i,j}=T_{i-1,j}$（即上一行的第一个元素）。\n    - 如果 j=i，则 $T_{i,j}=T_{i,j-1}$（即上一行的最后一个元素）。\n\n```\n当k = 3时：\n        3 \n       3 3 \n      3 0 3 \n     3 3 3 3 \n     \n    3 0 0 0 3 \n   3 3 0 0 3 3 \n  3 0 3 0 3 0 3 \n 3 3 3 3 3 3 3 3 \n \n3 0 0 0 0 0 0 0 3\n```\n# 方法一：递归\n我们发现三角形在$2^k$ 行都全为k，并且是由边长为2的全为k的三角形以及对应边长的0的三角形组合而成。子结构相似，可以递归。\n```cpp\nvoid solve(){\n\tint n,k;\n\tcin>>n>>k;\n\tauto go = [&](this auto &&self,unsigned t)->void{\n\t\tif(t==1) cout<<k<<\" \";\n\t\telse if(t==2) cout<<k<<\" \"<<k<<\" \";\n\t\telse\n\t\t{\n\t\t\tint w = bit_width(t);\n\t\t\tif(t == (1<<(w-1)))\n\t\t\t{\n\t\t\t\tfor(int i =1;i<=t;i++)\n\t\t\t\t\tcout<<k<<\" \";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tunsigned x = t - (1<<(w-1));\n\t\t\t\tself(x);\n\t\t\t\tfor(int i = 1;i<=t-2*x;i++)\n\t\t\t\t\tcout<<0<<\" \";\n\t\t\t\tself(x);\n\t\t\t}\n\t\t}\n\t};\n\tgo(n);\n\tcout<<endl;\n}\n```\n\n# 方法二：二项式系数的模 2 形式\n- 异或操作的性质使得魔法三角形的每一行实际上是一个 **二项式系数的模 2 形式**。\n- 具体来说，第 n 行的第 j 个元素的值取决于 $\\tbinom{n-1}{j-1}mod2$ \n二项式系数$\\tbinom{n-1}{j-1}mod2$ 可以通过**位运算**来计算\n当且仅当$(n-1)\\&(j-1)==(j-1)$ 时成立\n\n$\\tbinom{n}{k}$逐位比较 n 和 k 的二进制表示：\n-  如果 k的某一位为 1，而 n的对应位为 0，则模2为0\n- 否则，模2为1\n```cpp\n//jiangly\nvoid solve() {\n    int n, k;\n    cin >> n >> k;\n    for (int i = 0; i < n; i++) {\n        cout << (((n - 1) & i) == i ? k : 0) << \" \\n\"[i == n - 1];\n    }\n}\n```","src/content/blog/补题记录/魔法三角形以及二项式系数的模2形式.md","37ddb8c738d8e29d",{html:175,metadata:176},"<p>题目来源于CF2072F<a href=\"https://codeforces.com/contest/2072/problem/F\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Problem - F - Codeforces<span> ↗</span></a>\n我们需要生成一个魔法三角形的第 nn 行。这个三角形的定义如下：</p>\n<ol>\n<li>第 i行有 i个整数。</li>\n<li>第一行只有一个整数 k。</li>\n<li>对于第 i 行的第 j个元素 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>T</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">T_i,T_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>其值由以下规则决定：\n<ul>\n<li>如果<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>&#x3C;</mo><mi>j</mi><mo>&#x3C;</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">1&#x3C;j&#x3C;i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6835em;vertical-align:-0.0391em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&#x3C;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&#x3C;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>，则 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow></msub><mo>=</mo><msub><mi>T</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>j</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">T_{i,j}=T_{i-1,j-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>⊕<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">T_{i-1,j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>​（即上一行的第 j−1 和第 j 个元素的异或结果）。</li>\n<li>如果 j=1，则<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow></msub><mo>=</mo><msub><mi>T</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">T_{i,j}=T_{i-1,j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>（即上一行的第一个元素）。</li>\n<li>如果 j=i，则 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow></msub><mo>=</mo><msub><mi>T</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">T_{i,j}=T_{i,j-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>（即上一行的最后一个元素）。</li>\n</ul>\n</li>\n</ol>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><pre><code><span class=\"line\"><span>当k = 3时：</span></span>\n<span class=\"line\"><span>        3 </span></span>\n<span class=\"line\"><span>       3 3 </span></span>\n<span class=\"line\"><span>      3 0 3 </span></span>\n<span class=\"line\"><span>     3 3 3 3 </span></span>\n<span class=\"line\"><span>     </span></span>\n<span class=\"line\"><span>    3 0 0 0 3 </span></span>\n<span class=\"line\"><span>   3 3 0 0 3 3 </span></span>\n<span class=\"line\"><span>  3 0 3 0 3 0 3 </span></span>\n<span class=\"line\"><span> 3 3 3 3 3 3 3 3 </span></span>\n<span class=\"line\"><span> </span></span>\n<span class=\"line\"><span>3 0 0 0 0 0 0 0 3</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">plaintext</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"当k = 3时：\n        3 \n       3 3 \n      3 0 3 \n     3 3 3 3 \n     \n    3 0 0 0 3 \n   3 3 0 0 3 3 \n  3 0 3 0 3 0 3 \n 3 3 3 3 3 3 3 3 \n \n3 0 0 0 0 0 0 0 3\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<h1 id=\"方法一递归\">方法一：递归<a class=\"anchor\" href=\"#方法一递归\">#</a></h1>\n<p>我们发现三角形在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span> 行都全为k，并且是由边长为2的全为k的三角形以及对应边长的0的三角形组合而成。子结构相似，可以递归。</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">void</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> solve</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n,k;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tcin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">k;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tauto</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> go </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">](</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">this</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> auto</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x26;&#x26;</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">self</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">unsigned</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> t</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)-></span><span style=\"color:#D73A49;--shiki-dark:#F97583\">void{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\tif(t==1)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> cout&#x3C;&#x3C;k&#x3C;&#x3C;\"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> \";</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\telse</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> if(t==2)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> cout&#x3C;&#x3C;k&#x3C;&#x3C;\"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> \"&#x3C;&#x3C;k&#x3C;&#x3C;\"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> \";</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\telse</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> w </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> bit_width</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(t);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(t </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(w</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\t\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">t;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\t\tcout</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">k</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\" \"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\telse</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\t\tunsigned</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> t </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(w</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">));</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\t\t\t\tself</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\t\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">t</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\t\tcout</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\" \"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\t\t\t\tself</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t};</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tgo</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(n);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tcout</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">endl;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"void solve(){\n\tint n,k;\n\tcin>>n>>k;\n\tauto go = [&#x26;](this auto &#x26;&#x26;self,unsigned t)->void{\n\t\tif(t==1) cout<<k<<&#x22; &#x22;;\n\t\telse if(t==2) cout<<k<<&#x22; &#x22;<<k<<&#x22; &#x22;;\n\t\telse\n\t\t{\n\t\t\tint w = bit_width(t);\n\t\t\tif(t == (1<<(w-1)))\n\t\t\t{\n\t\t\t\tfor(int i =1;i<=t;i++)\n\t\t\t\t\tcout<<k<<&#x22; &#x22;;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tunsigned x = t - (1<<(w-1));\n\t\t\t\tself(x);\n\t\t\t\tfor(int i = 1;i<=t-2*x;i++)\n\t\t\t\t\tcout<<0<<&#x22; &#x22;;\n\t\t\t\tself(x);\n\t\t\t}\n\t\t}\n\t};\n\tgo(n);\n\tcout<<endl;\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<h1 id=\"方法二二项式系数的模-2-形式\">方法二：二项式系数的模 2 形式<a class=\"anchor\" href=\"#方法二二项式系数的模-2-形式\">#</a></h1>\n<ul>\n<li>异或操作的性质使得魔法三角形的每一行实际上是一个 <strong>二项式系数的模 2 形式</strong>。</li>\n<li>具体来说，第 n 行的第 j 个元素的值取决于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mrow><mi>j</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mo fence=\"true\">)</mo></mrow><mi>m</mi><mi>o</mi><mi>d</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\tbinom{n-1}{j-1}mod2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3762em;vertical-align:-0.4811em;\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8951em;\"><span style=\"top:-2.355em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4811em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mord\">2</span></span></span></span>\n二项式系数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mrow><mi>j</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mo fence=\"true\">)</mo></mrow><mi>m</mi><mi>o</mi><mi>d</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\tbinom{n-1}{j-1}mod2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3762em;vertical-align:-0.4811em;\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8951em;\"><span style=\"top:-2.355em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4811em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mord\">2</span></span></span></span> 可以通过<strong>位运算</strong>来计算\n当且仅当<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">&#x26;</mi><mo stretchy=\"false\">(</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(n-1)\\&#x26;(j-1)==(j-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\">&#x26;</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">==</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> 时成立</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mi>n</mi><mi>k</mi></mfrac><mo fence=\"true\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\tbinom{n}{k}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2em;vertical-align:-0.35em;\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7454em;\"><span style=\"top:-2.355em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span></span></span></span>逐位比较 n 和 k 的二进制表示：</p>\n<ul>\n<li>如果 k的某一位为 1，而 n的对应位为 0，则模2为0</li>\n<li>否则，模2为1</li>\n</ul>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//jiangly</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">void</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> solve</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n, k;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    cin </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> k;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n; i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        cout </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (((n </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">?</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> k </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">:</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \" </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\n</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">[i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"//jiangly\nvoid solve() {\n    int n, k;\n    cin >> n >> k;\n    for (int i = 0; i < n; i++) {\n        cout << (((n - 1) &#x26; i) == i ? k : 0) << &#x22; \\n&#x22;[i == n - 1];\n    }\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>",{headings:177,localImagePaths:184,remoteImagePaths:185,frontmatter:186,imagePaths:190},[178,181],{depth:133,slug:179,text:180},"方法一递归","方法一：递归",{depth:133,slug:182,text:183},"方法二二项式系数的模-2-形式","方法二：二项式系数的模 2 形式",[],[],{title:167,publishDate:187,updatedDate:187,description:167,tags:188,language:21,minutesRead:60,words:189},"2025-02-26",[123,161],218,[],"补题记录/牛客小白月赛109补题",{id:191,data:193,body:199,filePath:200,digest:201,rendered:202},{title:194,description:194,publishDate:195,updatedDate:196,tags:197,language:21,draft:22,comment:23},"牛客小白月赛109补题",["Date","2025-01-20T00:00:00.000Z"],["Date","2025-01-20T00:00:00.000Z"],[123,198],"牛客","# C猪猪养成计划1\n\n## 题目描述\n1.从l->r，与没有玩耍过的猪猪玩耍，标记是第几个玩耍的猪，并标记已玩耍\n2.对编号为x的猪猪输出是第几个和Tobo玩耍的猪，没有玩耍过则为0\n\n## 思路\n考场思路：建两个数组，一个存储是第几个玩耍的猪，一个用于标记是否玩耍过\n但n,q都是最大10的五次方，操作时l,r会重复多次扫描已经标记过的猪，时间复杂度太高\n解法一：想到要去掉已经扫描过的猪，让下次不会再扫描。可以用set维护，已经玩耍过后从set中删去\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint tot;\nset<int> st;\nint b[200010];\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    int n, q;\n    cin >> n >> q;\n    for(int i = 1;i<=n;i++)\n        st.insert(i);\n    while(q--){\n        int op;\n        cin>>op;\n        if(op == 1){\n            int l,r;\n            cin>>l>>r;\n            auto it = st.lowr_bound(l);\n            while(it ! =st.end() && *it <= r){\n\t\t        b[*it] = ++tot;\n\t\t        it = st.erase(it);\n            }\n        }\n        else{\n            int x;\n            cin>>x;\n            cout<<b[x]<<endl;\n        }\n    }\n    return 0;\n}\n```\n\n# D猪猪养成计划2\n## 题目描述\nTobo 养了 n 只猪猪，但是 Tobo 为了不让它们吃醋，所以一视同仁不管陪哪只猪猪都只陪 m 天。  \n现在第i只猪猪有个要求，要 Tobo 第 $a_i$​ 天去陪它，即需要从第$a_i$天陪到第 $a_{i+m-1}$ 天。然而，因为 Tobo 精力有限，一天只能陪一只猪猪，显然 Tobo 大概率不能陪伴他的每只猪猪。  \n如果不陪第 iii 只猪猪，就要给它买 $val_i$价值的礼物来补偿它；反之，如果陪它，就要花费$b_i$ 的精力。  \n现在 Tobo 需要做一个抉择来选择陪的猪猪来使得花费的金钱与精力之和最少。他想知道这个最小值是多少。\n## 思路\n如果陪0只猪，那么总的金钱和精力和为$\\sum_{1}^{n}val_i$ ,如果陪第i只猪那么金钱和精力和为$\\sum_{1}^{n}val_i-val_i+b_i$ 可以看到我们要求b-val的最小值，可以用dp求\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tstd::ios::sync_with_stdio(false);\n\tstd::cin.tie(0);\n\tint n,m;\n    cin>>n>>m;\n\tlong long a[100010][3];\n    vector<vector<long long>> c(n+10);\n    long long res = 0;\n    for(int i = 1;i<=n;i++) cin>>a[i][0];\n    for(int i = 1;i<=n;i++) cin>>a[i][1]>>a[i][2],res+=a[i][2];\n    for(int i = 1;i<=n;i++) c[a[i][0]].push_back(a[i][1] - a[i][2]);//插入b-val\n    long long dp[n+10];\n    memset(dp,0x7f,sizeof dp);//注意不能用1e18赋值，1e18为浮点数\n    dp[0] = 0;//按照天数动态规划，第0天为0\n    //定义：第i天的最小的b-val\n    for(int i = 0;i<=n;i++)\n    {\n        long long ci = 0x7f;\n        for(auto x : c[i]) dp[i+m] = min(dp[i+m],dp[i]+x);\n        dp[i+1] = min(dp[i+1],dp[i]);\n    }\n    cout<<res+dp[n+1]<<endl;\n\treturn 0;\n}\n```\n\n# [Emin25筛]([E-min25筛_牛客小白月赛109](https://ac.nowcoder.com/acm/contest/99785/E))\n## 思路\n可以看到如果是暴力的话时间复杂度是$O(n^2)$，太慢！观察到$5*5=25$ ，可以转化为模5的奇数个和偶数个,可以存储前缀积,$a_i*a_{i+1}**……*a_j = sum_j/sum_{i-1}$ \n可以从后往前枚举左端点，用$num_0$和$num1$分别表示左端点右边5因子奇偶的和，按照对应的公式计算即可。\n**注意除法容易造成精度问题，可以用除法逆元,$b^{-1}=b^{(p-2)} mod p$**\n## 代码\n```cpp\nint n;\n\tcin>>n;\n\tvector<int> a(n+1),cnt(n+1);\n\tvector<long long> sum(n+1),num(2,0);\n\tvector<long long> pre(n+1);\n\tsum[0] = 1;\n\tfor(int i = 1;i<=n;i++)\n\t{\n\t\tcin>>a[i];\n\t\twhile(a[i]%5==0){\n\t\t\ta[i]/=5;\n\t\t\tcnt[i]++;\n\t\t}\n\t\tcnt[i]%=2;\n\t}\n\tfor(int i = 1;i<=n;i++){\n\t\tsum[i] = sum[i-1]*a[i];\n\t\tpre[i] = (pre[i-1]+cnt[i])%2;\n\t}\n\n\tlong long ans = 0;\n\tfor(int i = n;i>=0;i--)\n\t{\n        ans = (ans + num[pre[i]] * ksm(sum[i],mod-2) % mod) % mod;\n        ans = (ans + num[pre[i] ^ 1] *ksm(sum[i],mod-2) %mod *  5 % mod) % mod;\n        num[pre[i]] += sum[i];\n        num[pre[i]] %= mod;\n\t}\n\tcout<<ans<<endl;\n```","src/content/blog/补题记录/牛客小白月赛109补题.md","eec32164c69b99be",{html:203,metadata:204},"<h1 id=\"c猪猪养成计划1\">C猪猪养成计划1<a class=\"anchor\" href=\"#c猪猪养成计划1\">#</a></h1>\n<h2 id=\"题目描述\">题目描述<a class=\"anchor\" href=\"#题目描述\">#</a></h2>\n<p>1.从l->r，与没有玩耍过的猪猪玩耍，标记是第几个玩耍的猪，并标记已玩耍\n2.对编号为x的猪猪输出是第几个和Tobo玩耍的猪，没有玩耍过则为0</p>\n<h2 id=\"思路\">思路<a class=\"anchor\" href=\"#思路\">#</a></h2>\n<p>考场思路：建两个数组，一个存储是第几个玩耍的猪，一个用于标记是否玩耍过\n但n,q都是最大10的五次方，操作时l,r会重复多次扫描已经标记过的猪，时间复杂度太高\n解法一：想到要去掉已经扫描过的猪，让下次不会再扫描。可以用set维护，已经玩耍过后从set中删去</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">#include</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> &#x3C;bits/stdc++.h></span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">using</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> namespace</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> tot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">set</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;int></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> st;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> b[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">200010</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    ios</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">sync_with_stdio</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">false</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    cin.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">tie</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">nullptr</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n, q;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    cin </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> q;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        st.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">insert</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(i);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    while</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(q</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">--</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> op;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        cin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">op;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(op </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">            int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> l,r;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">            cin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">l</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">r;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">            auto</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> it </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> st.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">lowr_bound</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(l);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">            while</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(it </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">!</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">st.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">end</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;&#x26;</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> *</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">it </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> r){</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t        b[</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">it] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> ++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">tot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t        it </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> st.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">erase</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(it);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        else</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">            int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">            cin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">            cout</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">b[x]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">endl;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    return</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"#include <bits/stdc++.h>\nusing namespace std;\n\nint tot;\nset<int> st;\nint b[200010];\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    int n, q;\n    cin >> n >> q;\n    for(int i = 1;i<=n;i++)\n        st.insert(i);\n    while(q--){\n        int op;\n        cin>>op;\n        if(op == 1){\n            int l,r;\n            cin>>l>>r;\n            auto it = st.lowr_bound(l);\n            while(it ! =st.end() &#x26;&#x26; *it <= r){\n\t\t        b[*it] = ++tot;\n\t\t        it = st.erase(it);\n            }\n        }\n        else{\n            int x;\n            cin>>x;\n            cout<<b[x]<<endl;\n        }\n    }\n    return 0;\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<h1 id=\"d猪猪养成计划2\">D猪猪养成计划2<a class=\"anchor\" href=\"#d猪猪养成计划2\">#</a></h1>\n<h2 id=\"题目描述-1\">题目描述<a class=\"anchor\" href=\"#题目描述-1\">#</a></h2>\n<p>Tobo 养了 n 只猪猪，但是 Tobo 为了不让它们吃醋，所以一视同仁不管陪哪只猪猪都只陪 m 天。<br>\n现在第i只猪猪有个要求，要 Tobo 第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>​ 天去陪它，即需要从第<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>天陪到第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mo>+</mo><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">a_{i+m-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6389em;vertical-align:-0.2083em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">m</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span></span></span></span> 天。然而，因为 Tobo 精力有限，一天只能陪一只猪猪，显然 Tobo 大概率不能陪伴他的每只猪猪。<br>\n如果不陪第 iii 只猪猪，就要给它买 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mi>a</mi><msub><mi>l</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">val_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>价值的礼物来补偿它；反之，如果陪它，就要花费<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">b_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 的精力。<br>\n现在 Tobo 需要做一个抉择来选择陪的猪猪来使得花费的金钱与精力之和最少。他想知道这个最小值是多少。</p>\n<h2 id=\"思路-1\">思路<a class=\"anchor\" href=\"#思路-1\">#</a></h2>\n<p>如果陪0只猪，那么总的金钱和精力和为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∑</mo><mn>1</mn><mi>n</mi></msubsup><mi>v</mi><mi>a</mi><msub><mi>l</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\sum_{1}^{n}val_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.104em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> ,如果陪第i只猪那么金钱和精力和为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∑</mo><mn>1</mn><mi>n</mi></msubsup><mi>v</mi><mi>a</mi><msub><mi>l</mi><mi>i</mi></msub><mo>−</mo><mi>v</mi><mi>a</mi><msub><mi>l</mi><mi>i</mi></msub><mo>+</mo><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\sum_{1}^{n}val_i-val_i+b_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.104em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 可以看到我们要求b-val的最小值，可以用dp求</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">#include</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> &#x3C;bits/stdc++.h></span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">using</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> namespace</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(){</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tstd</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">ios</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">sync_with_stdio</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">false</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tstd</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::cin.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">tie</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n,m;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    cin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">m;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tlong</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">100010</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">][</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">3</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    vector</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">vector</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;long</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long>></span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> c</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">10</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    long</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) cin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">a[i][</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) cin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">a[i][</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">a[i][</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">],res</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">a[i][</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) c[a[i][</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">]].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">push_back</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(a[i][</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a[i][</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">]);</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//插入b-val</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    long</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> dp[n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">10</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    memset</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(dp,</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">0x</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">7f</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,sizeof dp);</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//注意不能用1e18赋值，1e18为浮点数</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    dp[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//按照天数动态规划，第0天为0</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">    //定义：第i天的最小的b-val</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        long</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ci </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> 0x</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">7f</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">auto</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x : c[i]) dp[i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">m] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> min</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(dp[i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">m],dp[i]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        dp[i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> min</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(dp[i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">],dp[i]);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    cout</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">res</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">dp[n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">endl;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\treturn</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"#include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tstd::ios::sync_with_stdio(false);\n\tstd::cin.tie(0);\n\tint n,m;\n    cin>>n>>m;\n\tlong long a[100010][3];\n    vector<vector<long long>> c(n+10);\n    long long res = 0;\n    for(int i = 1;i<=n;i++) cin>>a[i][0];\n    for(int i = 1;i<=n;i++) cin>>a[i][1]>>a[i][2],res+=a[i][2];\n    for(int i = 1;i<=n;i++) c[a[i][0]].push_back(a[i][1] - a[i][2]);//插入b-val\n    long long dp[n+10];\n    memset(dp,0x7f,sizeof dp);//注意不能用1e18赋值，1e18为浮点数\n    dp[0] = 0;//按照天数动态规划，第0天为0\n    //定义：第i天的最小的b-val\n    for(int i = 0;i<=n;i++)\n    {\n        long long ci = 0x7f;\n        for(auto x : c[i]) dp[i+m] = min(dp[i+m],dp[i]+x);\n        dp[i+1] = min(dp[i+1],dp[i]);\n    }\n    cout<<res+dp[n+1]<<endl;\n\treturn 0;\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<h1 id=\"emin25筛\"><a href=\"%5BE-min25%E7%AD%9B_%E7%89%9B%E5%AE%A2%E5%B0%8F%E7%99%BD%E6%9C%88%E8%B5%9B109%5D(https://ac.nowcoder.com/acm/contest/99785/E)\">Emin25筛</a><a class=\"anchor\" href=\"#emin25筛\">#</a></h1>\n<h2 id=\"思路-2\">思路<a class=\"anchor\" href=\"#思路-2\">#</a></h2>\n<p>可以看到如果是暴力的话时间复杂度是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，太慢！观察到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn><mo>∗</mo><mn>5</mn><mo>=</mo><mn>25</mn></mrow><annotation encoding=\"application/x-tex\">5*5=25</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">25</span></span></span></span> ，可以转化为模5的奇数个和偶数个,可以存储前缀积,<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>∗</mo><msub><mi>a</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>∗</mo><mo>∗</mo><mo>…</mo><mo>…</mo><mo>∗</mo><msub><mi>a</mi><mi>j</mi></msub><mo>=</mo><mi>s</mi><mi>u</mi><msub><mi>m</mi><mi>j</mi></msub><mi mathvariant=\"normal\">/</mi><mi>s</mi><mi>u</mi><msub><mi>m</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">a_i*a_{i+1}**……*a_j = sum_j/sum_{i-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6153em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6736em;vertical-align:-0.2083em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord\">∗</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">……</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7167em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span></span></span></span>\n可以从后往前枚举左端点，用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><msub><mi>m</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">num_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">num1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord\">1</span></span></span></span>分别表示左端点右边5因子奇偶的和，按照对应的公式计算即可。\n<strong>注意除法容易造成精度问题，可以用除法逆元,<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>b</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><msup><mi>b</mi><mrow><mo stretchy=\"false\">(</mo><mi>p</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></msup><mi>m</mi><mi>o</mi><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">b^{-1}=b^{(p-2)} mod p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0824em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">p</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">2</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span></strong></p>\n<h2 id=\"代码\">代码<a class=\"anchor\" href=\"#代码\">#</a></h2>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tcin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tvector</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">> </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">a</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">),</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">cnt</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tvector</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">long</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">> </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">sum</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">),</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">num</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tvector</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">long</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">> </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">pre</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tsum[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tcin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">a[i];</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\twhile</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(a[i]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">5</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\ta[i]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">5</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\tcnt[i]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tcnt[i]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tsum[i] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> sum[i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">a[i];</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tpre[i] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (pre[i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">cnt[i])</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tlong</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ans </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">--</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ans </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (ans </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> num[pre[i]] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ksm</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(sum[i],mod</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mod) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mod;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ans </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (ans </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> num[pre[i] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">^</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">ksm</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(sum[i],mod</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">mod </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">  5</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> %</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mod) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mod;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        num[pre[i]] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> sum[i];</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        num[pre[i]] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mod;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tcout</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">ans</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">endl;</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"int n;\n\tcin>>n;\n\tvector<int> a(n+1),cnt(n+1);\n\tvector<long long> sum(n+1),num(2,0);\n\tvector<long long> pre(n+1);\n\tsum[0] = 1;\n\tfor(int i = 1;i<=n;i++)\n\t{\n\t\tcin>>a[i];\n\t\twhile(a[i]%5==0){\n\t\t\ta[i]/=5;\n\t\t\tcnt[i]++;\n\t\t}\n\t\tcnt[i]%=2;\n\t}\n\tfor(int i = 1;i<=n;i++){\n\t\tsum[i] = sum[i-1]*a[i];\n\t\tpre[i] = (pre[i-1]+cnt[i])%2;\n\t}\n\n\tlong long ans = 0;\n\tfor(int i = n;i>=0;i--)\n\t{\n        ans = (ans + num[pre[i]] * ksm(sum[i],mod-2) % mod) % mod;\n        ans = (ans + num[pre[i] ^ 1] *ksm(sum[i],mod-2) %mod *  5 % mod) % mod;\n        num[pre[i]] += sum[i];\n        num[pre[i]] %= mod;\n\t}\n\tcout<<ans<<endl;\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>",{headings:205,localImagePaths:223,remoteImagePaths:224,frontmatter:225,imagePaths:229},[206,209,211,212,215,217,218,221,222],{depth:133,slug:207,text:208},"c猪猪养成计划1","C猪猪养成计划1",{depth:32,slug:210,text:210},"题目描述",{depth:32,slug:137,text:137},{depth:133,slug:213,text:214},"d猪猪养成计划2","D猪猪养成计划2",{depth:32,slug:216,text:210},"题目描述-1",{depth:32,slug:144,text:137},{depth:133,slug:219,text:220},"emin25筛","Emin25筛",{depth:32,slug:153,text:137},{depth:32,slug:146,text:146},[],[],{title:194,publishDate:226,updatedDate:226,description:194,tags:227,language:21,minutesRead:60,words:228},"2025-01-20",[123,198],340,[],"补题记录/abc389总结补题",{id:230,data:232,body:238,filePath:239,digest:240,rendered:241},{title:233,description:233,publishDate:234,updatedDate:235,tags:236,language:21,draft:22,comment:23},"ABC389总结补题",["Date","2025-01-21T00:00:00.000Z"],["Date","2025-01-21T00:00:00.000Z"],[123,237],"atcoder","# C-Snake Queue\n\n## 题目大意\n有一个蛇队列。最初，队列是空的。\n\n您将获得 Q个查询，应按给出的顺序进行处理。查询有三种类型：\n- 类型 1 ：以 `1 l` 的形式给出。长度为 l的蛇被添加到队列末尾。如果队列在添加之前是空的，则新添加的蛇的头部位置为 0 ；否则，它是队列中最后一条蛇的头部坐标和最后一条蛇的长度之和。\n- 类型 2 ：以 `2` 的形式给出。队列前面的蛇离开队列。保证队列此时不为空。令 mm 为离开的蛇的长度，则队列中剩余的每个蛇的头部坐标减少 m 。\n- 类型 3 ：以 `3 k` 形式给出。输出从队列前面开始第 k 条蛇的头部坐标。保证此时队列中至少有 k 条蛇\n## 思路\n比赛时第一想法是把蛇的队列在类型二时一个一个修改仍在队列中的值，但时间复杂度过高。第二想法是记录已经出队的蛇的长度，坐标减去已经出队的蛇的长度就是当前的坐标。**题目保证了让队列前面的蛇离开队列过程中保证不为空，则队列为空添加时就是第一次，无需将已经出队蛇的长度归零。即每条新进入队列的蛇的坐标保持递增！**\n## 代码\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nstruct snake\n{\n\tlong long h;\n\tlong long m;\n};\ndeque<snake> snakes;\n\nint main(){\n\tint q;\n\tcin>>q;\n\tlong long outs = 0;\n\n\twhile(q--){\n\t\tint t;\n\t\tcin>>t;\n\t\tif(t==1)\n\t\t{\n\t\t\tlong long l;\n\t\t\tcin>>l;\n\t\t\tif(snakes.size()){\n\t\t\t\tlong long x = snakes.back().h;\n\t\t\t\tlong long y = snakes.back().m;\n\t\t\t\tsnakes.push_back({x+y,l});\n\t\t\t}\n\t\t\telse snakes.push_back({0,l});\n\t\t}\n\t\telse if(t==2)\n\t\t{\n\t\t\tlong long m = snakes.front().m;\n\t\t\touts-=m;\n\t\t\tsnakes.pop_front();\n\t\t}\n\t\telse if(t==3)\n\t\t{\n\t\t\tlong long k;\n\t\t\tcin>>k;\n\t\t\tcout<<snakes[k-1].h+outs<<endl;\n\t\t}\n\t}\n\treturn 0;\n}\n\n\n```\n\n# D-Squares in Circle\n## 题目大意\nOn the two-dimensional coordinate plane, there is an infinite tiling of 1×11×1 squares.\nConsider drawing a circle of radius R centered at the center of one of these squares. How many of these squares are completely contained inside the circle?\nMore precisely, find the number of integer pairs (i,j) such that all four points (i+0.5,j+0.5)(i+0.5,j+0.5), (i+0.5,j−0.5)(i+0.5,j−0.5), (i−0.5,j+0.5)(i−0.5,j+0.5), and (i−0.5,j−0.5)(i−0.5,j−0.5) are at a distance of at most R from the origin.\n## 思路\n考试时做出来的，但在小数上犯了大车。**技巧：可以同时乘以4，让括号内的0.5变为1,避免出现小数**\n## 代码\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\nint main() {\n    ll r;\n    cin >> r;\n    ll m = (r-1)*4+1;\n    ll n = 0;\n\n    for(ll  i = 3;i<2*r;i+=2){\n        n+=(ll)(sqrt(4*r*r - i*i)-1)/2;\n    }\n    cout<<m+4*n<<endl;\n    return 0;\n}\n\n```\n\n# E-Square Price\n## 题目大意\n有 N种产品，每种产品有 $10^{100}$ 件库存。\n您可以购买任意非负数量的每种产品。要购买第 i个产品的 k 件，需要花费 $k^2P_i$ 日元。\n如果您的总购买成本最多为 M日元，您总共可以购买的最大单位数是多少？\n### 约束\n\n- $1 \\leq N \\leq 2 \\times 10^{5}$\n- $1 \\leq M \\leq 10^{18}$\n- $1 \\leq P_i \\leq 2 \\times 10^{9}$\n- 所有输入值均为整数。\n## 思路\n看到M非常大，枚举时间复杂度太高，注意到每件产品的花费为$P_i,3P_i,5P_i……$ 即每件产品是单调递增的，可以考虑用二分法。设每次最多买价格为X的商品。**注意是能够全部买完X，则右移，如果只能买部分的X，需要左移。最后再用剩下的钱看能否再买部分的价格为X+1的商品。**\n**特别注意溢出，数字太大，最好都开大一些**\n## 代码\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define int long long\n\nll ans;\nll n,m;\nconst int N = 2e6+10;\nvector<ll> p(N);\nbool check(int x)\n{\n\t__int128 ans = 0;\n\tfor(int i = 1;i<=n;i++)\n\t{\n\t\tint temp = (x/p[i]+1)/2;\n\t\tans+=(__int128)p[i]*temp*temp;\n\t\tif(ans>m) return false;\n\t}\n\treturn true;\n}\nsigned main(){\n\tstd::ios::sync_with_stdio(false);\n\tstd::cin.tie(0);\n\tcin>>n>>m;\n\tfor(int i = 1;i<=n;i++)\n\t{\n\t\tcin>>p[i];\n\t}\n\tint l = 0;\n\tint r = m;\n\tint ans= -1;\n\n\twhile(l <= r)\n\t{\n\t\tll mid = (l+r)/2;\n\t\tif(check(mid))\n\t\t{\n\t\t\tans = mid;//一定可以全部购买<=mid的，更新答案\n\t\t\tl = mid+1;\n\t\t}\n\t\telse r = mid-1;\n\t}\n\tint res = 0;\n\tfor(int i = 1;i<=n;i++)\n\t{\n\t\tint temp = (ans/p[i]+1)/2;\n\t\tres+=temp;\n\t\tm-=temp*temp*p[i];\n\t}\n\tres+=m/(ans+1);\n\tcout<<res<<endl;\n\treturn 0;\n}\n```\n# F-Rated Range\n## 题目大意\nTakahashi 计划参加 N场 AtCoder 比赛。\n\n在第 i 场比赛( 1≤i≤N)中，如果他的评分在 Li和 Ri之间(含)，他的评分将增加 1。\n\n您将获得以下格式的 Q个查询：\n\n- 给出一个整数 X 。假设 Takahashi 的初始评分为 X ，请在参加所有 N 场比赛后确定他的评分。\n## 思路\n后续重做","src/content/blog/补题记录/ABC389总结补题.md","69db490727fce1ce",{html:242,metadata:243},"<h1 id=\"c-snake-queue\">C-Snake Queue<a class=\"anchor\" href=\"#c-snake-queue\">#</a></h1>\n<h2 id=\"题目大意\">题目大意<a class=\"anchor\" href=\"#题目大意\">#</a></h2>\n<p>有一个蛇队列。最初，队列是空的。</p>\n<p>您将获得 Q个查询，应按给出的顺序进行处理。查询有三种类型：</p>\n<ul>\n<li>类型 1 ：以 <code>1 l</code> 的形式给出。长度为 l的蛇被添加到队列末尾。如果队列在添加之前是空的，则新添加的蛇的头部位置为 0 ；否则，它是队列中最后一条蛇的头部坐标和最后一条蛇的长度之和。</li>\n<li>类型 2 ：以 <code>2</code> 的形式给出。队列前面的蛇离开队列。保证队列此时不为空。令 mm 为离开的蛇的长度，则队列中剩余的每个蛇的头部坐标减少 m 。</li>\n<li>类型 3 ：以 <code>3 k</code> 形式给出。输出从队列前面开始第 k 条蛇的头部坐标。保证此时队列中至少有 k 条蛇</li>\n</ul>\n<h2 id=\"思路\">思路<a class=\"anchor\" href=\"#思路\">#</a></h2>\n<p>比赛时第一想法是把蛇的队列在类型二时一个一个修改仍在队列中的值，但时间复杂度过高。第二想法是记录已经出队的蛇的长度，坐标减去已经出队的蛇的长度就是当前的坐标。<strong>题目保证了让队列前面的蛇离开队列过程中保证不为空，则队列为空添加时就是第一次，无需将已经出队蛇的长度归零。即每条新进入队列的蛇的坐标保持递增！</strong></p>\n<h2 id=\"代码\">代码<a class=\"anchor\" href=\"#代码\">#</a></h2>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">#include</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> &#x3C;bits/stdc++.h></span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">using</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> namespace</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> snake</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tlong</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> h;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tlong</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> m;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">};</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">deque</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">snake</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> snakes;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> q;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tcin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">q;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tlong</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> outs </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\twhile</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(q</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">--</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> t;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tcin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">t;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(t</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\tlong</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> l;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\tcin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">l;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(snakes.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">size</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">()){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\t\tlong</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> snakes.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">back</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">().h;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\t\tlong</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> y </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> snakes.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">back</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">().m;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\tsnakes.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">push_back</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">({x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">y,l});</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\telse</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> snakes.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">push_back</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">({</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,l});</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\telse</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(t</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\tlong</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> m </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> snakes.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">front</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">().m;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\touts</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">m;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\tsnakes.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">pop_front</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\telse</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(t</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">3</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\tlong</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> k;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\tcin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">k;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\tcout</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">snakes[k</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].h</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">outs</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">endl;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\treturn</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"#include <bits/stdc++.h>\nusing namespace std;\n\nstruct snake\n{\n\tlong long h;\n\tlong long m;\n};\ndeque<snake> snakes;\n\nint main(){\n\tint q;\n\tcin>>q;\n\tlong long outs = 0;\n\n\twhile(q--){\n\t\tint t;\n\t\tcin>>t;\n\t\tif(t==1)\n\t\t{\n\t\t\tlong long l;\n\t\t\tcin>>l;\n\t\t\tif(snakes.size()){\n\t\t\t\tlong long x = snakes.back().h;\n\t\t\t\tlong long y = snakes.back().m;\n\t\t\t\tsnakes.push_back({x+y,l});\n\t\t\t}\n\t\t\telse snakes.push_back({0,l});\n\t\t}\n\t\telse if(t==2)\n\t\t{\n\t\t\tlong long m = snakes.front().m;\n\t\t\touts-=m;\n\t\t\tsnakes.pop_front();\n\t\t}\n\t\telse if(t==3)\n\t\t{\n\t\t\tlong long k;\n\t\t\tcin>>k;\n\t\t\tcout<<snakes[k-1].h+outs<<endl;\n\t\t}\n\t}\n\treturn 0;\n}\n\n\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<h1 id=\"d-squares-in-circle\">D-Squares in Circle<a class=\"anchor\" href=\"#d-squares-in-circle\">#</a></h1>\n<h2 id=\"题目大意-1\">题目大意<a class=\"anchor\" href=\"#题目大意-1\">#</a></h2>\n<p>On the two-dimensional coordinate plane, there is an infinite tiling of 1×11×1 squares.\nConsider drawing a circle of radius R centered at the center of one of these squares. How many of these squares are completely contained inside the circle?\nMore precisely, find the number of integer pairs (i,j) such that all four points (i+0.5,j+0.5)(i+0.5,j+0.5), (i+0.5,j−0.5)(i+0.5,j−0.5), (i−0.5,j+0.5)(i−0.5,j+0.5), and (i−0.5,j−0.5)(i−0.5,j−0.5) are at a distance of at most R from the origin.</p>\n<h2 id=\"思路-1\">思路<a class=\"anchor\" href=\"#思路-1\">#</a></h2>\n<p>考试时做出来的，但在小数上犯了大车。<strong>技巧：可以同时乘以4，让括号内的0.5变为1,避免出现小数</strong></p>\n<h2 id=\"代码-1\">代码<a class=\"anchor\" href=\"#代码-1\">#</a></h2>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">#include</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> &#x3C;bits/stdc++.h></span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">using</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> namespace</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">typedef</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ll;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    ll r;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    cin </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> r;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    ll m </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (r</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">4</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    ll n </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(ll  i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 3</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">r;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(ll)(</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">sqrt</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">4</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">r</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">r </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">i)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    cout</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">m</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">4</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">endl;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    return</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\nint main() {\n    ll r;\n    cin >> r;\n    ll m = (r-1)*4+1;\n    ll n = 0;\n\n    for(ll  i = 3;i<2*r;i+=2){\n        n+=(ll)(sqrt(4*r*r - i*i)-1)/2;\n    }\n    cout<<m+4*n<<endl;\n    return 0;\n}\n\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<h1 id=\"e-square-price\">E-Square Price<a class=\"anchor\" href=\"#e-square-price\">#</a></h1>\n<h2 id=\"题目大意-2\">题目大意<a class=\"anchor\" href=\"#题目大意-2\">#</a></h2>\n<p>有 N种产品，每种产品有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>10</mn><mn>100</mn></msup></mrow><annotation encoding=\"application/x-tex\">10^{100}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">100</span></span></span></span></span></span></span></span></span></span></span></span> 件库存。\n您可以购买任意非负数量的每种产品。要购买第 i个产品的 k 件，需要花费 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mn>2</mn></msup><msub><mi>P</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">k^2P_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9641em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 日元。\n如果您的总购买成本最多为 M日元，您总共可以购买的最大单位数是多少？</p>\n<h3 id=\"约束\">约束<a class=\"anchor\" href=\"#约束\">#</a></h3>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>2</mn><mo>×</mo><msup><mn>10</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">1 \\leq N \\leq 2 \\times 10^{5}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>M</mi><mo>≤</mo><msup><mn>10</mn><mn>18</mn></msup></mrow><annotation encoding=\"application/x-tex\">1 \\leq M \\leq 10^{18}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">18</span></span></span></span></span></span></span></span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><msub><mi>P</mi><mi>i</mi></msub><mo>≤</mo><mn>2</mn><mo>×</mo><msup><mn>10</mn><mn>9</mn></msup></mrow><annotation encoding=\"application/x-tex\">1 \\leq P_i \\leq 2 \\times 10^{9}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span></span></span></span></span></li>\n<li>所有输入值均为整数。</li>\n</ul>\n<h2 id=\"思路-2\">思路<a class=\"anchor\" href=\"#思路-2\">#</a></h2>\n<p>看到M非常大，枚举时间复杂度太高，注意到每件产品的花费为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>P</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><mn>3</mn><msub><mi>P</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><mn>5</mn><msub><mi>P</mi><mi>i</mi></msub><mo>…</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">P_i,3P_i,5P_i……</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">5</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">……</span></span></span></span> 即每件产品是单调递增的，可以考虑用二分法。设每次最多买价格为X的商品。<strong>注意是能够全部买完X，则右移，如果只能买部分的X，需要左移。最后再用剩下的钱看能否再买部分的价格为X+1的商品。</strong>\n<strong>特别注意溢出，数字太大，最好都开大一些</strong></p>\n<h2 id=\"代码-2\">代码<a class=\"anchor\" href=\"#代码-2\">#</a></h2>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">#include</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> &#x3C;bits/stdc++.h></span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">using</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> namespace</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">typedef</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ll;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">#define</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> int</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">ll ans;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">ll n,m;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> N </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 2</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">e</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">6</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">10</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">vector</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">ll</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">> </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">p</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">N</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">bool</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> check</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t__int128 ans </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> temp </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">p[i]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tans</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(__int128)p[i]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">temp</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">temp;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(ans</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">m) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">return</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> false</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\treturn</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> true</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">signed</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(){</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tstd</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">ios</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">sync_with_stdio</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">false</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tstd</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::cin.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">tie</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tcin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">m;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tcin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">p[i];</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> l </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> r </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> m;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ans</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> -</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\twhile</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(l </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> r)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tll mid </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (l</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">r)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">check</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(mid))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\tans </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mid;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//一定可以全部购买&#x3C;=mid的，更新答案</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\tl </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mid</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\telse</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> r </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mid</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> temp </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (ans</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">p[i]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tres</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">temp;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tm</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">temp</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">temp</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">p[i];</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tres</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">m</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(ans</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tcout</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">res</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">endl;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\treturn</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define int long long\n\nll ans;\nll n,m;\nconst int N = 2e6+10;\nvector<ll> p(N);\nbool check(int x)\n{\n\t__int128 ans = 0;\n\tfor(int i = 1;i<=n;i++)\n\t{\n\t\tint temp = (x/p[i]+1)/2;\n\t\tans+=(__int128)p[i]*temp*temp;\n\t\tif(ans>m) return false;\n\t}\n\treturn true;\n}\nsigned main(){\n\tstd::ios::sync_with_stdio(false);\n\tstd::cin.tie(0);\n\tcin>>n>>m;\n\tfor(int i = 1;i<=n;i++)\n\t{\n\t\tcin>>p[i];\n\t}\n\tint l = 0;\n\tint r = m;\n\tint ans= -1;\n\n\twhile(l <= r)\n\t{\n\t\tll mid = (l+r)/2;\n\t\tif(check(mid))\n\t\t{\n\t\t\tans = mid;//一定可以全部购买<=mid的，更新答案\n\t\t\tl = mid+1;\n\t\t}\n\t\telse r = mid-1;\n\t}\n\tint res = 0;\n\tfor(int i = 1;i<=n;i++)\n\t{\n\t\tint temp = (ans/p[i]+1)/2;\n\t\tres+=temp;\n\t\tm-=temp*temp*p[i];\n\t}\n\tres+=m/(ans+1);\n\tcout<<res<<endl;\n\treturn 0;\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<h1 id=\"f-rated-range\">F-Rated Range<a class=\"anchor\" href=\"#f-rated-range\">#</a></h1>\n<h2 id=\"题目大意-3\">题目大意<a class=\"anchor\" href=\"#题目大意-3\">#</a></h2>\n<p>Takahashi 计划参加 N场 AtCoder 比赛。</p>\n<p>在第 i 场比赛( 1≤i≤N)中，如果他的评分在 Li和 Ri之间(含)，他的评分将增加 1。</p>\n<p>您将获得以下格式的 Q个查询：</p>\n<ul>\n<li>给出一个整数 X 。假设 Takahashi 的初始评分为 X ，请在参加所有 N 场比赛后确定他的评分。</li>\n</ul>\n<h2 id=\"思路-3\">思路<a class=\"anchor\" href=\"#思路-3\">#</a></h2>\n<p>后续重做</p>",{headings:244,localImagePaths:274,remoteImagePaths:275,frontmatter:276,imagePaths:281},[245,248,249,250,251,254,255,256,257,260,262,264,265,267,270,272],{depth:133,slug:246,text:247},"c-snake-queue","C-Snake Queue",{depth:32,slug:142,text:142},{depth:32,slug:137,text:137},{depth:32,slug:146,text:146},{depth:133,slug:252,text:253},"d-squares-in-circle","D-Squares in Circle",{depth:32,slug:151,text:142},{depth:32,slug:144,text:137},{depth:32,slug:155,text:146},{depth:133,slug:258,text:259},"e-square-price","E-Square Price",{depth:32,slug:261,text:142},"题目大意-2",{depth:39,slug:263,text:263},"约束",{depth:32,slug:153,text:137},{depth:32,slug:266,text:146},"代码-2",{depth:133,slug:268,text:269},"f-rated-range","F-Rated Range",{depth:32,slug:271,text:142},"题目大意-3",{depth:32,slug:273,text:137},"思路-3",[],[],{title:233,publishDate:277,updatedDate:277,description:233,tags:278,language:21,minutesRead:113,words:280},"2025-01-21",[123,279],"AtCoder",417,[],"补题记录/牛客周赛round76总结补题",{id:282,data:284,body:289,filePath:290,digest:291,rendered:292},{title:285,description:285,publishDate:286,updatedDate:287,tags:288,language:21,draft:22,comment:23},"牛客周赛Round76总结补题",["Date","2025-01-13T00:00:00.000Z"],["Date","2025-01-13T00:00:00.000Z"],[123,198],"# C 小红的gcd\n\n## 题目描述\n小红有一个长度为$n$的数组，她希望数组元素之和越少越好。  \n她可以进行**任意次**操作，每次选择数组中的两个元素$a_i$和 $a_j$ ，令 $a_i = a_j = gcd(a_i,a_j)$ 。  所有操作结束后，请你输出**最小**的数组元素之和。\n## 思路\n找到数组所有元素共有的gcd，对数组元素依次对总gcd取gcd即可，最后就是数组的总和就是$ans=n*gcd$\n\n# D 奇偶调整(题假了)\n## 题目描述\n\nUPD：**本题假了**，hack数据如下：  \n2 2 1\n11 9  \n正确答案应该为 13 ，而不是 14 。\n\n小红有一个长度为$n$ 的数组 $a$ ，第 $i$ 个元素为 $a_i$​ 。\n小红可以执行两种操作，操作内容如下：  \n1.选择一个偶数元素 $a_i$ ，令 $a_i=a_i/2$。  \n2.选择一个奇数元素 $a_i$，令 $a_i=a_i⊕1$ 。  \n其中，操作 111 最多执行 mmm 次，操作 222 最多执行 kkk 次。小红想最小化数组元素之和，请你输出这个值。  \n⊕ 代表按位异或。\n\n## 思路\n### 补充\n对$a_i$与1取位异或，奇数取完相当于减一，偶数取完加一\n### 贪心解答（假了）\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tint n;\n\tcin>>n;\n\tint m,k;\n\tcin>>m>>k;\n\tpriority_queue<long long> q;\n\tfor(int i = 1;i<=n;i++){\n\t\tint x;\n\t\tcin>>x;\n\t\tq.push(x);\n\t}\n\tlong long ans = 0;\n\twhile(!q.empty()){\n\t\tauto u = q.top();\n\t\tq.pop();\n\t\tif(!u)continue;\n\t\tif(u&1){\n\t\t\tif(k>=1){\n\t\t\t\tu--;\n\t\t\t\tk--;\n\t\t\t\tq.push(u);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tans += u;\n\t\t\t}\n\t\t}\n\t\telse if(u % 2 == 0){\n\t\t\tif(m){\n\t\t\t\tu /= 2;\n\t\t\t\tm--;\n\t\t\t\tq.push(u);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tans += u;\n\t\t\t}\n\t\t}\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```\n关键在**优先队列(priority_queue)，顶部是最大的数**，最开始还在傻傻地写vector,然后每次操作完成之后排序。。。。**注意大小，开Long long**\n\n# E 幂次进近[幂次进近](https://ac.nowcoder.com/acm/contest/99990/E)\n## 题目描述\n给定 t 次询问，每次询问给出两个正整数 n 和 k 。  \n请你找到最小的**正整数** m ，使得 $n-m^k$ 的**绝对值**最小。\n## 思路\n比赛时得了180(200)，有两个点没有过。注意需要用__int128_（$2^{127}-1 约等于{10}^{38}$），二分法逼近m,使用快速幂求$m^k$ ，$2^{60}≈1.1529×10^{18}$\n```cpp\n//__int128_读入写入模板\nvoid read(__int128 &x) {\n    string s;\n    cin >> s;\n    x = 0;\n    for (char c : s) {\n        x = x * 10 + (c - '0');\n    }\n}\n\nvoid print(__int128 x) {\n    if (x < 0) {\n        cout << '-';\n        x = -x;\n    }\n    if (x > 9) print(x / 10);\n    cout << (char)(x % 10 + '0');\n}\n```\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nvoid read(__int128 &x) {\n    string s;\n    cin >> s;\n    x = 0;\n    for (char c : s) {\n        x = x * 10 + (c - '0');\n    }\n}\n\nvoid print(__int128 x) {\n    if (x < 0) {\n        cout << '-';\n        x = -x;\n    }\n    if (x > 9) print(x / 10);\n    cout << (char)(x % 10 + '0');\n}\n\n__int128_t calc(__int128_t m,__int128_t k){\n\t__int128_t ans = 1;\n\twhile(k > 0){\n\t\tif(k & 1){\n\t\t\tans *= m;\n\t\t}\n\t\tm *= m;\n\t\tk>>=1;\n\t}\n\treturn ans;\n}\n\n__int128_t solve(__int128_t n,__int128_t k){\n\tif(k==1) return n;\n\tif(k>60) return 1;\n\t__int128_t r = pow(n,1.0/k)+1;\n\t__int128_t l = 1;\n\t__int128_t bestm = 1;\n\t__int128_t mindiff = n -1;\n\twhile(l <= r){\n\t\t__int128_t mid = (r - l)/2 + l;\n\t\t__int128_t minpow = calc((r - l)/2 + l ,k);\n\n\t\tif(minpow <=n){\n\t\t\t__int128_t diff = n - minpow;\n\t\t\tif(diff < mindiff || (diff == mindiff && mid < bestm)){\n\t\t\t\tmindiff = diff;\n\t\t\t\tbestm = mid;\n\t\t\t}\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse{\n\t\t\t__int128_t diff = minpow - n;\n\t\t\tif(diff < mindiff || (diff == mindiff && mid < bestm)){\n\t\t\t\tmindiff = diff;\n\t\t\t\tbestm = mid;\n\t\t\t}\n\t\t\tr = mid - 1;\n\t\t}\n\n\t}\n\treturn bestm;\n\n}\n\nint main(){\n\tstd::ios::sync_with_stdio(false);\n\tstd::cin.tie(0);\n\tint t;\n\tcin>>t;\n\twhile(t--){\n\t\t__int128_t n,k;\n\t\tread(n);\n\t\tread(k);\n\t\tprint(solve(n,k));\n\t\tcout<<endl;\n\t}\n\n\treturn 0;\n}\n\n\n```\n\n# F同位序列\n## 题目描述\n定义 f(x) 为 x 在二进制表示下的 1 的个数。  \n例如 f(7)=3，f(8)=1，f(9)=2。  \n定义 g(x) 为 第一个比 x 大的数字 y ，使得 f(x)=f(y)。\n例如 g(1)=2，g(2)=4，g(3)=5。 \n给你一个长度为 n 的数组 a ，第 i 个元素为 $a_i$。  \n我们希望从数组 a中挑选出一些元素，构造一个长度为 m 的同位序列 b 。  \n同位序列 满足如下条件：  \n对于所有的$j∈[2,m]$，都有$b_j=g(b_{j-1})$ 。  \n当然，同位序列越长越好，请你最大化其长度 m ，然后输出 m 和对应的同位序列。  如果有多解，输出任意一个即可。\n## 思路\n题目要求从给定的一个数组中，找到最大的同为序列长度m,即求m的最大值\n有点像LIS，可以想到dp做法\n我们先看如何确定g(x)\n例如: 14的二进制为$1110$，$g(14)=19$,19的二进制为$00010011$,我们可以观察到，将第一次连续出现的1中的第一个1向高位移一位，剩余连续的1移到最低位，与`next_permutation`算法即可\n\n状态转移：\n- 如果当前元素x的g(x)在x之前的数组当中，那么就接在其序列\n- 如果不在，就要新建一个序列\n## 代码\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nvoid solve(){\n    const int M = 32;\n    int n;\n    cin>>n;\n    map<int,int> g;//g[i]\n    vector<int> a(n);\n    for(auto &x : a){//求g(i)\n        cin>>x;\n        vector<int> bit(M);//x拆为二进制\n        for(int j = 0;j<M;j++) if(x>>j & 1) bit[M-j-1]=1;//化x为二进制\n        next_permutation(bit.begin(),bit.end());\n        for(int j = 0;j<M;j++) if(bit[M-j-1]) g[x]|= 1 << j;\n    }\n    set<int> ans;\n    sort(a.rbegin(),a.rend());//从大到小\n    map<int,int> mp;//相当于dp\n    int max = 0,id = 0;\n\n    for(auto x : a){\n        if(mp.contains(g[x])) mp[x] = mp[g[x]] + 1;//如果以前序列中已经出现g[x],长度+1\n        else mp[x] = 1;//新建一个序列\n        if(mp[x] > max) max = mp[x],id = x;  //id是最长序列的首元素 \n    }\n\n    ans.clear();\n    ans.insert(id);\n    while(mp.contains(g[id])){\n        id = g[id];\n        ans.insert(id);\n    }\n\n    cout<<ans.size()<<endl;\n    for(auto x : ans) cout<<x<<\" \";\n}\nint main() {\n    solve();\n    return 0;\n}\n```","src/content/blog/补题记录/牛客周赛Round76总结补题.md","8085d38c7469dae8",{html:293,metadata:294},"<h1 id=\"c-小红的gcd\">C 小红的gcd<a class=\"anchor\" href=\"#c-小红的gcd\">#</a></h1>\n<h2 id=\"题目描述\">题目描述<a class=\"anchor\" href=\"#题目描述\">#</a></h2>\n<p>小红有一个长度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>的数组，她希望数组元素之和越少越好。<br>\n她可以进行<strong>任意次</strong>操作，每次选择数组中的两个元素<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7167em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> ，令 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><msub><mi>a</mi><mi>j</mi></msub><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>j</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">a_i = a_j = gcd(a_i,a_j)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7167em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 。  所有操作结束后，请你输出<strong>最小</strong>的数组元素之和。</p>\n<h2 id=\"思路\">思路<a class=\"anchor\" href=\"#思路\">#</a></h2>\n<p>找到数组所有元素共有的gcd，对数组元素依次对总gcd取gcd即可，最后就是数组的总和就是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mo>=</mo><mi>n</mi><mo>∗</mo><mi>g</mi><mi>c</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">ans=n*gcd</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">an</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span></span></span></span></p>\n<h1 id=\"d-奇偶调整题假了\">D 奇偶调整(题假了)<a class=\"anchor\" href=\"#d-奇偶调整题假了\">#</a></h1>\n<h2 id=\"题目描述-1\">题目描述<a class=\"anchor\" href=\"#题目描述-1\">#</a></h2>\n<p>UPD：<strong>本题假了</strong>，hack数据如下：<br>\n2 2 1\n11 9<br>\n正确答案应该为 13 ，而不是 14 。</p>\n<p>小红有一个长度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 的数组 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> ，第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 个元素为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>​ 。\n小红可以执行两种操作，操作内容如下：<br>\n1.选择一个偶数元素 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> ，令 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><msub><mi>a</mi><mi>i</mi></msub><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">a_i=a_i/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/2</span></span></span></span>。<br>\n2.选择一个奇数元素 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，令 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><msub><mi>a</mi><mi>i</mi></msub><mo>⊕</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a_i=a_i⊕1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 。<br>\n其中，操作 111 最多执行 mmm 次，操作 222 最多执行 kkk 次。小红想最小化数组元素之和，请你输出这个值。<br>\n⊕ 代表按位异或。</p>\n<h2 id=\"思路-1\">思路<a class=\"anchor\" href=\"#思路-1\">#</a></h2>\n<h3 id=\"补充\">补充<a class=\"anchor\" href=\"#补充\">#</a></h3>\n<p>对<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>与1取位异或，奇数取完相当于减一，偶数取完加一</p>\n<h3 id=\"贪心解答假了\">贪心解答（假了）<a class=\"anchor\" href=\"#贪心解答假了\">#</a></h3>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">#include</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> &#x3C;bits/stdc++.h></span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">using</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> namespace</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tcin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> m,k;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tcin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">m</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">k;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tpriority_queue</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;long</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> q;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tcin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tq.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">push</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tlong</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> long</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ans </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\twhile</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">!</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">q.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">empty</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">()){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\tauto</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> u </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> q.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">top</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tq.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">pop</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">!</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">u)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">continue</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(u</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(k</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\tu</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">--</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\tk</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">--</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\tq.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">push</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(u);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\telse</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\tans </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> u;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\telse</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(u </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 2</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> ==</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(m){</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\tu </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\tm</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">--</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\tq.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">push</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(u);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\telse</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\tans </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> u;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tcout</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">ans</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">endl;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\treturn</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"#include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tint n;\n\tcin>>n;\n\tint m,k;\n\tcin>>m>>k;\n\tpriority_queue<long long> q;\n\tfor(int i = 1;i<=n;i++){\n\t\tint x;\n\t\tcin>>x;\n\t\tq.push(x);\n\t}\n\tlong long ans = 0;\n\twhile(!q.empty()){\n\t\tauto u = q.top();\n\t\tq.pop();\n\t\tif(!u)continue;\n\t\tif(u&#x26;1){\n\t\t\tif(k>=1){\n\t\t\t\tu--;\n\t\t\t\tk--;\n\t\t\t\tq.push(u);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tans += u;\n\t\t\t}\n\t\t}\n\t\telse if(u % 2 == 0){\n\t\t\tif(m){\n\t\t\t\tu /= 2;\n\t\t\t\tm--;\n\t\t\t\tq.push(u);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tans += u;\n\t\t\t}\n\t\t}\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<p>关键在<strong>优先队列(priority_queue)，顶部是最大的数</strong>，最开始还在傻傻地写vector,然后每次操作完成之后排序。。。。<strong>注意大小，开Long long</strong></p>\n<h1 id=\"e-幂次进近幂次进近\">E 幂次进近<a href=\"https://ac.nowcoder.com/acm/contest/99990/E\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">幂次进近<span> ↗</span></a><a class=\"anchor\" href=\"#e-幂次进近幂次进近\">#</a></h1>\n<h2 id=\"题目描述-2\">题目描述<a class=\"anchor\" href=\"#题目描述-2\">#</a></h2>\n<p>给定 t 次询问，每次询问给出两个正整数 n 和 k 。<br>\n请你找到最小的<strong>正整数</strong> m ，使得 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><msup><mi>m</mi><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">n-m^k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span> 的<strong>绝对值</strong>最小。</p>\n<h2 id=\"思路-2\">思路<a class=\"anchor\" href=\"#思路-2\">#</a></h2>\n<p>比赛时得了180(200)，有两个点没有过。注意需要用__int128_（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>127</mn></msup><mo>−</mo><mn>1</mn><mtext>约等于</mtext><msup><mn>10</mn><mn>38</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{127}-1 约等于{10}^{38}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">127</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8484em;\"></span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">约等于</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">10</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8484em;\"><span style=\"top:-3.0973em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">38</span></span></span></span></span></span></span></span></span></span></span></span>），二分法逼近m,使用快速幂求<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>m</mi><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">m^k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span> ，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>60</mn></msup><mo>≈</mo><mn>1.1529</mn><mo>×</mo><msup><mn>10</mn><mn>18</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{60}≈1.1529×10^{18}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">60</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1.1529</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">18</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//__int128_读入写入模板</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">void</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> read</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">__int128</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x26;</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    string s;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    cin </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> s;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">char</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> c : s) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 10</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> +</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (c </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> '0'</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">void</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> print</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">__int128</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        cout </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> '-'</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> -</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">></span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 9</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">print</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 10</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    cout </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">char</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)(x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 10</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> +</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> '0'</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"//__int128_读入写入模板\nvoid read(__int128 &#x26;x) {\n    string s;\n    cin >> s;\n    x = 0;\n    for (char c : s) {\n        x = x * 10 + (c - &#x27;0&#x27;);\n    }\n}\n\nvoid print(__int128 x) {\n    if (x < 0) {\n        cout << &#x27;-&#x27;;\n        x = -x;\n    }\n    if (x > 9) print(x / 10);\n    cout << (char)(x % 10 + &#x27;0&#x27;);\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">#include</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> &#x3C;bits/stdc++.h></span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">using</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> namespace</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">void</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> read</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">__int128</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x26;</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    string s;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    cin </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> s;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">char</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> c : s) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 10</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> +</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (c </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> '0'</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">void</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> print</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">__int128</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        cout </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> '-'</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> -</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">></span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 9</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">print</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 10</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    cout </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">char</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)(x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 10</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> +</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> '0'</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">__int128_t</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> calc</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">__int128_t</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> m</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">__int128_t</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> k</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">\t__int128_t</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ans </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\twhile</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(k </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">></span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(k </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\tans </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> m;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tm </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> m;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tk</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>>=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\treturn</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ans;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">__int128_t</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> solve</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">__int128_t</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> n</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">__int128_t</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> k</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(k</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">return</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(k</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">></span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">60</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">return</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">\t__int128_t</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> r </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> pow</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(n,</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1.0</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">k)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">\t__int128_t</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> l </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">\t__int128_t</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> bestm </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">\t__int128_t</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mindiff </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\twhile</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(l </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> r){</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">\t\t__int128_t</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mid </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (r </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> l)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> +</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> l;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">\t\t__int128_t</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> minpow </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> calc</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">((r </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> l)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> +</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> l ,k);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(minpow </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n){</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">\t\t\t__int128_t</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> diff </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> minpow;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(diff </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mindiff </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">||</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (diff </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mindiff </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mid </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> bestm)){</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\tmindiff </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> diff;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\tbestm </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mid;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\tl </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mid </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\telse</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">\t\t\t__int128_t</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> diff </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> minpow </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(diff </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mindiff </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">||</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (diff </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mindiff </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mid </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> bestm)){</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\tmindiff </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> diff;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\tbestm </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mid;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\tr </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mid </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\treturn</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> bestm;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(){</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tstd</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">ios</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">sync_with_stdio</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">false</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tstd</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::cin.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">tie</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> t;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tcin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">t;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\twhile</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(t</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">--</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">\t\t__int128_t</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n,k;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\t\tread</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(n);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\t\tread</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(k);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\t\tprint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">solve</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(n,k));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tcout</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">endl;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\treturn</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"#include <bits/stdc++.h>\nusing namespace std;\n\nvoid read(__int128 &#x26;x) {\n    string s;\n    cin >> s;\n    x = 0;\n    for (char c : s) {\n        x = x * 10 + (c - &#x27;0&#x27;);\n    }\n}\n\nvoid print(__int128 x) {\n    if (x < 0) {\n        cout << &#x27;-&#x27;;\n        x = -x;\n    }\n    if (x > 9) print(x / 10);\n    cout << (char)(x % 10 + &#x27;0&#x27;);\n}\n\n__int128_t calc(__int128_t m,__int128_t k){\n\t__int128_t ans = 1;\n\twhile(k > 0){\n\t\tif(k &#x26; 1){\n\t\t\tans *= m;\n\t\t}\n\t\tm *= m;\n\t\tk>>=1;\n\t}\n\treturn ans;\n}\n\n__int128_t solve(__int128_t n,__int128_t k){\n\tif(k==1) return n;\n\tif(k>60) return 1;\n\t__int128_t r = pow(n,1.0/k)+1;\n\t__int128_t l = 1;\n\t__int128_t bestm = 1;\n\t__int128_t mindiff = n -1;\n\twhile(l <= r){\n\t\t__int128_t mid = (r - l)/2 + l;\n\t\t__int128_t minpow = calc((r - l)/2 + l ,k);\n\n\t\tif(minpow <=n){\n\t\t\t__int128_t diff = n - minpow;\n\t\t\tif(diff < mindiff || (diff == mindiff &#x26;&#x26; mid < bestm)){\n\t\t\t\tmindiff = diff;\n\t\t\t\tbestm = mid;\n\t\t\t}\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse{\n\t\t\t__int128_t diff = minpow - n;\n\t\t\tif(diff < mindiff || (diff == mindiff &#x26;&#x26; mid < bestm)){\n\t\t\t\tmindiff = diff;\n\t\t\t\tbestm = mid;\n\t\t\t}\n\t\t\tr = mid - 1;\n\t\t}\n\n\t}\n\treturn bestm;\n\n}\n\nint main(){\n\tstd::ios::sync_with_stdio(false);\n\tstd::cin.tie(0);\n\tint t;\n\tcin>>t;\n\twhile(t--){\n\t\t__int128_t n,k;\n\t\tread(n);\n\t\tread(k);\n\t\tprint(solve(n,k));\n\t\tcout<<endl;\n\t}\n\n\treturn 0;\n}\n\n\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<h1 id=\"f同位序列\">F同位序列<a class=\"anchor\" href=\"#f同位序列\">#</a></h1>\n<h2 id=\"题目描述-3\">题目描述<a class=\"anchor\" href=\"#题目描述-3\">#</a></h2>\n<p>定义 f(x) 为 x 在二进制表示下的 1 的个数。<br>\n例如 f(7)=3，f(8)=1，f(9)=2。<br>\n定义 g(x) 为 第一个比 x 大的数字 y ，使得 f(x)=f(y)。\n例如 g(1)=2，g(2)=4，g(3)=5。\n给你一个长度为 n 的数组 a ，第 i 个元素为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>。<br>\n我们希望从数组 a中挑选出一些元素，构造一个长度为 m 的同位序列 b 。<br>\n同位序列 满足如下条件：<br>\n对于所有的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi><mo>∈</mo><mo stretchy=\"false\">[</mo><mn>2</mn><mo separator=\"true\">,</mo><mi>m</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">j∈[2,m]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">]</span></span></span></span>，都有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>b</mi><mi>j</mi></msub><mo>=</mo><mi>g</mi><mo stretchy=\"false\">(</mo><msub><mi>b</mi><mrow><mi>j</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">b_j=g(b_{j-1})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9805em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 。<br>\n当然，同位序列越长越好，请你最大化其长度 m ，然后输出 m 和对应的同位序列。  如果有多解，输出任意一个即可。</p>\n<h2 id=\"思路-3\">思路<a class=\"anchor\" href=\"#思路-3\">#</a></h2>\n<p>题目要求从给定的一个数组中，找到最大的同为序列长度m,即求m的最大值\n有点像LIS，可以想到dp做法\n我们先看如何确定g(x)\n例如: 14的二进制为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1110</mn></mrow><annotation encoding=\"application/x-tex\">1110</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1110</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo stretchy=\"false\">(</mo><mn>14</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>19</mn></mrow><annotation encoding=\"application/x-tex\">g(14)=19</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord\">14</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">19</span></span></span></span>,19的二进制为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>00010011</mn></mrow><annotation encoding=\"application/x-tex\">00010011</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">00010011</span></span></span></span>,我们可以观察到，将第一次连续出现的1中的第一个1向高位移一位，剩余连续的1移到最低位，与<code>next_permutation</code>算法即可</p>\n<p>状态转移：</p>\n<ul>\n<li>如果当前元素x的g(x)在x之前的数组当中，那么就接在其序列</li>\n<li>如果不在，就要新建一个序列</li>\n</ul>\n<h2 id=\"代码\">代码<a class=\"anchor\" href=\"#代码\">#</a></h2>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">#include</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> &#x3C;bits/stdc++.h></span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">using</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> namespace</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">void</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> solve</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    const</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> M </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 32</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    cin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    map</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> g;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//g[i]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    vector</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;int></span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> a</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(n);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">auto</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x : a){</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//求g(i)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        cin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        vector</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;int></span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> bit</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(M);</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//x拆为二进制</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> j </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;j</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">M;j</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">j </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) bit[M</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">j</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//化x为二进制</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">        next_permutation</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(bit.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">begin</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(),bit.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">end</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">());</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> j </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;j</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">M;j</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(bit[M</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">j</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">]) g[x]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">|=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> j;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    set</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;int></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ans;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    sort</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(a.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">rbegin</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(),a.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">rend</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">());</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//从大到小</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    map</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mp;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//相当于dp</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> max </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,id </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">auto</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x : a){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(mp.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">contains</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(g[x])) mp[x] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mp[g[x]] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//如果以前序列中已经出现g[x],长度+1</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        else</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mp[x] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//新建一个序列</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(mp[x] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> max) max </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mp[x],id </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">  //id是最长序列的首元素 </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    ans.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">clear</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    ans.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">insert</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(id);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    while</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(mp.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">contains</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(g[id])){</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        id </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> g[id];</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ans.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">insert</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(id);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    cout</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">ans.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">size</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">()</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">endl;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">auto</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x : ans) cout</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\" \"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    solve</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    return</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"#include <bits/stdc++.h>\nusing namespace std;\n\nvoid solve(){\n    const int M = 32;\n    int n;\n    cin>>n;\n    map<int,int> g;//g[i]\n    vector<int> a(n);\n    for(auto &#x26;x : a){//求g(i)\n        cin>>x;\n        vector<int> bit(M);//x拆为二进制\n        for(int j = 0;j<M;j++) if(x>>j &#x26; 1) bit[M-j-1]=1;//化x为二进制\n        next_permutation(bit.begin(),bit.end());\n        for(int j = 0;j<M;j++) if(bit[M-j-1]) g[x]|= 1 << j;\n    }\n    set<int> ans;\n    sort(a.rbegin(),a.rend());//从大到小\n    map<int,int> mp;//相当于dp\n    int max = 0,id = 0;\n\n    for(auto x : a){\n        if(mp.contains(g[x])) mp[x] = mp[g[x]] + 1;//如果以前序列中已经出现g[x],长度+1\n        else mp[x] = 1;//新建一个序列\n        if(mp[x] > max) max = mp[x],id = x;  //id是最长序列的首元素 \n    }\n\n    ans.clear();\n    ans.insert(id);\n    while(mp.contains(g[id])){\n        id = g[id];\n        ans.insert(id);\n    }\n\n    cout<<ans.size()<<endl;\n    for(auto x : ans) cout<<x<<&#x22; &#x22;;\n}\nint main() {\n    solve();\n    return 0;\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>",{headings:295,localImagePaths:324,remoteImagePaths:325,frontmatter:326,imagePaths:331},[296,299,300,301,304,305,306,308,311,314,316,317,320,322,323],{depth:133,slug:297,text:298},"c-小红的gcd","C 小红的gcd",{depth:32,slug:210,text:210},{depth:32,slug:137,text:137},{depth:133,slug:302,text:303},"d-奇偶调整题假了","D 奇偶调整(题假了)",{depth:32,slug:216,text:210},{depth:32,slug:144,text:137},{depth:39,slug:307,text:307},"补充",{depth:39,slug:309,text:310},"贪心解答假了","贪心解答（假了）",{depth:133,slug:312,text:313},"e-幂次进近幂次进近","E 幂次进近幂次进近",{depth:32,slug:315,text:210},"题目描述-2",{depth:32,slug:153,text:137},{depth:133,slug:318,text:319},"f同位序列","F同位序列",{depth:32,slug:321,text:210},"题目描述-3",{depth:32,slug:273,text:137},{depth:32,slug:146,text:146},[],[],{title:285,publishDate:327,updatedDate:327,description:285,tags:328,language:21,minutesRead:329,words:330},"2025-01-13",[123,198],"4 min read",644,[],"补题记录/牛客周赛round80",{id:332,data:334,body:339,filePath:340,digest:341,rendered:342},{title:335,description:335,publishDate:336,updatedDate:337,tags:338,language:21,draft:22,comment:23},"牛客周赛Round80补题",["Date","2025-02-11T00:00:00.000Z"],["Date","2025-02-11T00:00:00.000Z"],[123,198],"# D题[[D-举手赢棋hard_牛客周赛 Round 80](https://ac.nowcoder.com/acm/contest/101196/D)]()\n\n## 题意\n字符串s，0表示失利，1表示胜利，任意时刻要满足胜场大于等于负场，有两次机会可以强行获得比赛胜利，恰好两次举手，求方案数\n## 代码\n```cpp\n\tint n;\n\tll mn = 1e9;\n\tstring s;\n\tcin>>n>>s;\n\ts = \" \"+s;\n\tll a[n+1],c0[n+1];\n\tmemset(a,0,sizeof a);\n\tmemset(c0,0,sizeof c0);\n\tfor(int i =1;i<=n;i++)\n\t{\n\t\ta[i] = a[i-1];\n\t\tif(s[i]=='1') a[i]++;\n\t\telse a[i]--;\n\t\tc0[i] = c0[i-1] + (s[i]=='0');\n\t\tmn = min(mn,a[i]);\n\t}\n\tif(mn<-4)\n\t{\n\t\tcout<<0<<endl;\n\t\treturn 0;\n\t}\n\tint pos1 = -1;\n\tfor(int i =1;i<=n;i++)\n\t{\n\t\tif(a[i]<0)\n\t\t{\n\t\t\tpos1 = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(pos1==-1)\n\t{\n\t\tcout<<n*(n-1)/2<<endl;\n\t\treturn 0;\n\t}\n\tint pos2 = -1;\n\tfor(int i =pos1;i<=n;i++)\n\t{\n\t\ta[i]+=2;\n\t\tif(a[i]<0 && pos2==-1)\n\t\t{\n\t\t\tpos2 = i;\n\t\t}\n\t}\n\tif(pos2==-1)\n\t{\n\t\tll ans = 0;\n\t\tfor(int i =1;i<=pos1;i++)\n\t\t{\n\t\t\tif(s[i]=='0')\n\t\t\t{\n\t\t\t\tans+=(n-i) + i-c0[i];\n\t\t\t}\n\t\t}\n\t\tcout<<ans<<endl;\n\t\treturn 0;\n\t}\n\tll ans = 0;\n\tfor(int i = 1;i<=pos1;i++)\n\t{\n\t\tif(s[i]=='0')\n\t\t{\n\t\t\tans+= (c0[pos2]-c0[i]);\n\t\t}\n\t}\n\tcout<<ans<<endl;\n```\n\n## 思路\n计算10字串1-0的个数差$a[i]$，以及$c[i]$表示i左侧（包含）的0的个数\n1.$min(a[i])<-4$ 即使举手两次也无法合法\n2.如果所有的前缀和均大于等于0，可以任意选2个\n3.$pos1$ 为第一个$a[i]<0$ 的下标，一定至少要在、$[1,pos1]$ 中间选一个0,$[pos1,n] a[i]$ 加上2,其后所有位置均合法，第二个位置任意选择\n4.pos1操作后仍然不合法,pos2为pos1后$a[pos1]<0$ ，$[1,pos1]$ 选1个0，第二个位置也必须要选择一个0并且要选pos2之前的0。第一个0在i处，则第二个0在$[i+1,pos2]$ 区间内\n\n# E题\n## 坑点\n注意一个黑子可能可以吃掉多个白色连通块，此时ans应该累加而不是取max\n能用bfs就用bfs，dfs传参复杂容易出错\n## 代码\n```cpp\nint n;\ncin>>n;\nfor(int i = 1;i<=n;i++)\n\tfor(int j = 1;j<=n;j++)\n\t{\n\t\tcin>>mp[i][j];\n\t}\n\tfor(int i =1;i<=n;i++)\n\t\tfor(int j = 1;j<=n;j++)\n\t\t{\n\t\t\tif(vis[i][j]) continue;\n\t\t\tif(mp[i][j]=='.'||mp[i][j]=='#') continue;\n\t\t\tqueue<pair<ll,ll>> q;\n\t\t\tq.emplace(i,j);\n\t\t\tset<pair<ll,ll>> st;\n\t\t\tint cnt = 0;\n\t\t\twhile(q.size())\n\t\t\t{\n\t\t\t\tauto [x,y] = q.front();\n\t\t\t\tq.pop();\n\t\t\t\tif(vis[x][y]) continue;\n\t\t\t\tvis[x][y] = true;\n\t\t\t\tcnt++;\n\t\t\t\tfor(int k =0;k<4;k++)\n\t\t\t\t{\n\t\t\t\t\tint xx = x + dx[k],yy = y + dy[k];\n\t\t\t\t\tif(xx<=0 || xx>n || yy<=0 || yy>n || mp[xx][yy]=='#')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif(mp[xx][yy]=='.')\n\t\t\t\t\t{\n\t\t\t\t\t\tst.emplace(xx,yy);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tq.emplace(xx,yy);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(st.size()==1)\n\t\t\t{\n\t\t\t\tauto [x,y] = *st.begin();\n\t\t\t\tans[x][y] += cnt;\n\t\t\t}\n\n\t\t}\n\tll res = 0;\n\tfor(int i =1;i<=n;i++)\n\t\tfor(int j = 1;j<=n;j++)\n\t\t{\n\t\t\tres = max(res,ans[i][j]);\n\t\t}\n\tcout<<res<<endl;\n```\n\n# F题\n## 题意\n在长为$2n$的数组中两两配对，要求配对绝对值之和为k，求组合方式\n## 思路\n将数组分为两组，一组和为A，一组和为B，有A+B = $2n(1+2n)/2=n(1+2n)$\n又有B-A=k ，联立有$2B=n(1+2n)+k=2n^2+n+k,B=n^2+(n+k)/2$\n则n和k一定同奇偶，可以排除一种情况\n接下来将k分解为奇数，因为当匹配的一对数是不同奇偶例如1,4时中间长度为偶数，可以两两匹配，间隔为1。\n## 代码\n```cpp\nvoid solve(){\n\tint n,k;\n\tcin>>n>>k;\n\tif(k<n || k > n * n || (n%2)!=k%2)\n\t{\n\t\tcout<<-1<<endl;\n\t\treturn ;\n\t}\n\tint s = 2 * n -1;\n\tvector<int> v;\n\tfor(int i = 1;i<=n;i++)//分解奇数\n\t{\n\t\twhile(s+(n-i)>k)\n\t\t\ts-=2;\n\t\tv.push_back(s);\n\t\tk -= s;\n\t\tif(s > 2)\n\t\t{\n\t\t\ts-=2;\n\t\t}\n\t}\n\tvector<int> a;\n\tvector<int> b;\n\tvector<int> vis(2*n+1);//记录\n\tint now = 2 * n;\n\tfor(auto &x : v)\n\t{\n\t\twhile(vis[now]) now--;\n\t\ta.emplace_back(now);\n\t\tb.emplace_back(now-x);\n\t\tvis[now] = 1;\n\t\tvis[now-x] =1;\n\t}\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tcout<<a[i]<<\" \"<<b[i]<<endl;\n\t}\n\n}\n```\n\n# G题[[G-不公平对局_牛客周赛 Round 80](https://ac.nowcoder.com/acm/contest/101196/G)]()\n\n## 题目大意\n小红和小紫正在对弈。在围棋规则中，每吃掉对方的一枚棋子，就需要将这枚棋子放入棋盖中。然而，棋盖空间不大，她们任何一方吃子数量达到 x 就输了。  \n当然，我们不需要考虑具体的对弈局面，模型简化如下，每个回合将会依次执行以下两步：  \n- 小红有$p_1$的概率吃掉对方一枚棋子；  \n- 小紫有$p_2$的概率吃掉对方一枚棋子。  \n谁吃子数量达到 x 就输了。小红执黑先手，她想知道自己最终获胜的概率是多少？你需要将答案对 $10^9+7$取模后输出。\n## 思路\n概率dp+逆元\n$dp[i,j]$表示小红落子i个，小紫落子j个\n递推式$dp[i,j]=(p1*p2*dp[i+1][j+1]+p1*(1-p2)*dp[i+1][j]+(1-p1)*p2*dp[i][j+1])/(1-(1-p1)*(1-p2)$\n## 代码\n```cpp\nint x,a1,b1,a2,b2;\n\tcin>>x>>a1>>b1>>a2>>b2;\n\tint p1 = a1 * ksm(b1,mod-2)%mod;\n\tint p2 = a2 * ksm(b2,mod-2)%mod;\n\tint P1 = p1 * p2 %mod;\n\tint P2 = p1 * (mod+1-p2)%mod;\n\tint P3 = (mod+1-p1) * p2 % mod;\n\tint P4 = (mod+1-p1) * (mod+1-p2)%mod;\n\tint P5 = (mod+1 -P4) %mod;\n\tint inv = ksm(P5,mod-2);\n\tint dp[1010][1010];\n\tfor(int i =0;i<=x-1;i++)\n\t{\n\t\tdp[x][i] = 0;\n\t\tdp[i][x] = 1;\n\t}\n\t\n\tfor(int i = x-1;i>=0;i--)\n\t\tfor(int j = x-1;j>=0;j--)\n\t\t{\n\t\t\tdp[i][j] = inv * ((P1*dp[i+1][j+1]%mod + P2 * dp[i+1][j]%mod)%mod+P3*dp[i][j+1]%mod)%mod;\n            //cout<<dp[i][j]<<endl;\n\t\t}\n\tcout<<(dp[0][0]+mod)%mod<<endl;\n```","src/content/blog/补题记录/牛客周赛Round80.md","4ba446a80725dda2",{html:343,metadata:344},"<h1 id=\"d题d-举手赢棋hard_牛客周赛-round-80\">D题[<a href=\"https://ac.nowcoder.com/acm/contest/101196/D\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">D-举手赢棋hard_牛客周赛 Round 80<span> ↗</span></a>]()<a class=\"anchor\" href=\"#d题d-举手赢棋hard_牛客周赛-round-80\">#</a></h1>\n<h2 id=\"题意\">题意<a class=\"anchor\" href=\"#题意\">#</a></h2>\n<p>字符串s，0表示失利，1表示胜利，任意时刻要满足胜场大于等于负场，有两次机会可以强行获得比赛胜利，恰好两次举手，求方案数</p>\n<h2 id=\"代码\">代码<a class=\"anchor\" href=\"#代码\">#</a></h2>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tll mn </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">e</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">9</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tstring s;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tcin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">s;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\ts </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \" \"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">s;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tll a[n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">],c0[n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tmemset</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(a,</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,sizeof a);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tmemset</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(c0,</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,sizeof c0);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\ta[i] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a[i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(s[i]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">'1'</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) a[i]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\telse</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a[i]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">--</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tc0[i] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> c0[i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (s[i]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">'0'</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tmn </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> min</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(mn,a[i]);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(mn</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">4</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tcout</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">endl;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\treturn</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> pos1 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> -</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(a[i]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\tpos1 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\tbreak</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(pos1</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tcout</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">endl;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\treturn</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> pos2 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> -</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">pos1;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\ta[i]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(a[i]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x26;&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> pos2</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\tpos2 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(pos2</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tll ans </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">pos1;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(s[i]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">'0'</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\tans</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">i) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">c0[i];</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tcout</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">ans</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">endl;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\treturn</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tll ans </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">pos1;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(s[i]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">'0'</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\tans</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (c0[pos2]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">c0[i]);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tcout</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">ans</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">endl;</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"\tint n;\n\tll mn = 1e9;\n\tstring s;\n\tcin>>n>>s;\n\ts = &#x22; &#x22;+s;\n\tll a[n+1],c0[n+1];\n\tmemset(a,0,sizeof a);\n\tmemset(c0,0,sizeof c0);\n\tfor(int i =1;i<=n;i++)\n\t{\n\t\ta[i] = a[i-1];\n\t\tif(s[i]==&#x27;1&#x27;) a[i]++;\n\t\telse a[i]--;\n\t\tc0[i] = c0[i-1] + (s[i]==&#x27;0&#x27;);\n\t\tmn = min(mn,a[i]);\n\t}\n\tif(mn<-4)\n\t{\n\t\tcout<<0<<endl;\n\t\treturn 0;\n\t}\n\tint pos1 = -1;\n\tfor(int i =1;i<=n;i++)\n\t{\n\t\tif(a[i]<0)\n\t\t{\n\t\t\tpos1 = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(pos1==-1)\n\t{\n\t\tcout<<n*(n-1)/2<<endl;\n\t\treturn 0;\n\t}\n\tint pos2 = -1;\n\tfor(int i =pos1;i<=n;i++)\n\t{\n\t\ta[i]+=2;\n\t\tif(a[i]<0 &#x26;&#x26; pos2==-1)\n\t\t{\n\t\t\tpos2 = i;\n\t\t}\n\t}\n\tif(pos2==-1)\n\t{\n\t\tll ans = 0;\n\t\tfor(int i =1;i<=pos1;i++)\n\t\t{\n\t\t\tif(s[i]==&#x27;0&#x27;)\n\t\t\t{\n\t\t\t\tans+=(n-i) + i-c0[i];\n\t\t\t}\n\t\t}\n\t\tcout<<ans<<endl;\n\t\treturn 0;\n\t}\n\tll ans = 0;\n\tfor(int i = 1;i<=pos1;i++)\n\t{\n\t\tif(s[i]==&#x27;0&#x27;)\n\t\t{\n\t\t\tans+= (c0[pos2]-c0[i]);\n\t\t}\n\t}\n\tcout<<ans<<endl;\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<h2 id=\"思路\">思路<a class=\"anchor\" href=\"#思路\">#</a></h2>\n<p>计算10字串1-0的个数差<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>，以及<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">c[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>表示i左侧（包含）的0的个数\n1.<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mo>&#x3C;</mo><mo>−</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">min(a[i])&#x3C;-4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">min</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">])</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&#x3C;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">4</span></span></span></span> 即使举手两次也无法合法\n2.如果所有的前缀和均大于等于0，可以任意选2个\n3.<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>o</mi><mi>s</mi><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">pos1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">os</span><span class=\"mord\">1</span></span></span></span> 为第一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>&#x3C;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a[i]&#x3C;0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&#x3C;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> 的下标，一定至少要在、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>p</mi><mi>o</mi><mi>s</mi><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[1,pos1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">os</span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> 中间选一个0,<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>p</mi><mi>o</mi><mi>s</mi><mn>1</mn><mo separator=\"true\">,</mo><mi>n</mi><mo stretchy=\"false\">]</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[pos1,n] a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">os</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> 加上2,其后所有位置均合法，第二个位置任意选择\n4.pos1操作后仍然不合法,pos2为pos1后<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>p</mi><mi>o</mi><mi>s</mi><mn>1</mn><mo stretchy=\"false\">]</mo><mo>&#x3C;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a[pos1]&#x3C;0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">os</span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&#x3C;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> ，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>p</mi><mi>o</mi><mi>s</mi><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[1,pos1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">os</span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> 选1个0，第二个位置也必须要选择一个0并且要选pos2之前的0。第一个0在i处，则第二个0在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>p</mi><mi>o</mi><mi>s</mi><mn>2</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[i+1,pos2]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">os</span><span class=\"mord\">2</span><span class=\"mclose\">]</span></span></span></span> 区间内</p>\n<h1 id=\"e题\">E题<a class=\"anchor\" href=\"#e题\">#</a></h1>\n<h2 id=\"坑点\">坑点<a class=\"anchor\" href=\"#坑点\">#</a></h2>\n<p>注意一个黑子可能可以吃掉多个白色连通块，此时ans应该累加而不是取max\n能用bfs就用bfs，dfs传参复杂容易出错</p>\n<h2 id=\"代码-1\">代码<a class=\"anchor\" href=\"#代码-1\">#</a></h2>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">cin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> j </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;j</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;j</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tcin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">mp[i][j];</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> j </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;j</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;j</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(vis[i][j]) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">continue</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(mp[i][j]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">'.'</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">||</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">mp[i][j]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">'#'</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">continue</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\tqueue</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">pair</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">ll,ll</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> q;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\tq.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">emplace</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(i,j);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\tset</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">pair</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">ll,ll</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> st;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> cnt </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\twhile</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(q.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">size</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\t\tauto</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> [x,y] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> q.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">front</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\tq.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">pop</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(vis[x][y]) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">continue</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\tvis[x][y] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> true</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\tcnt</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\t\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> k </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;k</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">4</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;k</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\t{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\t\t\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> xx </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> dx[k],yy </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> y </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> dy[k];</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\t\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(xx</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> ||</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> xx</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">||</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> yy</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> ||</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> yy</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">||</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mp[xx][yy]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">'#'</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\t\t{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\t\t\t\tcontinue</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\t\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(mp[xx][yy]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">'.'</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\t\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\t\t\tst.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">emplace</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(xx,yy);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\t\t\t\tcontinue</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\t\tq.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">emplace</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(xx,yy);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(st.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">size</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">()</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\t\t\tauto</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> [x,y] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> *</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">st.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">begin</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t\tans[x][y] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> cnt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tll res </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> j </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;j</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;j</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\tres </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> max</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(res,ans[i][j]);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tcout</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">res</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">endl;</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"int n;\ncin>>n;\nfor(int i = 1;i<=n;i++)\n\tfor(int j = 1;j<=n;j++)\n\t{\n\t\tcin>>mp[i][j];\n\t}\n\tfor(int i =1;i<=n;i++)\n\t\tfor(int j = 1;j<=n;j++)\n\t\t{\n\t\t\tif(vis[i][j]) continue;\n\t\t\tif(mp[i][j]==&#x27;.&#x27;||mp[i][j]==&#x27;#&#x27;) continue;\n\t\t\tqueue<pair<ll,ll>> q;\n\t\t\tq.emplace(i,j);\n\t\t\tset<pair<ll,ll>> st;\n\t\t\tint cnt = 0;\n\t\t\twhile(q.size())\n\t\t\t{\n\t\t\t\tauto [x,y] = q.front();\n\t\t\t\tq.pop();\n\t\t\t\tif(vis[x][y]) continue;\n\t\t\t\tvis[x][y] = true;\n\t\t\t\tcnt++;\n\t\t\t\tfor(int k =0;k<4;k++)\n\t\t\t\t{\n\t\t\t\t\tint xx = x + dx[k],yy = y + dy[k];\n\t\t\t\t\tif(xx<=0 || xx>n || yy<=0 || yy>n || mp[xx][yy]==&#x27;#&#x27;)\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif(mp[xx][yy]==&#x27;.&#x27;)\n\t\t\t\t\t{\n\t\t\t\t\t\tst.emplace(xx,yy);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tq.emplace(xx,yy);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(st.size()==1)\n\t\t\t{\n\t\t\t\tauto [x,y] = *st.begin();\n\t\t\t\tans[x][y] += cnt;\n\t\t\t}\n\n\t\t}\n\tll res = 0;\n\tfor(int i =1;i<=n;i++)\n\t\tfor(int j = 1;j<=n;j++)\n\t\t{\n\t\t\tres = max(res,ans[i][j]);\n\t\t}\n\tcout<<res<<endl;\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<h1 id=\"f题\">F题<a class=\"anchor\" href=\"#f题\">#</a></h1>\n<h2 id=\"题意-1\">题意<a class=\"anchor\" href=\"#题意-1\">#</a></h2>\n<p>在长为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">2n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span></span></span></span>的数组中两两配对，要求配对绝对值之和为k，求组合方式</p>\n<h2 id=\"思路-1\">思路<a class=\"anchor\" href=\"#思路-1\">#</a></h2>\n<p>将数组分为两组，一组和为A，一组和为B，有A+B = <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>n</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>2</mn><mi>n</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo>=</mo><mi>n</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>2</mn><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">2n(1+2n)/2=n(1+2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mord\">/2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>\n又有B-A=k ，联立有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>B</mi><mo>=</mo><mi>n</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>2</mn><mi>n</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>k</mi><mo>=</mo><mn>2</mn><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo separator=\"true\">,</mo><mi>B</mi><mo>=</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2B=n(1+2n)+k=2n^2+n+k,B=n^2+(n+k)/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mord\">/2</span></span></span></span>\n则n和k一定同奇偶，可以排除一种情况\n接下来将k分解为奇数，因为当匹配的一对数是不同奇偶例如1,4时中间长度为偶数，可以两两匹配，间隔为1。</p>\n<h2 id=\"代码-2\">代码<a class=\"anchor\" href=\"#代码-2\">#</a></h2>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">void</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> solve</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n,k;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tcin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">k;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(k</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">||</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> k </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">||</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">!=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">k</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tcout</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">endl;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\treturn</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> s </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 2</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> *</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tvector</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;int></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> v;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//分解奇数</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\twhile</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(s</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">i)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">k)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\ts</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tv.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">push_back</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(s);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tk </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> s;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\tif</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(s </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">></span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\ts</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tvector</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;int></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tvector</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;int></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> b;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tvector</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;int></span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> vis</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//记录</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> now </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 2</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> *</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">auto</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x : v)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\twhile</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(vis[now]) now</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">--</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\ta.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">emplace_back</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(now);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tb.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">emplace_back</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(now</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tvis[now] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tvis[now</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tcout</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">a[i]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\" \"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">b[i]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">endl;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"void solve(){\n\tint n,k;\n\tcin>>n>>k;\n\tif(k<n || k > n * n || (n%2)!=k%2)\n\t{\n\t\tcout<<-1<<endl;\n\t\treturn ;\n\t}\n\tint s = 2 * n -1;\n\tvector<int> v;\n\tfor(int i = 1;i<=n;i++)//分解奇数\n\t{\n\t\twhile(s+(n-i)>k)\n\t\t\ts-=2;\n\t\tv.push_back(s);\n\t\tk -= s;\n\t\tif(s > 2)\n\t\t{\n\t\t\ts-=2;\n\t\t}\n\t}\n\tvector<int> a;\n\tvector<int> b;\n\tvector<int> vis(2*n+1);//记录\n\tint now = 2 * n;\n\tfor(auto &#x26;x : v)\n\t{\n\t\twhile(vis[now]) now--;\n\t\ta.emplace_back(now);\n\t\tb.emplace_back(now-x);\n\t\tvis[now] = 1;\n\t\tvis[now-x] =1;\n\t}\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tcout<<a[i]<<&#x22; &#x22;<<b[i]<<endl;\n\t}\n\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<h1 id=\"g题g-不公平对局_牛客周赛-round-80\">G题[<a href=\"https://ac.nowcoder.com/acm/contest/101196/G\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">G-不公平对局_牛客周赛 Round 80<span> ↗</span></a>]()<a class=\"anchor\" href=\"#g题g-不公平对局_牛客周赛-round-80\">#</a></h1>\n<h2 id=\"题目大意\">题目大意<a class=\"anchor\" href=\"#题目大意\">#</a></h2>\n<p>小红和小紫正在对弈。在围棋规则中，每吃掉对方的一枚棋子，就需要将这枚棋子放入棋盖中。然而，棋盖空间不大，她们任何一方吃子数量达到 x 就输了。<br>\n当然，我们不需要考虑具体的对弈局面，模型简化如下，每个回合将会依次执行以下两步：</p>\n<ul>\n<li>小红有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">p_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>的概率吃掉对方一枚棋子；</li>\n<li>小紫有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">p_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>的概率吃掉对方一枚棋子。<br>\n谁吃子数量达到 x 就输了。小红执黑先手，她想知道自己最终获胜的概率是多少？你需要将答案对 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>10</mn><mn>9</mn></msup><mo>+</mo><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">10^9+7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">7</span></span></span></span>取模后输出。</li>\n</ul>\n<h2 id=\"思路-2\">思路<a class=\"anchor\" href=\"#思路-2\">#</a></h2>\n<p>概率dp+逆元\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp[i,j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span>表示小红落子i个，小紫落子j个\n递推式<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>p</mi><mn>1</mn><mo>∗</mo><mi>p</mi><mn>2</mn><mo>∗</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>+</mo><mi>p</mi><mn>1</mn><mo>∗</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mn>2</mn><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mn>1</mn><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>p</mi><mn>2</mn><mo>∗</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mn>1</mn><mo stretchy=\"false\">)</mo><mo>∗</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dp[i,j]=(p1*p2*dp[i+1][j+1]+p1*(1-p2)*dp[i+1][j]+(1-p1)*p2*dp[i][j+1])/(1-(1-p1)*(1-p2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">])</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"代码-3\">代码<a class=\"anchor\" href=\"#代码-3\">#</a></h2>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x,a1,b1,a2,b2;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tcin</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">a1</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">b1</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">a2</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">b2;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p1 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a1 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ksm</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(b1,mod</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">mod;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p2 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a2 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ksm</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(b2,mod</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">mod;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> P1 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p1 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p2 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">mod;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> P2 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p1 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (mod</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">p2)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">mod;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> P3 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (mod</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">p1) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p2 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> mod;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> P4 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (mod</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">p1) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (mod</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">p2)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">mod;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> P5 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (mod</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> -</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">P4) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">mod;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> inv </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ksm</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(P5,mod</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tint</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> dp[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1010</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">][</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1010</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tdp[x][i] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\tdp[i][x] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">--</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">\t\tfor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> j </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;j</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;j</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">--</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t\tdp[i][j] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> inv </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((P1</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">dp[i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">][j</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">mod </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> P2 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> dp[i</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">][j]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">mod)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">mod</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">P3</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">dp[i][j</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">mod)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">mod;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">            //cout&#x3C;&#x3C;dp[i][j]&#x3C;&#x3C;endl;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tcout</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(dp[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">][</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">mod)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">%</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">mod</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">endl;</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"int x,a1,b1,a2,b2;\n\tcin>>x>>a1>>b1>>a2>>b2;\n\tint p1 = a1 * ksm(b1,mod-2)%mod;\n\tint p2 = a2 * ksm(b2,mod-2)%mod;\n\tint P1 = p1 * p2 %mod;\n\tint P2 = p1 * (mod+1-p2)%mod;\n\tint P3 = (mod+1-p1) * p2 % mod;\n\tint P4 = (mod+1-p1) * (mod+1-p2)%mod;\n\tint P5 = (mod+1 -P4) %mod;\n\tint inv = ksm(P5,mod-2);\n\tint dp[1010][1010];\n\tfor(int i =0;i<=x-1;i++)\n\t{\n\t\tdp[x][i] = 0;\n\t\tdp[i][x] = 1;\n\t}\n\t\n\tfor(int i = x-1;i>=0;i--)\n\t\tfor(int j = x-1;j>=0;j--)\n\t\t{\n\t\t\tdp[i][j] = inv * ((P1*dp[i+1][j+1]%mod + P2 * dp[i+1][j]%mod)%mod+P3*dp[i][j+1]%mod)%mod;\n            //cout<<dp[i][j]<<endl;\n\t\t}\n\tcout<<(dp[0][0]+mod)%mod<<endl;\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>",{headings:345,localImagePaths:373,remoteImagePaths:374,frontmatter:375,imagePaths:379},[346,349,351,352,353,356,358,359,362,364,365,366,369,370,371],{depth:133,slug:347,text:348},"d题d-举手赢棋hard_牛客周赛-round-80","D题[D-举手赢棋hard_牛客周赛 Round 80]()",{depth:32,slug:350,text:350},"题意",{depth:32,slug:146,text:146},{depth:32,slug:137,text:137},{depth:133,slug:354,text:355},"e题","E题",{depth:32,slug:357,text:357},"坑点",{depth:32,slug:155,text:146},{depth:133,slug:360,text:361},"f题","F题",{depth:32,slug:363,text:350},"题意-1",{depth:32,slug:144,text:137},{depth:32,slug:266,text:146},{depth:133,slug:367,text:368},"g题g-不公平对局_牛客周赛-round-80","G题[G-不公平对局_牛客周赛 Round 80]()",{depth:32,slug:142,text:142},{depth:32,slug:153,text:137},{depth:32,slug:372,text:146},"代码-3",[],[],{title:335,publishDate:376,updatedDate:376,description:335,tags:377,language:21,minutesRead:113,words:378},"2025-02-11",[123,198],526,[],"games101/games101-pa2",{id:380,data:382,body:389,filePath:390,assetImports:391,digest:393,rendered:394},{title:383,description:384,publishDate:385,updatedDate:386,tags:387,language:21,draft:22,comment:23},"GAMES101 作业2","GAMES101 作业2解析",["Date","2025-05-08T00:00:00.000Z"],["Date","2025-05-08T00:00:00.000Z"],[388],"图形学","## 一、作业要求\r\n\r\n1.实现三角形栅格化算法\r\n\r\n2.确定测试点是否在三角形内\r\n\r\n3.实现z-buffer算法\r\n\r\n4.super-sampling 2*2 采样减少锯齿感（提高）\r\n\r\n## 二、实现三角形栅格化算法\r\n\r\n首先算出bounding_box的大小和坐标位置\r\n\r\n```cpp\r\nint min_x = INT_MAX,min_y = INT_MAX,max_x = 0,max_y = 0;\r\n    min_x = std::min({v[0].x(),v[1].x(),v[2].x()});\r\n    max_x = std::max({v[0].x(),v[1].x(),v[2].x()});\r\n    min_y = std::min({v[0].y(),v[1].y(),v[2].y()});\r\n    max_y = std::max({v[0].y(),v[1].y(),v[2].y()});\r\n```\r\n\r\n## 三、测试点是否在三角形内\r\n\r\n```cpp\r\nstatic bool insideTriangle(int x, int y, const Vector3f* _v)\r\n{   \r\n    // TODO : Implement this function to check if the point (x, y) is inside the triangle represented by _v[0], _v[1], _v[2]\r\n    Vector2f a(_v[0].x()-x,_v[0].y()-y);\r\n    Vector2f b(_v[1].x()-x,_v[1].y()-y);\r\n    Vector2f c(_v[2].x()-x,_v[2].y()-y);\r\n\r\n    float cross1 = a.x() * b.y() - a.y() * b.x();\r\n    float cross2 = c.x() * a.y() - c.y() * a.x();\r\n    float cross3 = b.x() * c.y() - b.y() * c.x();\r\n\r\n    return (cross1>0 && cross2>0 && cross3>0 ) || (cross1<0 && cross2<0 && cross3<0);\r\n}\r\n```\r\n\r\n二维叉乘公式：$a\\times b = x_1y_2-x_2y_1$\r\n\r\n如果和三个点叉乘均同号，则在三角形内\r\n\r\n## 四、z-buffer算法\r\n\r\n接着坐标遍历bounding_box中所有的点，计算出每个点的深度，如果当前点靠前则更新颜色\r\n\r\n```cpp\r\nauto[alpha, beta, gamma] = computeBarycentric2D(x+step[k][0], y+step[k][1], t.v);\r\nfloat w_reciprocal = 1.0/(alpha / v[0].w() + beta / v[1].w() + gamma / v[2].w());\r\nfloat z_interpolated = alpha * v[0].z() / v[0].w() + beta * v[1].z() / v[1].w() + gamma * v[2].z() / v[2].w();\r\nz_interpolated *= w_reciprocal;\r\nif(depth_buf[getindex(x,y)] == std::numeric_limits<float>::infinity() || z_interpolated > depth_buf[getindex(x,y)]){\r\n    depth_buf[getindex(x,y)] = z_interpolated;\r\n    frame_buf[getsuperindex(x,y)] = t.getColor();\r\n    Eigen::Vector3f point(x*1.0,y*1.0,1.0);\r\n    set_pixel(point,color);\r\n}\r\n```\r\n\r\n## 五、Super_sampling\r\n\r\n要求我们使用4x4采样，即每个点需要维护四个depth和frame\r\n\r\n创建depth和frame\r\n\r\n```cpp\r\nstd::vector<float> super_depth_buf;\r\nstd::vector<Eigen::Vector3f> super_frame_buf;\r\n```\r\n\r\n获取坐标函数\r\n\r\n```cpp\r\nint rst::rasterizer::getsuperindex(int x,int y,int k){\r\n    return 4*get_index(x,y)+k;\r\n}\r\n```\r\n\r\n遍历bounding_box中的每个点\r\n\r\n```cpp\r\nfor(int k = 0;k<4;k++){\r\n    if(!insideTriangle(x+step[k][0],y+step[k][1],t.v)) continue;\r\n    //find interpolated depth value in this location\r\n    auto[alpha, beta, gamma] = computeBarycentric2D(x+step[k][0], y+step[k][1], t.v);\r\n    float w_reciprocal = 1.0/(alpha / v[0].w() + beta / v[1].w() + gamma / v[2].w());\r\n    float z_interpolated = alpha * v[0].z() / v[0].w() + beta * v[1].z() / v[1].w() + gamma * v[2].z() / v[2].w();\r\n     z_interpolated *= w_reciprocal;\r\n\r\n    if(super_depth_buf[getsuperindex(x,y,k)] == std::numeric_limits<float>::infinity() || z_interpolated > super_depth_buf[getsuperindex(x,y,k)]){\r\n         count++;\r\n         super_depth_buf[getsuperindex(x,y,k)] = z_interpolated;\r\n         super_frame_buf[getsuperindex(x,y,k)] = t.getColor();\r\n    }\r\n}\r\n```\r\n\r\n最后再遍历设定颜色，注意颜色要除以4\r\n\r\n```cpp\r\nfor(int x = min_x;x<=max_x;x++){\r\n        for(int y = min_y;y<=max_y;y++){\r\n            Vector3f color = (super_frame_buf[getsuperindex(x,y,0)]+super_frame_buf[getsuperindex(x,y,1)]+super_frame_buf[getsuperindex(x,y,2)]+\r\n                super_frame_buf[getsuperindex(x,y,3)])/4.0;\r\n            Eigen::Vector3f point(x*1.0,y*1.0,1.0);\r\n            set_pixel(point,color);\r\n        }\r\n    }\r\n```\r\n\r\n最终效果\r\n\r\n![1](./games101pa2-1.png)","src/content/blog/Games101/games101 pa2.md",[392],"./games101pa2-1.png","2e4ed4b3e641471d",{html:395,metadata:396},"<h2 id=\"一作业要求\">一、作业要求<a class=\"anchor\" href=\"#一作业要求\">#</a></h2>\n<p>1.实现三角形栅格化算法</p>\n<p>2.确定测试点是否在三角形内</p>\n<p>3.实现z-buffer算法</p>\n<p>4.super-sampling 2*2 采样减少锯齿感（提高）</p>\n<h2 id=\"二实现三角形栅格化算法\">二、实现三角形栅格化算法<a class=\"anchor\" href=\"#二实现三角形栅格化算法\">#</a></h2>\n<p>首先算出bounding_box的大小和坐标位置</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> min_x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> INT_MAX,min_y </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> INT_MAX,max_x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,max_y </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    min_x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">min</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">({v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(),v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(),v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">()});</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    max_x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">max</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">({v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(),v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(),v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">()});</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    min_y </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">min</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">({v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">y</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(),v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">y</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(),v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">y</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">()});</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    max_y </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">max</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">({v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">y</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(),v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">y</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(),v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">y</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">()});</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"int min_x = INT_MAX,min_y = INT_MAX,max_x = 0,max_y = 0;\r\n    min_x = std::min({v[0].x(),v[1].x(),v[2].x()});\r\n    max_x = std::max({v[0].x(),v[1].x(),v[2].x()});\r\n    min_y = std::min({v[0].y(),v[1].y(),v[2].y()});\r\n    max_y = std::max({v[0].y(),v[1].y(),v[2].y()});\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<h2 id=\"三测试点是否在三角形内\">三、测试点是否在三角形内<a class=\"anchor\" href=\"#三测试点是否在三角形内\">#</a></h2>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">static</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> bool</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> insideTriangle</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> y</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Vector3f</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> _v</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{   </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">    // TODO : Implement this function to check if the point (x, y) is inside the triangle represented by _v[0], _v[1], _v[2]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    Vector2f </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">a</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(_v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">()</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x,_v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">y</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">()</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">y);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    Vector2f </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">b</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(_v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">()</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x,_v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">y</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">()</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">y);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    Vector2f </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">c</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(_v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">()</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">x,_v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">y</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">()</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">y);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    float</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> cross1 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> b.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">y</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">y</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> b.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    float</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> cross2 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> c.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">y</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> c.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">y</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    float</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> cross3 </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> b.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> c.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">y</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">-</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> b.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">y</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> c.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    return</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (cross1</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">></span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x26;&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> cross2</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">></span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x26;&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> cross3</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">></span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">||</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (cross1</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x26;&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> cross2</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x26;&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> cross3</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"static bool insideTriangle(int x, int y, const Vector3f* _v)\r\n{   \r\n    // TODO : Implement this function to check if the point (x, y) is inside the triangle represented by _v[0], _v[1], _v[2]\r\n    Vector2f a(_v[0].x()-x,_v[0].y()-y);\r\n    Vector2f b(_v[1].x()-x,_v[1].y()-y);\r\n    Vector2f c(_v[2].x()-x,_v[2].y()-y);\r\n\r\n    float cross1 = a.x() * b.y() - a.y() * b.x();\r\n    float cross2 = c.x() * a.y() - c.y() * a.x();\r\n    float cross3 = b.x() * c.y() - b.y() * c.x();\r\n\r\n    return (cross1>0 &#x26;&#x26; cross2>0 &#x26;&#x26; cross3>0 ) || (cross1<0 &#x26;&#x26; cross2<0 &#x26;&#x26; cross3<0);\r\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<p>二维叉乘公式：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>×</mo><mi>b</mi><mo>=</mo><msub><mi>x</mi><mn>1</mn></msub><msub><mi>y</mi><mn>2</mn></msub><mo>−</mo><msub><mi>x</mi><mn>2</mn></msub><msub><mi>y</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">a\\times b = x_1y_2-x_2y_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p>如果和三个点叉乘均同号，则在三角形内</p>\n<h2 id=\"四z-buffer算法\">四、z-buffer算法<a class=\"anchor\" href=\"#四z-buffer算法\">#</a></h2>\n<p>接着坐标遍历bounding_box中所有的点，计算出每个点的深度，如果当前点靠前则更新颜色</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">auto</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">[alpha, beta, gamma] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> computeBarycentric2D</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">step[k][</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">], y</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">step[k][</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">], t.v);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">float</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> w_reciprocal </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1.0</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(alpha </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">w</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> beta </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">w</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> gamma </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">w</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">());</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">float</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> z_interpolated </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> alpha </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">z</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">w</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> beta </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">z</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">w</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> gamma </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">z</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">w</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">z_interpolated </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> w_reciprocal;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(depth_buf[</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">getindex</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x,y)] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">numeric_limits</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">float</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">>::</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">infinity</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">||</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> z_interpolated </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> depth_buf[</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">getindex</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x,y)]){</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    depth_buf[</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">getindex</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x,y)] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> z_interpolated;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    frame_buf[</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">getsuperindex</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x,y)] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> t.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">getColor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    Eigen</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::Vector3f </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">point</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1.0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,y</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1.0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1.0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    set_pixel</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(point,color);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"auto[alpha, beta, gamma] = computeBarycentric2D(x+step[k][0], y+step[k][1], t.v);\r\nfloat w_reciprocal = 1.0/(alpha / v[0].w() + beta / v[1].w() + gamma / v[2].w());\r\nfloat z_interpolated = alpha * v[0].z() / v[0].w() + beta * v[1].z() / v[1].w() + gamma * v[2].z() / v[2].w();\r\nz_interpolated *= w_reciprocal;\r\nif(depth_buf[getindex(x,y)] == std::numeric_limits<float>::infinity() || z_interpolated > depth_buf[getindex(x,y)]){\r\n    depth_buf[getindex(x,y)] = z_interpolated;\r\n    frame_buf[getsuperindex(x,y)] = t.getColor();\r\n    Eigen::Vector3f point(x*1.0,y*1.0,1.0);\r\n    set_pixel(point,color);\r\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<h2 id=\"五super_sampling\">五、Super_sampling<a class=\"anchor\" href=\"#五super_sampling\">#</a></h2>\n<p>要求我们使用4x4采样，即每个点需要维护四个depth和frame</p>\n<p>创建depth和frame</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::vector</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;float></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> super_depth_buf;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::vector</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Eigen</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::Vector3f</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> super_frame_buf;</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"std::vector<float> super_depth_buf;\r\nstd::vector<Eigen::Vector3f> super_frame_buf;\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<p>获取坐标函数</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> rst</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">rasterizer</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">getsuperindex</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> x</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> y</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> k</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    return</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 4</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">get_index</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x,y)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">k;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"int rst::rasterizer::getsuperindex(int x,int y,int k){\r\n    return 4*get_index(x,y)+k;\r\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<p>遍历bounding_box中的每个点</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> k </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;k</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">4</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;k</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">!</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">insideTriangle</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">step[k][</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">],y</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">step[k][</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">],t.v)) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">continue</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">    //find interpolated depth value in this location</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    auto</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">[alpha, beta, gamma] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> computeBarycentric2D</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">step[k][</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">], y</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">step[k][</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">], t.v);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    float</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> w_reciprocal </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1.0</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(alpha </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">w</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> beta </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">w</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> gamma </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">w</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">());</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    float</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> z_interpolated </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> alpha </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">z</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">w</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> beta </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">z</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">w</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> gamma </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">z</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> v[</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">].</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">w</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">     z_interpolated </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> w_reciprocal;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    if</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(super_depth_buf[</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">getsuperindex</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x,y,k)] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">==</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">numeric_limits</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">float</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">>::</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">infinity</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">||</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> z_interpolated </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> super_depth_buf[</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">getsuperindex</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x,y,k)]){</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">         count</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">         super_depth_buf[</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">getsuperindex</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x,y,k)] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> z_interpolated;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">         super_frame_buf[</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">getsuperindex</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x,y,k)] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> t.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">getColor</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"for(int k = 0;k<4;k++){\r\n    if(!insideTriangle(x+step[k][0],y+step[k][1],t.v)) continue;\r\n    //find interpolated depth value in this location\r\n    auto[alpha, beta, gamma] = computeBarycentric2D(x+step[k][0], y+step[k][1], t.v);\r\n    float w_reciprocal = 1.0/(alpha / v[0].w() + beta / v[1].w() + gamma / v[2].w());\r\n    float z_interpolated = alpha * v[0].z() / v[0].w() + beta * v[1].z() / v[1].w() + gamma * v[2].z() / v[2].w();\r\n     z_interpolated *= w_reciprocal;\r\n\r\n    if(super_depth_buf[getsuperindex(x,y,k)] == std::numeric_limits<float>::infinity() || z_interpolated > super_depth_buf[getsuperindex(x,y,k)]){\r\n         count++;\r\n         super_depth_buf[getsuperindex(x,y,k)] = z_interpolated;\r\n         super_frame_buf[getsuperindex(x,y,k)] = t.getColor();\r\n    }\r\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<p>最后再遍历设定颜色，注意颜色要除以4</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> min_x;x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">max_x;x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        for</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> y </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> min_y;y</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">max_y;y</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">++</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Vector3f color </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (super_frame_buf[</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">getsuperindex</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x,y,</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">super_frame_buf[</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">getsuperindex</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x,y,</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">super_frame_buf[</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">getsuperindex</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x,y,</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">                super_frame_buf[</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">getsuperindex</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x,y,</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">3</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">)])</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">4.0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">            Eigen</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::Vector3f </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">point</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(x</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1.0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,y</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1.0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1.0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">            set_pixel</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(point,color);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"for(int x = min_x;x<=max_x;x++){\r\n        for(int y = min_y;y<=max_y;y++){\r\n            Vector3f color = (super_frame_buf[getsuperindex(x,y,0)]+super_frame_buf[getsuperindex(x,y,1)]+super_frame_buf[getsuperindex(x,y,2)]+\r\n                super_frame_buf[getsuperindex(x,y,3)])/4.0;\r\n            Eigen::Vector3f point(x*1.0,y*1.0,1.0);\r\n            set_pixel(point,color);\r\n        }\r\n    }\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<p>最终效果</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./games101pa2-1.png&#x22;,&#x22;alt&#x22;:&#x22;1&#x22;,&#x22;class&#x22;:&#x22;zoomable&#x22;,&#x22;index&#x22;:0}\"></p>",{headings:397,localImagePaths:413,remoteImagePaths:414,frontmatter:415,imagePaths:419},[398,401,404,407,410],{depth:32,slug:399,text:400},"一作业要求","一、作业要求",{depth:32,slug:402,text:403},"二实现三角形栅格化算法","二、实现三角形栅格化算法",{depth:32,slug:405,text:406},"三测试点是否在三角形内","三、测试点是否在三角形内",{depth:32,slug:408,text:409},"四z-buffer算法","四、z-buffer算法",{depth:32,slug:411,text:412},"五super_sampling","五、Super_sampling",[392],[],{title:383,publishDate:416,updatedDate:416,description:384,tags:417,language:21,minutesRead:60,words:418},"2025-05-08",[388],299,[392],"c期末复习/c期末复习",{id:420,data:422,body:428,filePath:429,assetImports:430,digest:440,rendered:441},{title:423,description:424,publishDate:425,updatedDate:426,tags:427,language:21,draft:22,comment:23},"C++高程期末总结","WHU大一上C++高程期末复习总结",["Date","2025-01-09T00:00:00.000Z"],["Date","2025-01-09T00:00:00.000Z"],[20],"## 第二章\n\n- `volatile` 易变的     当要求使用volatile声明变量值的时候，系统总是重新从它所在的内存读取数据，即使它前面的指令刚刚从该处读取过数据，编译器将不会优化该变量的代码\n\n- `register` 寄存器变量  就是编译程序时希望把该变量放到寄存器中，这样可以提高对该变量的访问速度。由前言可知，CPU访问寄存器的速度是高于访问内存的速度；__不需要经常修改但常常访问，cpu能够接受的类型，小于等于整型长度，局部静态变量无法定义为寄存器变量，不能定义任意多个计算器变量。cpu寄存器数量有限！！！__\n\n- `static` 静态关键字    存在全局存储区中，仅在变量的作用范围内可见。生命周期变长。__修饰全局变量时，改变了全局变量的作用域，限制了在当前文件中，无法被其他文件extern--->（内部链接）\n\n- `extern` 外来的关键字  声明外部变量， 具有外部链接的对象，被说明的对象必须是**静态生存期的变量**（全局变量或静态变量）。\n\n- **全局变量默认extern类别，局部变量默认局部动态生存期。\n\n- `thread_local` 具有线程存储生存期，是 Thread 的局部变量，用于编多线程程序。只能用于**修饰命名空间以及块作用域中的变量，或者已经被指定为 static 的变量。\n\n- `mutable` ：只能用于**类数据成员**，并且**不能与 const 或者 static 同时使用，不能用来修饰引用变量**。 mutable关键字是为了突破 const 关键字的限制 被 mutable 关键字修饰的成员变量永远处于可变的状态，**即使是在被const 修饰的成员函数中。\n\n- `constexpr`修饰变量和`const`修饰变量的区别在于：初始化const变量的**可以不是**一个constexpr，初始化constexpr的**必须是constexpr\n\n- **基本运算符优先级\n    高\n    单目运算符\n    算术运算符（先乘除，后加减）\n    移位运算符\n    关系运算符\n    逻辑运算符（！除外）\n    条件运算符\n    赋值运算符\n    逗号运算符\n    低**\n    \n    ![1](./1.png)\n    - ++x返回的是增加后的数据，而x++返回的是增加前的数据，--同理\n      \n    - 逻辑运算符的短路原则\n      \n###  不同数据类型的转换\n\n#### 短->长\n\n无符号数，高位补0；有符号数，高位补符号位\n\n#### 长->短\n\n截取低位赋值，丢弃高位\n\n### 数据类型显示转换\n- `int(z)`\n- `(int)z`\n- 类型转换操作符<类型说明符>(表达式)\n- 类型操作转换符有:`const_cast,dynamic_cast,reinterpret_cast,static_cast``如static_cast<int>(z)`\n  \n### 简单IO格式控制\n\n![2](./2.png)\n\n\n### 简单控制语句\n\n##### switch\n\nbreak；跳出case分支的跳转语句，不用break；会依次执行其他case，最终跳出switch语句\n\n#### typedef声明\n\n![3](./3.png)\n\n- `typedef int INTEGER`\n- `typedef int Array[10];`数组要放在后面，因为[]是在类型名的类型名的后面\n- `typedef int* IntPtr;`原始定义:int* a;->int* IntPtr;->typedef int* IntPtr;\n- `typedef int (*FuncPtr)(int,int);`原型:`int (*funcPtr)(int,int)`,前面为返回值，后面括号内为参数的类型\n- ```c++\n    { int month;\n    int day;\n    int year;\n    }d;\n  typedef struct date{\n    int month;\n    int day;\n    int year;\n  }DATE;```\n  ```\n\n#### typedef-----C++11新用法\n\n`using 别名  = 类型名;`\n\n```c++\n//例如:\nusing SI = Sales_item; //SI是别名\n```\n\n注意：\n\n```c++\n//当typedef用类型别名指代复合类型或常量时，把类型别名用到声明语句中会产生意想不到的结果。\ntypedef char* pstring;//pstring是一个指向char类型的指针\nconst pstring cstr = 0;//注意，const char* cstr = 0;是错误的，并不是指向一个const char的指针\n//正确：cstr是一个指向char类型变量的常量指针\nconst pstring *ps;//ps是一个指向常量const类型指针的指针\n```\n\n#### auto和decltype\n\n- auto类型由编译器分析表达式的类型\n- 当我们定义一个变量与某一表达式类型相同，但是不想用该表达式初始化该变量时使用。\n- 例：decltype (i)j = 2;//根据i的数据类型确定j的数据类型\n\n## 第三章\n\n- 被调函数定义的位置放在主调函数之后，则必须在函数调用之前使用被调函数的原型说明；一定要声明之后编译器才知道后面出现了这个函数\n- void addrat(int,int); void addrat(int a,int b);两种函数原型均可\n- rand()返回一个伪随机数;void srand(unsigned int seed)为 rand 函数设置一个起始点，从而影响 rand 函数生成的随机数序列。\n  \n### 函数的参数传递\n- 函数调用时才分配形参储存单元\n- 实参类型必须与形参相符\n- 值传递是单向传递，无法修改实值；引用传递是双向传递\n- 常引用作参数可以保障实参数据的安全\n- 传递指针可以间接实现双向传递（值传递的特例）\n- **指针形参的具体实现方式：在函数中创建一个新的指针变量，并将形参指针的值（即内存地址）赋值给新的指针变量，这两个变量实际指向同一块内存空间。在函数内部的操作全是对这个新的指针变量，如果改变所指对象的值，则对象的值改变；若改变指针值（即改变内存地址），则不影响实参指针**\n- 引用相当于对标识符取别名，声明一个引用时，**必须同时对它进行初始化，指向一个已经存在的对象**，相当于一个常量指针（**Constant Pointer**），不可以改变指向，但可以改变指向对象的值，同时引用并没有内存空间，因为并没有创建变量\n  - 实现双向传递通常使用引用传递，形参与实参共用一个内存空间\n    \n### 内联函数\n- 声明时使用关键字inline\n- 编译系统将程序中出现内联函数调用的地方用函数体进行替换。\n- 内联函数中**不可以出现循环结构和switch语句**\n- 不加inline关键字的短小、频繁调用的函数也可能被编译器自动认为是内联函数；同样，加了inline关键字的函数也不一定就是内联函数（太过复杂就不是）\n- **是否内联由编译器去决定**\n\n### constexpr函数\n\n- 能用于常量表达式的函数\n- `constexpr` 函数的函数体必须非常简单，通常只能包含一条 `return` 语句（C++14 放宽了限制）。\n- **`constexpr` 函数**用于在编译时计算函数结果，适用于常量表达式和性能优化。\n\n### 带默认形参的函数\n\n- **有默认参数的形参必须放在形参列表最后**，否则会造成歧义\n\n![4](./4.png)\n\n### 函数重载\n\n- 形参类型不同或者形参个数不同\n- 注意如果没有完全匹配的重载函数，编译器会进行实参的数据类型隐式转换，以找到最佳匹配的函数，**但此时可能会出现二义性**\n- 函数重载和默认参数同时使用，有可能引起二义性```\n    void DrawCircle(int r=0,int x=0, int y=0);\n    void DrawCircle(int r);\n- 函数返回类型不同不能作为重载条件\n\n## 第四章\n\n- 只有在类实例化时，才能给类中的数据成员初始化\n- 访问权限可以任意顺序出现，但每个成员只能有一种访问属性\n- `public`任何外部函数都可以访问\n- `private`只允许本类中的函数及友元访问\n- `protected`只能被本类成员函数，派生类成员函数和友元访问。(**与`private`差别在于继承过程中派生类能够访问)**\n\n### 类的成员函数\n\n- 可以在类内声明，类外添加类名作用域实现；也可直接在类内给出函数体，形成内联成员函数\n- 允许声明重载函数和带默认形参值的函数\n- **在类中定义的函数成员自动成为内联函数**，在类外定义需要添加inline关键字（**声明不写，定义时写inline**）\n- 不能在函数原型处说明inline，否则编译器会处理为普通函数\n\n### 构造函数\n\n- 如果没有声明构造函数，编译器会自动生成默认构造函数，参数列表为空\n- 构造函数可以是内联函数、重载函数、带默认参数值的函数\n- 构造函数函数名与类名相同，且不指定返回值类型\n- 构造函数可以进行重载操作\n- 如果显式定义了构造函数，则编译器不再提供默认构造函数\n- **无形参的构造函数称为默认构造函数，全部参数都有默认形参值的构造函数也是默认构造函数\n- **成员初始化顺序与它们在类定义中的出现顺序一致，而不是在初始值中出现的顺序!早声明的先执行初始化\n- const成员或引用成员必须将其初始化！\n- 委托构造函数：使用它所属类的其他构造函数执行自己的初始化过程\n- 拷贝构造函数：用一个已经存在的本类对象初始化新对象\n  \n  ```c++\n  类名 (const 类名& 对象名);//声明原型\n  类名::类 (const 类名& 对象名){\n  }//实现\n  ```\n- 拷贝构造函数被调用的三种情况：\n  - 定义新对象时以另一个对象为初始值\n  - 函数的形参是类的对象，将使用实参对象初始化形参对象\n  - 如果函数的返回值是类的对象，函数执行完成返回主调函数时，将使用return语句中的对象初始化一个临时无名对象，传递给主调函数，此时发生复制构造。\n\n### 析构函数\n\n- 析构函数是类的一个公有成员函数，可以写在类内，也可以写在类外\n- 析构函数不能有参数，**不能重载**\n\n### 移动构造函数(不太可能考)\n\n- 对持久存在变量的引用称为左值引用，用&表示（即第3章引用类型）,对短暂存在可被移动的右值的引用称之为右值引用，用&&表示\n- 通过标准库`<utility>`中的`move`函数可将左值对象移动为右值\n  \n  ```c++\n  float n = 6;\n  float &lr_n = n; //左值引用\n  float &&rr_n = n; //错误，右值引用不能绑定到左值\n  float &&rr_n = n * n; //右值表达式绑定到右值引用\n  ```\n\n通过标准库<utility>中的move函数可将左值对象移动为右值\nfloat n = 10;\nfloat &&rr_n = std::move(n); //将n转化为右值\n\n```c++\n\n#include<utility>\nclass astring {\npublic :\nstd::string s;\nastring (astring&& o) noexcept: s(std::move(o.s)) //显式移动所有成员\n{ 函数体 }\n\n}//不分配新内存，被移动的对象不应再使用，避免多余复制操作，除非销毁或者重新赋值\n```\n\n### default 、delete 函数\n\n- =default:要求编译器生成默认或拷贝构造函数\n- =delete:要求编译器删除指定函数，除了析构函数之外都可以删除\n  \n  ```c++\n  Mystr() = default;//默认无参构造函数\n  Mystr(Mystr &str) = default;//默认拷贝构造函数\n  Mystr(Mystr &str) = delete;//删除拷贝构造函数 \n  ```\n\n### 前向引用\n\n- **前向引用并没有定义类，无法在提供完整定义类之前声明该对象，也不能再内联成员函数中使用该类，因为编译器不知道这个类的结构是怎样的，只知道存在这个类，不能涉及类的细节**\n- 仅仅进行前向声明而没有定义的类是不完整的，这样的类，只能用于**定义指针、引用、以及用于函数形参的指针和引用。\n\n### 结构体\n\n- 结构体与类几乎完全相同，仅默认访问权限不同。class默认访问权限是private,而struct默认访问权限是public\n\n### 联合体union\n\n- 成员共用相同的内存单元\n- 任何两个成员不会同时有效，只会取其一\n\n### 枚举union\n\n- 不限定作用域的枚举类型和限定作用域的枚举类型\n- 不能对枚举元素赋值，但可以声明时初始化\n- 枚举元素有默认值，依次为0,1,2,3,.....\n- 枚举元素的作用域是全局的，会造成命名空间的污染\n- 枚举变量的值可以在运行时修改，但只能赋值为枚举类型中定义的枚举元素。枚举变量只能存储枚举类型中的枚举元素，不能直接赋值为整数（除非进行强制类型转换）。\n- 枚举类（限定作用域枚举）枚举类的枚举元素位于枚举类的作用域内，不会污染全局命名空间。- 枚举类的枚举元素不能隐式转换为整数，必须显式转换。可以显式指定枚举类的底层类型（如 `int`、`char` 等）。\n  \n  ```c++\n  //enum 枚举类型名{枚举元素值(变量值) 列表};\n  enum Weekday{\n    sun,mon,tue,wed,thu,fri,sat\n  };\n  //限定作用域枚举类\n  enum class Weekday {\n    SUN, MON, TUE\n  };\n  Weekday today = Weekday::SUN;  // 必须使用作用域运算符 ::\n  int day = static_cast<int>(Weekday::SUN);  // 显式转换为整数\n  enum class Weekday : char {\n    SUN, MON, TUE\n  };\n  enum class Color { RED, GREEN };\n  enum class TrafficLight { RED, YELLOW, GREEN };\n  Color c = Color::RED;  // 不会与 TrafficLight::RED 冲突\n  ```\n\n## 第五章\n### 标识符的作用域和可见性\n- 函数原型的作用域在函数内\n- 局部作用域\n- 类作用域，包含类内和非内联成员函数的函数体。如果在类作用域以外访问类的成员，要通过**类名（访问静态成员），或者该类的对象名、对象引用、对象指针（访问非静态成员）**。\n- 文件作用域：如全局变量\n- 命名空间作用域：程序可以有多个命名空间，可以在不同命名空间中使用相同的命名而不混淆\n\n### 生存期\n - 全局变量，静态局部变量（局部可见性）拥有静态生存期\n - 块作用域声明的，没有用static修饰的对象是动态生存期对象（局部生存期对象），不指定初值时，初值不确定\n### 类的静态成员\n- 分为静态数据成员和静态成员函数\n- 不使用静态成员时：所有的类都各自有数据成员，共用一份成员函数(使用this指针来分辨哪个对象调用的)\n- 静态数据成员\n    - static关键字声明\n    - 所有该类的对象共享\n    - 必须在类外定义和初始化,用::指明作用域\n    - 可以是三种权限之一\n- 静态成员函数\n    - 类外使用类名和作用域操作符来调用\n    - **只能引用该类的静态数据成员或者静态成员函数\n\n### 类的友元\n- 友元函数和友元类\n- 友元函数能够通过对象名访问private和protect成员\n- 有两种形式的友元函数\n    - 一个不属于任何类的函数声明为当前类的友元，称为当前类的友元函数\n    - 一个其他类的成员函数声明为当前类的友元，称为当前类的友元成员\n- 友元函数声明可以放在public、private、protected的任意段中\n- 友元类：若一个类为另一个类的友元，则此类的所有成员函数都能访问对方类的**私有成员**\n- **友元关系不具有传递性，且是单向的**\n\n### 共享数据的保护\n- 对于需要共享但不需要改变的数据应声明为const类型，不改变对象状态的成员函数声明为常函数\n- const对象必须初始化\n- 常成员函数`类型说明符 函数名（参数表）const;`\n- **通过常对象只能调用它的常成员函数\n- 对于常数据成员，只能通过构造函数初始化列表方式初始化数据\n- **常成员函数可以访问常对象中的数据成员，但仍然不允许修改常对象中数据成员的值（可访问变量但是只读）\n- **特例mutable:被mutable修饰的变量，将永远处于可变的状态，即使在一个const函数中`mutalbe double len;//len可以永远被修改`\n\n## 第六章\n### 数组\n- 数组名是一个地址常量，储存了数组首元素的内存的地址\n- 数组地址是连续的\n- 数组名作形参，对形参数组的改变会直接影响到实参数组。退化为了指针变量。\n- 静态数组（前面加static关键字）只初始化一次，对于大型数组可提高运行效率\n\n### 指针\n- 直接访问：按变量名直接存取变量值；间接访问：通过存放变量地址的变量去访问变量\n- 空类型指针`void*`，表示不确定指向哪一种数据类型，使用时需要强制类型转换`p1 = (char *)p2;`\n- 任何⼀个指针本身的数据值都是unsigned long int型。\n- **指针常量(constant Pointer)，指针本身的值不变\n- **常量指针（Pointer to constant)，指向常量数据类型\n- 指针具有算术运算和关系运算\n\n### 输入整行字符串\n - `getline(cin,s)`输入到s中\n - `getline(cin,s2,','`第三个参数可以设置分隔符作为字符串结束的标志\n\n### 指针数组\n- 由指针类型元素组成的数组\n- 指针作形参本质仍然是值传递\n\n![5](./5.png)\n\n### 指针型函数\n- 函数的返回值是地址\n- **不要将非静态局部地址用作函数的返回值，返回的指针要确保在主调函数中是有效、合法的地址。例如不要将局部定义的变量传回主调函数，此时局部变量已经不存在了\n- `int* function(){}`\n\n### 指向函数的指针\n- `返回值类型 (*functionPointer)(参数类型);`\n```c++\nvoid (*functionPointer)(float);//指向函数的指针\nfunctionPointer = printStuff;//printStuff是已有函数\nfunctionPointer(PI);//函数指针调用\n```\n\n### 对象指针\n\n- `类名 *对象指针名` \n- `Point *ptr;`\n\n### this指针\n\n- 隐含于每一个类的成员函数中的特殊指针\n- 指出成员函数当前操作的数据所属的对象\n\n### 指向类的非静态成员的指针\n\n- `类型说明符 类名::*类成员指针名;`声明指向类内数据成员的指针\n- `类成员指针名 = &类名::数据成员名;`\n- 访问:`对象名.*类成员指针名`    `对象指针名->*类成员指针名`\n- 指向函数：`类型说明符 (类名::*类成员指针名)(参数表);`\n- 赋值`指针名=&类名::函数成员名;`\n- 访问函数成员  `(对象名.*类成员指针名)(参数表)`   `(对象指针名->*类成员指针名)(参数表)`\n\n### 指向类的静态成员函数\n\n- 不用依赖于具体的对象调用，直接用**普通指针**实现\n\n### new delete\n\n- new 数据类型（初始化参数列表）\n- delete 指针名\n- new 类型名T [ 数组长度 ]\n- **delete[] 数组名p\n- `new 类型名T[第1维长度][第2维长度]....`\n\n### vector\n\n- 表示对数组元素的引用，vector数组对象名不表示数组的首地址\n\n### 浅拷贝、深拷贝\n\n- 浅拷贝：仅复制指针的地址，导致指向同一块内存空间\n- 深拷贝：重新新建一块内存空间\n\n## 第七章\n\n- **派生类不能继承基类的构造函数和析构函数\n- 如果派生类声明了一个和某基类成员同名的新成员（如果是成员函数，则参数表也要相同，参数不同的情况属于重载），**派生的新成员就覆盖了外层同名成员\n\n### 访问控制\n\n- 不同继承方式的影响：1.派生类成员对基类成员的访问权限 2.通过派生类对象对基类成员的访问控制\n- **public继承**:\n  - 基类的public和protected成员的访问属性在派生类中保持不变，但基类的private成员不可直接访问。\n  - 派生类中的成员函数可以直接访问基类中的public和protected成员，但不能直接访问基类的private成员。\n  - 通过派生类的对象只能访问基类的public成员\n- **protected继承**：\n  - 基类的public和protected成员都以protected身份出现在派生类中，但基类的private成员不可直接访问\n  - 派生类中的成员函数可以直接访问基类中的public和protected成员，但不能直接访问基类的private成员。\n  - 通过派生类的对象不能直接访问基类中的任何成员\n- **private继承**：\n  - 基类的public和protected成员都以private身份出现在派生类中，但基类的private成员不可直接访问。\n  - 派生类中的成员函数可以直接访问基类中的public和protected成员，但不能直接访问基类的private成员。\n  - 通过派生类的对象不能直接访问基类中的任何成员。\n\n### 类型兼容原则\n\n- 一个公有派生类对象在使用上可以被作为基类的对象\n  - 可以隐含转换为基类对象\n  - 派生类对象可以初始化基类的引用\n  - 派生类的指针可以隐含转换基类的指针\n- 通过基类对象名、指针只能使用从基类继承的成员\n\n### 派生类的构造和析构函数\n\n- 只需要对本类中新增成员进行初始化，继承而来的基类对象可以自动调用基类构造函数完成\n- 派生类的构造函数需要给基类的构造函数传参\n  \n  ```c++\n  //单继承\n  派生类名::派生类名(基类所需的形参，本类成员所需的形参):基类名(参数表), 本类成员初始化列表\n  \n  {\n  \n  //其他初始化；\n  \n  }；\n  //多继承\n  派生类名::派生类名(参数表):基类名1(基类1初始化参数\n  \n  表), 基类名2(基类2初始化参数表), ...基类名n(基类n初始化\n  \n  参数表), 本类成员初始化列表\n  \n  {\n  \n  //其他初始化；\n  \n  }；\n  \n  C::C(int i,int j): B(i), c(j){\n  \n  cout << \"C's constructor called.\" << endl;\n  \n  }//C是派生类，B是基类，传递i给B的构造函数,c是新增变量\n  ```\n\n### 构造、析构函数的调用顺序\n- 先调用基类的构造函数，按照**继承时声明的顺序\n- 本类成员初始化，按照在**类中的声明顺序\n- 析构函数与构造函数调用顺序相反\n\n### 作用域分辨符\n- 基类和派生类有相同成员时，通过派生类对象调用的是派生类中的同名成员\n- 如果要通过派生类对象访问基类同名成员，需要加上作用域\n- 二义性问题可以通过限定类名解决，也可以虚基类、虚函数解决\n\n### 虚基类\n- 解决多继承（菱形继承）时可能发生的对同一基类继承多次而产生的二义性问题.\n- 虚基类的成员是由最派生类的构造函数通过调用虚基类的构造函数进行初始化的。\n- 在整个继承结构中，直接或间接继承虚基类的所有派生类，都必须在构造函数的成员初始化表中给出对虚基类的构造函数的调用。如果未列出，则表示调用该虚基类的默认构造函数。\n- 在建立对象时，只有最派生类的构造函数调用虚基类的构造函数，该派生类的其他基类对虚基类构造函数的调用被忽略。\n\n```c++\n\n#include <iostream>\nusing namespace std;\n// 虚基类\nclass A {\npublic:\n    int data;\n    A(int value) : data(value) {\n        cout << \"A constructed with value: \" << value << endl;\n    }\n};\n// 中间类 B，虚继承 A\nclass B : virtual public A {\npublic:\n    B(int value) : A(value) {\n        cout << \"B constructed\" << endl;\n    }\n};\n\n// 中间类 C，虚继承 A\nclass C : virtual public A {\npublic:\n    C(int value) : A(value) {\n        cout << \"C constructed\" << endl;\n    }\n};\n\n// 最远派生类 D，继承 B 和 C\nclass D : public B, public C {\npublic:\n    // D 的构造函数需要显式初始化虚基类 A\n    //最远派生类负责调用A的构造函数，保证只有一个A\n    //先调用虚基类构造，再是直接基类，最后自身\n    D(int value) : A(value), B(value), C(value) {\n        cout << \"D constructed\" << endl;\n    }\n};\n\nint main() {\n    D d(10); // 创建 D 的对象\n    cout << \"Data in D: \" << d.data << endl; // 输出 10\n    return 0;\n}\n```\n\n## 第八章 多态\n\n![6](./6.png)\n\n- 编译时动态和运行时多态的本质就是静态类型检查和动态类型检查。\n- **基态指针指向派生类对象是一种动态多态\n- **基类指针可以指向派生类对象，但仍然调用的是基类成员函数**：但是由于编译时多态的原因，编译器不知道指针指向的对象已经重写了该成员函数\n- 可以使用**虚函数\n\n### 运算符重载\n\n- 运算符重载是对已有运算符赋予多重含义，并**没有新增运算符\n- **有部分运算符不能重载**，不能重载的运算符举例：`“.”、“.*”、“::”、“?:”、sizeof\n- 以下运算符**只允许用成员函数重载：`= ( ) [ ] new delete`\n- 重载之后运算符的优先级和结合性都不会改变\n- 两种重载方式：**重载为类的非静态成员函数和重载为非成员函数。**\n- 重载为非成员函数可以使用**友元访问类的保护和私有成员，与成员函数的区别在于：成员函数有this指针，而友元函数没有this指针**\n- 一元运算符重载时：**使用成员函数不必传入对象(有this指针)，而友元函数需要显示传入对象**\n- 二元运算符重载时：**成员函数仅需要传入一个参数，而友元函数需要传入两个函数**\n- 重载的运算符函数 operator = **不能被继承，且必须是成员函数**\n- **拷贝函数用于创建一个新对象**，赋值运算符是改变一个已存在的对象的值\n\n### 虚函数\n\n- **虚函数必须是非静态的成员函数,内联成员函数不能定义为虚函数**\n- 构造函数**不能**是虚函数，析构函数**可以是**虚函数\n- **只有通过基类指针或引用，才能通过虚函数调用派生类对应函数**\n- 在派生类中可以对基类中的成员函数进行覆盖（重定义）\n- **每个多态类有一个虚表（virtual table),虚表中有当前类的各个虚函数的入口地址,每个对象有一个指向当前类的虚表的指针（虚指针vptr）**\n- **构造函数中为对象的虚指针赋值**,通过多态类型的指针或引用调用成员函数时，通过虚指针找到虚表，进而找到所调用的虚函数的入口地址,通过该入口地址调用虚函数\n- 派生类可以不显式地用virtual声明虚函数,编译器会根据函数名称、参数个数、对应参数类型、const限定符是否相同\n- 派生类中的虚函数还会隐藏基类中同名函数的所有其它重载形式。**先查找派生类的作用域**，如果找到同名函数，就不再查找基类的作用域。适用于**成员函数、静态函数和虚函数。\n- `override`关键字标记派生类中的虚函数，如果没有覆盖已经存在的虚函数，就会报错\n- `final`用于标记某个函数，则该函数不能再被它的派生类覆盖，否则编译器报错。\n\n### 纯虚函数和抽象类\n\n- 纯虚函数`virtual 函数类型 函数名(参数表) = 0;`\n- 具有纯虚函数的类成为抽象类，**只能作为基类使用，不能实例化对象\n\n## 第九章 模板\n\n### 1. **函数模板**\n\n函数模板允许定义一个通用的函数，可以用于多种数据类型。\n\n#### 语法\n\n```c++\ntemplate <typename T>\n返回类型 函数名(参数列表) {\n    // 函数体\n}\n```\n\n- `template <typename T>`：声明一个模板，`T` 是模板参数，表示任意类型。\n- `typename` 可以用 `class` 替换，两者在模板中含义相同。\n- **函数模板可以使用自动类型推导，优先调用普通函数，普通函数无法实现再调用函数模板**，函数模板也可以发生重载，但模板T不能有默认参数\n  \n  #### 示例：通用的 `max` 函数\n\n```cpp\n#include <iostream>\n// 定义函数模板\ntemplate <typename T>\nT max(T a, T b) {\n    return (a > b) ? a : b;\n}\n\nint main() {\n    std::cout << max(3, 5) << std::endl;         // 输出 5\n    std::cout << max(3.14, 2.71) << std::endl;   // 输出 3.14\n    std::cout << max('a', 'z') << std::endl;     // 输出 z\n    return 0;\n}\n```\n\n---\n\n### 2. **类模板**\n\n类模板允许定义一个通用的类，可以用于多种数据类型。\n\n#### 语法\n\n```cpp\ntemplate <typename T>\nclass 类名 {\n    // 类成员\n};\n```\n\n- `template <typename T>`：声明一个模板，`T` 是模板参数，表示任意类型。\n- 类模板的成员函数可以在类内定义（隐式内联），也可以在类外定义。\n- **类模板不能使用自动类型推导，必须显示指定类型**\n- **类模板中成员函数在调用时才创建**\n\n#### 示例：通用的 `Box` 类\n\n```cpp\n#include <iostream>\n// 定义类模板\ntemplate <typename T>\nclass Box {\nprivate:\n    T value;\npublic:\n    Box(T v) : value(v) {}\n    T getValue() const {\n        return value;\n    }\n};\n\nint main() {\n    Box<int> intBox(42);\n    Box<std::string> strBox(\"Hello, Templates!\");\n\n    std::cout << intBox.getValue() << std::endl;  // 输出 42\n    std::cout << strBox.getValue() << std::endl;  // 输出 Hello, Templates!\n    return 0;\n}\n```\n\n---\n\n### 3. **模板参数**\n\n模板参数可以是类型参数（如 `typename T`），也可以是非类型参数（如整数、指针等）。\n\n#### 示例：非类型模板参数\n\n```cpp\n#include <iostream>\n\n// 非类型模板参数（整数）\ntemplate <typename T, int size>\nclass Array {\nprivate:\n    T data[size];\npublic:\n    void set(int index, T value) {\n        data[index] = value;\n    }\n    T get(int index) const {\n        return data[index];\n    }\n};\n\nint main() {\n    Array<int, 5> intArray;\n    intArray.set(0, 10);\n    std::cout << intArray.get(0) << std::endl;  // 输出 10\n    return 0;\n}\n```\n\n---\n\n### 4. **模板特化**\n\n模板特化允许为特定类型提供特殊的实现。\n\n#### 示例：函数模板特化（重载）\n\n```cpp\n#include <iostream>\n// 通用模板\ntemplate <typename T>\nvoid print(T value) {\n    std::cout << \"Generic: \" << value << std::endl;\n}\n\n// 特化版本（针对 const char*）\ntemplate <>\nvoid print<const char*>(const char* value) {\n    std::cout << \"Specialized: \" << value << std::endl;\n}\n\nint main() {\n    print(42);              // 输出 Generic: 42\n    print(\"Hello, World!\"); // 输出 Specialized: Hello, World!\n    return 0;\n}\n```\n\n---\n\n### 5. **类模板的默认参数**\n\n可以为类模板参数指定默认值。\n\n#### 示例：类模板的默认参数\n\n```cpp\n#include <iostream>\ntemplate <typename T = int, int size = 10>\nclass Array {\nprivate:\n    T data[size];\npublic:\n    void set(int index, T value) {\n        data[index] = value;\n    }\n    T get(int index) const {\n        return data[index];\n    }\n};\n\nint main() {\n    Array<> intArray; // 使用默认参数 T=int, size=10\n    intArray.set(0, 42);\n    std::cout << intArray.get(0) << std::endl;  // 输出 42\n    return 0;\n}\n```\n\n## 第十章 泛型程序设计与STL\n\n- STL基本组件：容器（container）、迭代器（iterator）、函数对象（function object）、算法（algorithms）\n\n- **Iterators（迭代器）是算法和容器的桥梁。算法不直接操作容器中的数据，而是通过迭代器间接操作。** 将迭代器作为算法的参数、通过迭代器来访问容器而不是把容器直接作为算法的参数\n\n- 函数对象（function object）：一个行为类似函数的对象，对它可以像调用函数一样调用\n  \n  - 普通函数就是函数对象\n  \n  - 重载了“()”运算符的类的实例是函数对象\n    \n    ```c++\n    #include <iostream>\n    #include <numeric>\n    using namespace std;\n    \n    class MultClass { //定义MultClass类\n    public:\n    int operator() (int x, int y) const { return x * y; }\n    //重载操作符operator()\n    };\n    \n    int main() {\n    int a[] = { 1, 2, 3, 4, 5 };\n    const int N = sizeof(a) / sizeof(int);\n    cout << \"The result by multipling all elements in a is \"\n    << accumulate(a, a + N, 1, MultClass()) << endl;\n    //将类multclass传递给通用算法\n    return 0;\n    }\n    ```\n    \n\n![7](./7.png)\n\n## 第十一章 流类库\n\n### 1. **I/O流的概念及流类库结构**\n\n- **流的概念**：流是数据在生产者（如文件、键盘）和消费者（如程序、屏幕）之间流动的抽象。程序通过流对象与文件或设备进行交互。\n\n- **流类库结构**：\n  - **抽象流基类**：`ios`是所有流类的基类。\n  - **输入流类**：`istream`（通用输入流）、`ifstream`（文件输入流）、`istringstream`（字符串输入流）。\n  - **输出流类**：`ostream`（通用输出流）、`ofstream`（文件输出流）、`ostringstream`（字符串输出流）。\n  - **输入/输出流类**：`iostream`（通用输入/输出流）、`fstream`（文件输入/输出流）、`stringstream`（字符串输入/输出流）。\n  - **流缓冲区类**：`streambuf`（抽象流缓冲区基类）、`filebuf`（磁盘文件流缓冲区）、`stringbuf`（字符串流缓冲区）。\n\n---\n\n### 2. **输出流**\n\n- **主要输出流对象**：\n  \n  - `cout`：标准输出流，通常用于向屏幕输出。\n  - `cerr`：标准错误输出流，无缓冲，立即输出。\n  - `clog`：标准错误输出流，有缓冲，缓冲区满时输出。\n\n- **文件输出流**：\n  \n  - `ofstream`：用于向文件输出数据。可以通过构造函数或`open`函数打开文件。\n  - 示例：\n    \n    ```c++\n      ofstream myFile(\"filename\");\n      myFile << \"Hello, World!\";\n      myFile.close();\n    ```\n\n- **输出格式控制**：\n  \n  - **操纵符**：如`setw`（设置输出宽度）、`setprecision`（设置浮点数精度）、`setiosflags`（设置对齐方式等）。\n    \n    ```c++\n    cout << setw(10) << setiosflags(ios_base::left)<<setprecision(2) << 3.14159; // 输出宽度为10，精度为2,左对齐，不指定fixed或scientific，精度值表示有效数字的位数,若指定了则是小数点后的位数\n    ```\n\n---\n\n### 3. **输入流**\n\n- **主要输入流对象**：\n  \n  - `cin`：标准输入流，通常用于从键盘输入。\n  \n  - `ifstream`：文件输入流，用于从文件读取数据。\n  \n  - `istringstream`：字符串输入流，用于从字符串读取数据。\n\n- **提取运算符**：\n  \n  - `>>`：用于从输入流中提取数据，默认以空白符为分隔符。\n\n- **输入流相关函数**：\n  \n  - `get()`：读取单个字符，包括空白符。\n  \n  - `getline()`：读取一行数据，可以指定终止字符。\n  \n  - `read()`：从文件中读取二进制数据到内存。\n    \n    - `istream& read(char* buffer, streamsize size);`\n\n- **文件输入流**：\n  \n  - `ifstream`：用于从文件读取数据。可以通过构造函数或`open`函数打开文件。\n  - `ios_base::binary`以二进制方式读取数据\n  - 示例：\n    \n    ```c++\n    ifstream myFile(\"filename\");\n    string line;\n    while (getline(myFile, line)) {\n        cout << line << endl;\n    }\n    myFile.close();\n    ```\n\n---\n\n### 4. **输入/输出流**\n\n- **`fstream`**：同时支持文件的输入和输出操作。\n\n- **`stringstream`**：用于字符串的输入和输出，常用于数据类型转换。\n  \n  - 示例：\n    \n    ```c++\n    stringstream ss;\n    ss << 123;\n    int value;\n    ss >> value; // value = 123\n    ```\n\n## 第十二章 异常处理\n\n![8](./8.png)\n\n- 若有异常则通过throw操作创建一个异常对象并抛掷。\n- **如果抛出异常后没有catch捕获，程序会调用 `std::terminate`，默认行为是终止程序。\n- 将可能抛出异常的程序段嵌在try块之中。控制通过正常的顺序执行到达try语句，然后执行try块内的保护段。\n- **如果在保护段执行期间没有引起异常，那么跟在try块后的catch子句就不执行。程序从try块后跟随的最后一个catch子句后面的语句继续执行下去。**\n\n![9](./9.png)\n\n### 异常处理中的构造与析构\n\n- 初始化异常参数。\n- 将从对应的try块开始到异常被抛掷处之间构造（且尚未析构）的所有自动对象进行析构。\n- 从最后一个catch处理之后开始恢复执行。","src/content/blog/C++期末复习/C++期末复习.md",[431,432,433,434,435,436,437,438,439],"./1.png","./2.png","./3.png","./4.png","./5.png","./6.png","./7.png","./8.png","./9.png","a680f5f577bd137c",{html:442,metadata:443},"<h2 id=\"第二章\">第二章<a class=\"anchor\" href=\"#第二章\">#</a></h2>\n<ul>\n<li>\n<p><code>volatile</code> 易变的     当要求使用volatile声明变量值的时候，系统总是重新从它所在的内存读取数据，即使它前面的指令刚刚从该处读取过数据，编译器将不会优化该变量的代码</p>\n</li>\n<li>\n<p><code>register</code> 寄存器变量  就是编译程序时希望把该变量放到寄存器中，这样可以提高对该变量的访问速度。由前言可知，CPU访问寄存器的速度是高于访问内存的速度；<strong>不需要经常修改但常常访问，cpu能够接受的类型，小于等于整型长度，局部静态变量无法定义为寄存器变量，不能定义任意多个计算器变量。cpu寄存器数量有限！！！</strong></p>\n</li>\n<li>\n<p><code>static</code> 静态关键字    存在全局存储区中，仅在变量的作用范围内可见。生命周期变长。__修饰全局变量时，改变了全局变量的作用域，限制了在当前文件中，无法被其他文件extern--->（内部链接）</p>\n</li>\n<li>\n<p><code>extern</code> 外来的关键字  声明外部变量， 具有外部链接的对象，被说明的对象必须是<strong>静态生存期的变量</strong>（全局变量或静态变量）。</p>\n</li>\n<li>\n<p>**全局变量默认extern类别，局部变量默认局部动态生存期。</p>\n</li>\n<li>\n<p><code>thread_local</code> 具有线程存储生存期，是 Thread 的局部变量，用于编多线程程序。只能用于**修饰命名空间以及块作用域中的变量，或者已经被指定为 static 的变量。</p>\n</li>\n<li>\n<p><code>mutable</code> ：只能用于<strong>类数据成员</strong>，并且<strong>不能与 const 或者 static 同时使用，不能用来修饰引用变量</strong>。 mutable关键字是为了突破 const 关键字的限制 被 mutable 关键字修饰的成员变量永远处于可变的状态，**即使是在被const 修饰的成员函数中。</p>\n</li>\n<li>\n<p><code>constexpr</code>修饰变量和<code>const</code>修饰变量的区别在于：初始化const变量的<strong>可以不是</strong>一个constexpr，初始化constexpr的**必须是constexpr</p>\n</li>\n<li>\n<p><strong>基本运算符优先级\n高\n单目运算符\n算术运算符（先乘除，后加减）\n移位运算符\n关系运算符\n逻辑运算符（！除外）\n条件运算符\n赋值运算符\n逗号运算符\n低</strong></p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./1.png&#x22;,&#x22;alt&#x22;:&#x22;1&#x22;,&#x22;class&#x22;:&#x22;zoomable&#x22;,&#x22;index&#x22;:0}\"></p>\n<ul>\n<li>\n<p>++x返回的是增加后的数据，而x++返回的是增加前的数据，—同理</p>\n</li>\n<li>\n<p>逻辑运算符的短路原则</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"不同数据类型的转换\">不同数据类型的转换<a class=\"anchor\" href=\"#不同数据类型的转换\">#</a></h3>\n<h4 id=\"短-长\">短->长<a class=\"anchor\" href=\"#短-长\">#</a></h4>\n<p>无符号数，高位补0；有符号数，高位补符号位</p>\n<h4 id=\"长-短\">长->短<a class=\"anchor\" href=\"#长-短\">#</a></h4>\n<p>截取低位赋值，丢弃高位</p>\n<h3 id=\"数据类型显示转换\">数据类型显示转换<a class=\"anchor\" href=\"#数据类型显示转换\">#</a></h3>\n<ul>\n<li><code>int(z)</code></li>\n<li><code>(int)z</code></li>\n<li>类型转换操作符&#x3C;类型说明符>(表达式)</li>\n<li>类型操作转换符有:<code>const_cast,dynamic_cast,reinterpret_cast,static_cast``如static_cast&#x3C;int>(z)</code></li>\n</ul>\n<h3 id=\"简单io格式控制\">简单IO格式控制<a class=\"anchor\" href=\"#简单io格式控制\">#</a></h3>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./2.png&#x22;,&#x22;alt&#x22;:&#x22;2&#x22;,&#x22;class&#x22;:&#x22;zoomable&#x22;,&#x22;index&#x22;:0}\"></p>\n<h3 id=\"简单控制语句\">简单控制语句<a class=\"anchor\" href=\"#简单控制语句\">#</a></h3>\n<h5 id=\"switch\">switch<a class=\"anchor\" href=\"#switch\">#</a></h5>\n<p>break；跳出case分支的跳转语句，不用break；会依次执行其他case，最终跳出switch语句</p>\n<h4 id=\"typedef声明\">typedef声明<a class=\"anchor\" href=\"#typedef声明\">#</a></h4>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./3.png&#x22;,&#x22;alt&#x22;:&#x22;3&#x22;,&#x22;class&#x22;:&#x22;zoomable&#x22;,&#x22;index&#x22;:0}\"></p>\n<ul>\n<li><code>typedef int INTEGER</code></li>\n<li><code>typedef int Array[10];</code>数组要放在后面，因为[]是在类型名的类型名的后面</li>\n<li><code>typedef int* IntPtr;</code>原始定义:int* a;->int* IntPtr;->typedef int* IntPtr;</li>\n<li><code>typedef int (*FuncPtr)(int,int);</code>原型:<code>int (*funcPtr)(int,int)</code>,前面为返回值，后面括号内为参数的类型</li>\n<li>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  { </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> month;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> day;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> year;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  }d;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">typedef</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> struct</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> date{</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> month;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> day;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">  int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> year;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}DATE;```</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"  { int month;\n  int day;\n  int year;\n  }d;\ntypedef struct date{\n  int month;\n  int day;\n  int year;\n}DATE;&#x60;&#x60;&#x60;\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n</li>\n</ul>\n<h4 id=\"typedef-----c11新用法\">typedef-----C++11新用法<a class=\"anchor\" href=\"#typedef-----c11新用法\">#</a></h4>\n<p><code>using 别名  = 类型名;</code></p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//例如:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">using SI </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Sales_item;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> //SI是别名</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"//例如:\nusing SI = Sales_item; //SI是别名\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<p>注意：</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//当typedef用类型别名指代复合类型或常量时，把类型别名用到声明语句中会产生意想不到的结果。</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">typedef</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> char*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> pstring;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//pstring是一个指向char类型的指针</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> pstring cstr </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//注意，const char* cstr = 0;是错误的，并不是指向一个const char的指针</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//正确：cstr是一个指向char类型变量的常量指针</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> pstring </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">ps;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//ps是一个指向常量const类型指针的指针</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"//当typedef用类型别名指代复合类型或常量时，把类型别名用到声明语句中会产生意想不到的结果。\ntypedef char* pstring;//pstring是一个指向char类型的指针\nconst pstring cstr = 0;//注意，const char* cstr = 0;是错误的，并不是指向一个const char的指针\n//正确：cstr是一个指向char类型变量的常量指针\nconst pstring *ps;//ps是一个指向常量const类型指针的指针\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<h4 id=\"auto和decltype\">auto和decltype<a class=\"anchor\" href=\"#auto和decltype\">#</a></h4>\n<ul>\n<li>auto类型由编译器分析表达式的类型</li>\n<li>当我们定义一个变量与某一表达式类型相同，但是不想用该表达式初始化该变量时使用。</li>\n<li>例：decltype (i)j = 2;//根据i的数据类型确定j的数据类型</li>\n</ul>\n<h2 id=\"第三章\">第三章<a class=\"anchor\" href=\"#第三章\">#</a></h2>\n<ul>\n<li>被调函数定义的位置放在主调函数之后，则必须在函数调用之前使用被调函数的原型说明；一定要声明之后编译器才知道后面出现了这个函数</li>\n<li>void addrat(int,int); void addrat(int a,int b);两种函数原型均可</li>\n<li>rand()返回一个伪随机数;void srand(unsigned int seed)为 rand 函数设置一个起始点，从而影响 rand 函数生成的随机数序列。</li>\n</ul>\n<h3 id=\"函数的参数传递\">函数的参数传递<a class=\"anchor\" href=\"#函数的参数传递\">#</a></h3>\n<ul>\n<li>函数调用时才分配形参储存单元</li>\n<li>实参类型必须与形参相符</li>\n<li>值传递是单向传递，无法修改实值；引用传递是双向传递</li>\n<li>常引用作参数可以保障实参数据的安全</li>\n<li>传递指针可以间接实现双向传递（值传递的特例）</li>\n<li><strong>指针形参的具体实现方式：在函数中创建一个新的指针变量，并将形参指针的值（即内存地址）赋值给新的指针变量，这两个变量实际指向同一块内存空间。在函数内部的操作全是对这个新的指针变量，如果改变所指对象的值，则对象的值改变；若改变指针值（即改变内存地址），则不影响实参指针</strong></li>\n<li>引用相当于对标识符取别名，声明一个引用时，<strong>必须同时对它进行初始化，指向一个已经存在的对象</strong>，相当于一个常量指针（<strong>Constant Pointer</strong>），不可以改变指向，但可以改变指向对象的值，同时引用并没有内存空间，因为并没有创建变量\n<ul>\n<li>实现双向传递通常使用引用传递，形参与实参共用一个内存空间</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"内联函数\">内联函数<a class=\"anchor\" href=\"#内联函数\">#</a></h3>\n<ul>\n<li>声明时使用关键字inline</li>\n<li>编译系统将程序中出现内联函数调用的地方用函数体进行替换。</li>\n<li>内联函数中<strong>不可以出现循环结构和switch语句</strong></li>\n<li>不加inline关键字的短小、频繁调用的函数也可能被编译器自动认为是内联函数；同样，加了inline关键字的函数也不一定就是内联函数（太过复杂就不是）</li>\n<li><strong>是否内联由编译器去决定</strong></li>\n</ul>\n<h3 id=\"constexpr函数\">constexpr函数<a class=\"anchor\" href=\"#constexpr函数\">#</a></h3>\n<ul>\n<li>能用于常量表达式的函数</li>\n<li><code>constexpr</code> 函数的函数体必须非常简单，通常只能包含一条 <code>return</code> 语句（C++14 放宽了限制）。</li>\n<li><strong><code>constexpr</code> 函数</strong>用于在编译时计算函数结果，适用于常量表达式和性能优化。</li>\n</ul>\n<h3 id=\"带默认形参的函数\">带默认形参的函数<a class=\"anchor\" href=\"#带默认形参的函数\">#</a></h3>\n<ul>\n<li><strong>有默认参数的形参必须放在形参列表最后</strong>，否则会造成歧义</li>\n</ul>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./4.png&#x22;,&#x22;alt&#x22;:&#x22;4&#x22;,&#x22;class&#x22;:&#x22;zoomable&#x22;,&#x22;index&#x22;:0}\"></p>\n<h3 id=\"函数重载\">函数重载<a class=\"anchor\" href=\"#函数重载\">#</a></h3>\n<ul>\n<li>形参类型不同或者形参个数不同</li>\n<li>注意如果没有完全匹配的重载函数，编译器会进行实参的数据类型隐式转换，以找到最佳匹配的函数，<strong>但此时可能会出现二义性</strong></li>\n<li>函数重载和默认参数同时使用，有可能引起二义性```\nvoid DrawCircle(int r=0,int x=0, int y=0);\nvoid DrawCircle(int r);</li>\n<li>函数返回类型不同不能作为重载条件</li>\n</ul>\n<h2 id=\"第四章\">第四章<a class=\"anchor\" href=\"#第四章\">#</a></h2>\n<ul>\n<li>只有在类实例化时，才能给类中的数据成员初始化</li>\n<li>访问权限可以任意顺序出现，但每个成员只能有一种访问属性</li>\n<li><code>public</code>任何外部函数都可以访问</li>\n<li><code>private</code>只允许本类中的函数及友元访问</li>\n<li><code>protected</code>只能被本类成员函数，派生类成员函数和友元访问。(<strong>与<code>private</code>差别在于继承过程中派生类能够访问)</strong></li>\n</ul>\n<h3 id=\"类的成员函数\">类的成员函数<a class=\"anchor\" href=\"#类的成员函数\">#</a></h3>\n<ul>\n<li>可以在类内声明，类外添加类名作用域实现；也可直接在类内给出函数体，形成内联成员函数</li>\n<li>允许声明重载函数和带默认形参值的函数</li>\n<li><strong>在类中定义的函数成员自动成为内联函数</strong>，在类外定义需要添加inline关键字（<strong>声明不写，定义时写inline</strong>）</li>\n<li>不能在函数原型处说明inline，否则编译器会处理为普通函数</li>\n</ul>\n<h3 id=\"构造函数\">构造函数<a class=\"anchor\" href=\"#构造函数\">#</a></h3>\n<ul>\n<li>\n<p>如果没有声明构造函数，编译器会自动生成默认构造函数，参数列表为空</p>\n</li>\n<li>\n<p>构造函数可以是内联函数、重载函数、带默认参数值的函数</p>\n</li>\n<li>\n<p>构造函数函数名与类名相同，且不指定返回值类型</p>\n</li>\n<li>\n<p>构造函数可以进行重载操作</p>\n</li>\n<li>\n<p>如果显式定义了构造函数，则编译器不再提供默认构造函数</p>\n</li>\n<li>\n<p>**无形参的构造函数称为默认构造函数，全部参数都有默认形参值的构造函数也是默认构造函数</p>\n</li>\n<li>\n<p>**成员初始化顺序与它们在类定义中的出现顺序一致，而不是在初始值中出现的顺序!早声明的先执行初始化</p>\n</li>\n<li>\n<p>const成员或引用成员必须将其初始化！</p>\n</li>\n<li>\n<p>委托构造函数：使用它所属类的其他构造函数执行自己的初始化过程</p>\n</li>\n<li>\n<p>拷贝构造函数：用一个已经存在的本类对象初始化新对象</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">类名 (</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> 类名</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> 对象名);</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//声明原型</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">类名::类 (</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> 类名</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> 对象名){</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//实现</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"类名 (const 类名&#x26; 对象名);//声明原型\n类名::类 (const 类名&#x26; 对象名){\n}//实现\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n</li>\n<li>\n<p>拷贝构造函数被调用的三种情况：</p>\n<ul>\n<li>定义新对象时以另一个对象为初始值</li>\n<li>函数的形参是类的对象，将使用实参对象初始化形参对象</li>\n<li>如果函数的返回值是类的对象，函数执行完成返回主调函数时，将使用return语句中的对象初始化一个临时无名对象，传递给主调函数，此时发生复制构造。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"析构函数\">析构函数<a class=\"anchor\" href=\"#析构函数\">#</a></h3>\n<ul>\n<li>析构函数是类的一个公有成员函数，可以写在类内，也可以写在类外</li>\n<li>析构函数不能有参数，<strong>不能重载</strong></li>\n</ul>\n<h3 id=\"移动构造函数不太可能考\">移动构造函数(不太可能考)<a class=\"anchor\" href=\"#移动构造函数不太可能考\">#</a></h3>\n<ul>\n<li>\n<p>对持久存在变量的引用称为左值引用，用&#x26;表示（即第3章引用类型）,对短暂存在可被移动的右值的引用称之为右值引用，用&#x26;&#x26;表示</p>\n</li>\n<li>\n<p>通过标准库<code>&#x3C;utility></code>中的<code>move</code>函数可将左值对象移动为右值</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">float</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 6</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">float</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">lr_n </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> //左值引用</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">float</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x26;&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">rr_n </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> //错误，右值引用不能绑定到左值</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">float</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x26;&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">rr_n </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> //右值表达式绑定到右值引用</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"float n = 6;\nfloat &#x26;lr_n = n; //左值引用\nfloat &#x26;&#x26;rr_n = n; //错误，右值引用不能绑定到左值\nfloat &#x26;&#x26;rr_n = n * n; //右值表达式绑定到右值引用\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n</li>\n</ul>\n<p>通过标准库<utility>中的move函数可将左值对象移动为右值\nfloat n = 10;\nfloat &#x26;&#x26;rr_n = std::move(n); //将n转化为右值</utility></p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">#include</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">&#x3C;utility></span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">class astring {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">public :</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">std::string s;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">astring</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (astring</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;&#x26;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> o) noexcept: </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">s</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">std::move</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(o.s))</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> //显式移动所有成员</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{ 函数体 }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//不分配新内存，被移动的对象不应再使用，避免多余复制操作，除非销毁或者重新赋值</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"\n#include<utility>\nclass astring {\npublic :\nstd::string s;\nastring (astring&#x26;&#x26; o) noexcept: s(std::move(o.s)) //显式移动所有成员\n{ 函数体 }\n\n}//不分配新内存，被移动的对象不应再使用，避免多余复制操作，除非销毁或者重新赋值\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<h3 id=\"default-delete-函数\">default 、delete 函数<a class=\"anchor\" href=\"#default-delete-函数\">#</a></h3>\n<ul>\n<li>\n<p>=default:要求编译器生成默认或拷贝构造函数</p>\n</li>\n<li>\n<p>=delete:要求编译器删除指定函数，除了析构函数之外都可以删除</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Mystr</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> default;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//默认无参构造函数</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Mystr</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(Mystr </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">str</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> default;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//默认拷贝构造函数</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Mystr</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(Mystr </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\">str</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> delete;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//删除拷贝构造函数 </span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"Mystr() = default;//默认无参构造函数\nMystr(Mystr &#x26;str) = default;//默认拷贝构造函数\nMystr(Mystr &#x26;str) = delete;//删除拷贝构造函数 \" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n</li>\n</ul>\n<h3 id=\"前向引用\">前向引用<a class=\"anchor\" href=\"#前向引用\">#</a></h3>\n<ul>\n<li><strong>前向引用并没有定义类，无法在提供完整定义类之前声明该对象，也不能再内联成员函数中使用该类，因为编译器不知道这个类的结构是怎样的，只知道存在这个类，不能涉及类的细节</strong></li>\n<li>仅仅进行前向声明而没有定义的类是不完整的，这样的类，只能用于**定义指针、引用、以及用于函数形参的指针和引用。</li>\n</ul>\n<h3 id=\"结构体\">结构体<a class=\"anchor\" href=\"#结构体\">#</a></h3>\n<ul>\n<li>结构体与类几乎完全相同，仅默认访问权限不同。class默认访问权限是private,而struct默认访问权限是public</li>\n</ul>\n<h3 id=\"联合体union\">联合体union<a class=\"anchor\" href=\"#联合体union\">#</a></h3>\n<ul>\n<li>成员共用相同的内存单元</li>\n<li>任何两个成员不会同时有效，只会取其一</li>\n</ul>\n<h3 id=\"枚举union\">枚举union<a class=\"anchor\" href=\"#枚举union\">#</a></h3>\n<ul>\n<li>\n<p>不限定作用域的枚举类型和限定作用域的枚举类型</p>\n</li>\n<li>\n<p>不能对枚举元素赋值，但可以声明时初始化</p>\n</li>\n<li>\n<p>枚举元素有默认值，依次为0,1,2,3,…</p>\n</li>\n<li>\n<p>枚举元素的作用域是全局的，会造成命名空间的污染</p>\n</li>\n<li>\n<p>枚举变量的值可以在运行时修改，但只能赋值为枚举类型中定义的枚举元素。枚举变量只能存储枚举类型中的枚举元素，不能直接赋值为整数（除非进行强制类型转换）。</p>\n</li>\n<li>\n<p>枚举类（限定作用域枚举）枚举类的枚举元素位于枚举类的作用域内，不会污染全局命名空间。- 枚举类的枚举元素不能隐式转换为整数，必须显式转换。可以显式指定枚举类的底层类型（如 <code>int</code>、<code>char</code> 等）。</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//enum 枚举类型名{枚举元素值(变量值) 列表};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">enum</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Weekday{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  sun,mon,tue,wed,thu,fri,sat</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">};</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//限定作用域枚举类</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">enum</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> class Weekday {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  SUN, MON, TUE</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">};</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">Weekday today </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Weekday::SUN;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">  // 必须使用作用域运算符 ::</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> day </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> static_cast</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;int></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(Weekday::SUN);</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">  // 显式转换为整数</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">enum</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> class Weekday : </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">char</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  SUN, MON, TUE</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">enum</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> class Color { RED, GREEN };</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">enum</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> class TrafficLight { RED, YELLOW, GREEN };</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">Color c </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Color::RED;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">  // 不会与 TrafficLight::RED 冲突</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"//enum 枚举类型名{枚举元素值(变量值) 列表};\nenum Weekday{\n  sun,mon,tue,wed,thu,fri,sat\n};\n//限定作用域枚举类\nenum class Weekday {\n  SUN, MON, TUE\n};\nWeekday today = Weekday::SUN;  // 必须使用作用域运算符 ::\nint day = static_cast<int>(Weekday::SUN);  // 显式转换为整数\nenum class Weekday : char {\n  SUN, MON, TUE\n};\nenum class Color { RED, GREEN };\nenum class TrafficLight { RED, YELLOW, GREEN };\nColor c = Color::RED;  // 不会与 TrafficLight::RED 冲突\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n</li>\n</ul>\n<h2 id=\"第五章\">第五章<a class=\"anchor\" href=\"#第五章\">#</a></h2>\n<h3 id=\"标识符的作用域和可见性\">标识符的作用域和可见性<a class=\"anchor\" href=\"#标识符的作用域和可见性\">#</a></h3>\n<ul>\n<li>函数原型的作用域在函数内</li>\n<li>局部作用域</li>\n<li>类作用域，包含类内和非内联成员函数的函数体。如果在类作用域以外访问类的成员，要通过<strong>类名（访问静态成员），或者该类的对象名、对象引用、对象指针（访问非静态成员）</strong>。</li>\n<li>文件作用域：如全局变量</li>\n<li>命名空间作用域：程序可以有多个命名空间，可以在不同命名空间中使用相同的命名而不混淆</li>\n</ul>\n<h3 id=\"生存期\">生存期<a class=\"anchor\" href=\"#生存期\">#</a></h3>\n<ul>\n<li>全局变量，静态局部变量（局部可见性）拥有静态生存期</li>\n<li>块作用域声明的，没有用static修饰的对象是动态生存期对象（局部生存期对象），不指定初值时，初值不确定</li>\n</ul>\n<h3 id=\"类的静态成员\">类的静态成员<a class=\"anchor\" href=\"#类的静态成员\">#</a></h3>\n<ul>\n<li>分为静态数据成员和静态成员函数</li>\n<li>不使用静态成员时：所有的类都各自有数据成员，共用一份成员函数(使用this指针来分辨哪个对象调用的)</li>\n<li>静态数据成员\n<ul>\n<li>static关键字声明</li>\n<li>所有该类的对象共享</li>\n<li>必须在类外定义和初始化,用::指明作用域</li>\n<li>可以是三种权限之一</li>\n</ul>\n</li>\n<li>静态成员函数\n<ul>\n<li>类外使用类名和作用域操作符来调用</li>\n<li>**只能引用该类的静态数据成员或者静态成员函数</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"类的友元\">类的友元<a class=\"anchor\" href=\"#类的友元\">#</a></h3>\n<ul>\n<li>友元函数和友元类</li>\n<li>友元函数能够通过对象名访问private和protect成员</li>\n<li>有两种形式的友元函数\n<ul>\n<li>一个不属于任何类的函数声明为当前类的友元，称为当前类的友元函数</li>\n<li>一个其他类的成员函数声明为当前类的友元，称为当前类的友元成员</li>\n</ul>\n</li>\n<li>友元函数声明可以放在public、private、protected的任意段中</li>\n<li>友元类：若一个类为另一个类的友元，则此类的所有成员函数都能访问对方类的<strong>私有成员</strong></li>\n<li><strong>友元关系不具有传递性，且是单向的</strong></li>\n</ul>\n<h3 id=\"共享数据的保护\">共享数据的保护<a class=\"anchor\" href=\"#共享数据的保护\">#</a></h3>\n<ul>\n<li>对于需要共享但不需要改变的数据应声明为const类型，不改变对象状态的成员函数声明为常函数</li>\n<li>const对象必须初始化</li>\n<li>常成员函数<code>类型说明符 函数名（参数表）const;</code></li>\n<li>**通过常对象只能调用它的常成员函数</li>\n<li>对于常数据成员，只能通过构造函数初始化列表方式初始化数据</li>\n<li>**常成员函数可以访问常对象中的数据成员，但仍然不允许修改常对象中数据成员的值（可访问变量但是只读）</li>\n<li>**特例mutable:被mutable修饰的变量，将永远处于可变的状态，即使在一个const函数中<code>mutalbe double len;//len可以永远被修改</code></li>\n</ul>\n<h2 id=\"第六章\">第六章<a class=\"anchor\" href=\"#第六章\">#</a></h2>\n<h3 id=\"数组\">数组<a class=\"anchor\" href=\"#数组\">#</a></h3>\n<ul>\n<li>数组名是一个地址常量，储存了数组首元素的内存的地址</li>\n<li>数组地址是连续的</li>\n<li>数组名作形参，对形参数组的改变会直接影响到实参数组。退化为了指针变量。</li>\n<li>静态数组（前面加static关键字）只初始化一次，对于大型数组可提高运行效率</li>\n</ul>\n<h3 id=\"指针\">指针<a class=\"anchor\" href=\"#指针\">#</a></h3>\n<ul>\n<li>直接访问：按变量名直接存取变量值；间接访问：通过存放变量地址的变量去访问变量</li>\n<li>空类型指针<code>void*</code>，表示不确定指向哪一种数据类型，使用时需要强制类型转换<code>p1 = (char *)p2;</code></li>\n<li>任何⼀个指针本身的数据值都是unsigned long int型。</li>\n<li>**指针常量(constant Pointer)，指针本身的值不变</li>\n<li>**常量指针（Pointer to constant)，指向常量数据类型</li>\n<li>指针具有算术运算和关系运算</li>\n</ul>\n<h3 id=\"输入整行字符串\">输入整行字符串<a class=\"anchor\" href=\"#输入整行字符串\">#</a></h3>\n<ul>\n<li><code>getline(cin,s)</code>输入到s中</li>\n<li><code>getline(cin,s2,','</code>第三个参数可以设置分隔符作为字符串结束的标志</li>\n</ul>\n<h3 id=\"指针数组\">指针数组<a class=\"anchor\" href=\"#指针数组\">#</a></h3>\n<ul>\n<li>由指针类型元素组成的数组</li>\n<li>指针作形参本质仍然是值传递</li>\n</ul>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./5.png&#x22;,&#x22;alt&#x22;:&#x22;5&#x22;,&#x22;class&#x22;:&#x22;zoomable&#x22;,&#x22;index&#x22;:0}\"></p>\n<h3 id=\"指针型函数\">指针型函数<a class=\"anchor\" href=\"#指针型函数\">#</a></h3>\n<ul>\n<li>函数的返回值是地址</li>\n<li>**不要将非静态局部地址用作函数的返回值，返回的指针要确保在主调函数中是有效、合法的地址。例如不要将局部定义的变量传回主调函数，此时局部变量已经不存在了</li>\n<li><code>int* function(){}</code></li>\n</ul>\n<h3 id=\"指向函数的指针\">指向函数的指针<a class=\"anchor\" href=\"#指向函数的指针\">#</a></h3>\n<ul>\n<li><code>返回值类型 (*functionPointer)(参数类型);</code></li>\n</ul>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">void</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">functionPointer)(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">float</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//指向函数的指针</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">functionPointer </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> printStuff;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//printStuff是已有函数</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">functionPointer</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(PI);</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//函数指针调用</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"void (*functionPointer)(float);//指向函数的指针\nfunctionPointer = printStuff;//printStuff是已有函数\nfunctionPointer(PI);//函数指针调用\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<h3 id=\"对象指针\">对象指针<a class=\"anchor\" href=\"#对象指针\">#</a></h3>\n<ul>\n<li><code>类名 *对象指针名</code></li>\n<li><code>Point *ptr;</code></li>\n</ul>\n<h3 id=\"this指针\">this指针<a class=\"anchor\" href=\"#this指针\">#</a></h3>\n<ul>\n<li>隐含于每一个类的成员函数中的特殊指针</li>\n<li>指出成员函数当前操作的数据所属的对象</li>\n</ul>\n<h3 id=\"指向类的非静态成员的指针\">指向类的非静态成员的指针<a class=\"anchor\" href=\"#指向类的非静态成员的指针\">#</a></h3>\n<ul>\n<li><code>类型说明符 类名::*类成员指针名;</code>声明指向类内数据成员的指针</li>\n<li><code>类成员指针名 = &#x26;类名::数据成员名;</code></li>\n<li>访问:<code>对象名.*类成员指针名</code>    <code>对象指针名->*类成员指针名</code></li>\n<li>指向函数：<code>类型说明符 (类名::*类成员指针名)(参数表);</code></li>\n<li>赋值<code>指针名=&#x26;类名::函数成员名;</code></li>\n<li>访问函数成员  <code>(对象名.*类成员指针名)(参数表)</code>   <code>(对象指针名->*类成员指针名)(参数表)</code></li>\n</ul>\n<h3 id=\"指向类的静态成员函数\">指向类的静态成员函数<a class=\"anchor\" href=\"#指向类的静态成员函数\">#</a></h3>\n<ul>\n<li>不用依赖于具体的对象调用，直接用<strong>普通指针</strong>实现</li>\n</ul>\n<h3 id=\"new-delete\">new delete<a class=\"anchor\" href=\"#new-delete\">#</a></h3>\n<ul>\n<li>new 数据类型（初始化参数列表）</li>\n<li>delete 指针名</li>\n<li>new 类型名T [ 数组长度 ]</li>\n<li>**delete[] 数组名p</li>\n<li><code>new 类型名T[第1维长度][第2维长度]....</code></li>\n</ul>\n<h3 id=\"vector\">vector<a class=\"anchor\" href=\"#vector\">#</a></h3>\n<ul>\n<li>表示对数组元素的引用，vector数组对象名不表示数组的首地址</li>\n</ul>\n<h3 id=\"浅拷贝深拷贝\">浅拷贝、深拷贝<a class=\"anchor\" href=\"#浅拷贝深拷贝\">#</a></h3>\n<ul>\n<li>浅拷贝：仅复制指针的地址，导致指向同一块内存空间</li>\n<li>深拷贝：重新新建一块内存空间</li>\n</ul>\n<h2 id=\"第七章\">第七章<a class=\"anchor\" href=\"#第七章\">#</a></h2>\n<ul>\n<li>**派生类不能继承基类的构造函数和析构函数</li>\n<li>如果派生类声明了一个和某基类成员同名的新成员（如果是成员函数，则参数表也要相同，参数不同的情况属于重载），**派生的新成员就覆盖了外层同名成员</li>\n</ul>\n<h3 id=\"访问控制\">访问控制<a class=\"anchor\" href=\"#访问控制\">#</a></h3>\n<ul>\n<li>不同继承方式的影响：1.派生类成员对基类成员的访问权限 2.通过派生类对象对基类成员的访问控制</li>\n<li><strong>public继承</strong>:\n<ul>\n<li>基类的public和protected成员的访问属性在派生类中保持不变，但基类的private成员不可直接访问。</li>\n<li>派生类中的成员函数可以直接访问基类中的public和protected成员，但不能直接访问基类的private成员。</li>\n<li>通过派生类的对象只能访问基类的public成员</li>\n</ul>\n</li>\n<li><strong>protected继承</strong>：\n<ul>\n<li>基类的public和protected成员都以protected身份出现在派生类中，但基类的private成员不可直接访问</li>\n<li>派生类中的成员函数可以直接访问基类中的public和protected成员，但不能直接访问基类的private成员。</li>\n<li>通过派生类的对象不能直接访问基类中的任何成员</li>\n</ul>\n</li>\n<li><strong>private继承</strong>：\n<ul>\n<li>基类的public和protected成员都以private身份出现在派生类中，但基类的private成员不可直接访问。</li>\n<li>派生类中的成员函数可以直接访问基类中的public和protected成员，但不能直接访问基类的private成员。</li>\n<li>通过派生类的对象不能直接访问基类中的任何成员。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"类型兼容原则\">类型兼容原则<a class=\"anchor\" href=\"#类型兼容原则\">#</a></h3>\n<ul>\n<li>一个公有派生类对象在使用上可以被作为基类的对象\n<ul>\n<li>可以隐含转换为基类对象</li>\n<li>派生类对象可以初始化基类的引用</li>\n<li>派生类的指针可以隐含转换基类的指针</li>\n</ul>\n</li>\n<li>通过基类对象名、指针只能使用从基类继承的成员</li>\n</ul>\n<h3 id=\"派生类的构造和析构函数\">派生类的构造和析构函数<a class=\"anchor\" href=\"#派生类的构造和析构函数\">#</a></h3>\n<ul>\n<li>\n<p>只需要对本类中新增成员进行初始化，继承而来的基类对象可以自动调用基类构造函数完成</p>\n</li>\n<li>\n<p>派生类的构造函数需要给基类的构造函数传参</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//单继承</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">派生类名::派生类名(基类所需的形参，本类成员所需的形参):基类名(参数表), 本类成员初始化列表</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//其他初始化；</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}；</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//多继承</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">派生类名::派生类名(参数表):基类名1(基类1初始化参数</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">表), 基类名2(基类2初始化参数表), ...基类名n(基类n初始化</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">参数表), 本类成员初始化列表</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//其他初始化；</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}；</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">C::</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">C</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> i</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">,</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> j</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">): </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">B</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(i), </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">c</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(j){</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">cout </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"C's constructor called.\"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> endl;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//C是派生类，B是基类，传递i给B的构造函数,c是新增变量</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"//单继承\n派生类名::派生类名(基类所需的形参，本类成员所需的形参):基类名(参数表), 本类成员初始化列表\n\n{\n\n//其他初始化；\n\n}；\n//多继承\n派生类名::派生类名(参数表):基类名1(基类1初始化参数\n\n表), 基类名2(基类2初始化参数表), ...基类名n(基类n初始化\n\n参数表), 本类成员初始化列表\n\n{\n\n//其他初始化；\n\n}；\n\nC::C(int i,int j): B(i), c(j){\n\ncout << &#x22;C&#x27;s constructor called.&#x22; << endl;\n\n}//C是派生类，B是基类，传递i给B的构造函数,c是新增变量\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n</li>\n</ul>\n<h3 id=\"构造析构函数的调用顺序\">构造、析构函数的调用顺序<a class=\"anchor\" href=\"#构造析构函数的调用顺序\">#</a></h3>\n<ul>\n<li>先调用基类的构造函数，按照**继承时声明的顺序</li>\n<li>本类成员初始化，按照在**类中的声明顺序</li>\n<li>析构函数与构造函数调用顺序相反</li>\n</ul>\n<h3 id=\"作用域分辨符\">作用域分辨符<a class=\"anchor\" href=\"#作用域分辨符\">#</a></h3>\n<ul>\n<li>基类和派生类有相同成员时，通过派生类对象调用的是派生类中的同名成员</li>\n<li>如果要通过派生类对象访问基类同名成员，需要加上作用域</li>\n<li>二义性问题可以通过限定类名解决，也可以虚基类、虚函数解决</li>\n</ul>\n<h3 id=\"虚基类\">虚基类<a class=\"anchor\" href=\"#虚基类\">#</a></h3>\n<ul>\n<li>解决多继承（菱形继承）时可能发生的对同一基类继承多次而产生的二义性问题.</li>\n<li>虚基类的成员是由最派生类的构造函数通过调用虚基类的构造函数进行初始化的。</li>\n<li>在整个继承结构中，直接或间接继承虚基类的所有派生类，都必须在构造函数的成员初始化表中给出对虚基类的构造函数的调用。如果未列出，则表示调用该虚基类的默认构造函数。</li>\n<li>在建立对象时，只有最派生类的构造函数调用虚基类的构造函数，该派生类的其他基类对虚基类构造函数的调用被忽略。</li>\n</ul>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">#include</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> &#x3C;iostream></span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">using namespace std;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">// 虚基类</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">class A {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">public:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> data;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    A</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> value) : </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">data</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(value) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        cout </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"A constructed with value: \"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> value </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> endl;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">};</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">// 中间类 B，虚继承 A</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">class B : virtual public A {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">public:</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    B</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> value) : </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">A</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(value) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        cout </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"B constructed\"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> endl;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">// 中间类 C，虚继承 A</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">class C : virtual public A {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">public:</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    C</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> value) : </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">A</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(value) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        cout </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"C constructed\"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> endl;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">// 最远派生类 D，继承 B 和 C</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">class D : public B, public C {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">public:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">    // D 的构造函数需要显式初始化虚基类 A</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">    //最远派生类负责调用A的构造函数，保证只有一个A</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">    //先调用虚基类构造，再是直接基类，最后自身</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    D</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> value) : </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">A</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(value), </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">B</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(value), </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">C</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(value) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        cout </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"D constructed\"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> endl;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    D </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">d</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">10</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> // 创建 D 的对象</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    cout </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"Data in D: \"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> d.data </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> endl;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> // 输出 10</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    return</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"\n#include <iostream>\nusing namespace std;\n// 虚基类\nclass A {\npublic:\n    int data;\n    A(int value) : data(value) {\n        cout << &#x22;A constructed with value: &#x22; << value << endl;\n    }\n};\n// 中间类 B，虚继承 A\nclass B : virtual public A {\npublic:\n    B(int value) : A(value) {\n        cout << &#x22;B constructed&#x22; << endl;\n    }\n};\n\n// 中间类 C，虚继承 A\nclass C : virtual public A {\npublic:\n    C(int value) : A(value) {\n        cout << &#x22;C constructed&#x22; << endl;\n    }\n};\n\n// 最远派生类 D，继承 B 和 C\nclass D : public B, public C {\npublic:\n    // D 的构造函数需要显式初始化虚基类 A\n    //最远派生类负责调用A的构造函数，保证只有一个A\n    //先调用虚基类构造，再是直接基类，最后自身\n    D(int value) : A(value), B(value), C(value) {\n        cout << &#x22;D constructed&#x22; << endl;\n    }\n};\n\nint main() {\n    D d(10); // 创建 D 的对象\n    cout << &#x22;Data in D: &#x22; << d.data << endl; // 输出 10\n    return 0;\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<h2 id=\"第八章-多态\">第八章 多态<a class=\"anchor\" href=\"#第八章-多态\">#</a></h2>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./6.png&#x22;,&#x22;alt&#x22;:&#x22;6&#x22;,&#x22;class&#x22;:&#x22;zoomable&#x22;,&#x22;index&#x22;:0}\"></p>\n<ul>\n<li>编译时动态和运行时多态的本质就是静态类型检查和动态类型检查。</li>\n<li>**基态指针指向派生类对象是一种动态多态</li>\n<li><strong>基类指针可以指向派生类对象，但仍然调用的是基类成员函数</strong>：但是由于编译时多态的原因，编译器不知道指针指向的对象已经重写了该成员函数</li>\n<li>可以使用**虚函数</li>\n</ul>\n<h3 id=\"运算符重载\">运算符重载<a class=\"anchor\" href=\"#运算符重载\">#</a></h3>\n<ul>\n<li>运算符重载是对已有运算符赋予多重含义，并**没有新增运算符</li>\n<li><strong>有部分运算符不能重载</strong>，不能重载的运算符举例：`“.”、“.*”、“::”、“?:”、sizeof</li>\n<li>以下运算符**只允许用成员函数重载：<code>= ( ) [ ] new delete</code></li>\n<li>重载之后运算符的优先级和结合性都不会改变</li>\n<li>两种重载方式：<strong>重载为类的非静态成员函数和重载为非成员函数。</strong></li>\n<li>重载为非成员函数可以使用<strong>友元访问类的保护和私有成员，与成员函数的区别在于：成员函数有this指针，而友元函数没有this指针</strong></li>\n<li>一元运算符重载时：<strong>使用成员函数不必传入对象(有this指针)，而友元函数需要显示传入对象</strong></li>\n<li>二元运算符重载时：<strong>成员函数仅需要传入一个参数，而友元函数需要传入两个函数</strong></li>\n<li>重载的运算符函数 operator = <strong>不能被继承，且必须是成员函数</strong></li>\n<li><strong>拷贝函数用于创建一个新对象</strong>，赋值运算符是改变一个已存在的对象的值</li>\n</ul>\n<h3 id=\"虚函数\">虚函数<a class=\"anchor\" href=\"#虚函数\">#</a></h3>\n<ul>\n<li><strong>虚函数必须是非静态的成员函数,内联成员函数不能定义为虚函数</strong></li>\n<li>构造函数<strong>不能</strong>是虚函数，析构函数<strong>可以是</strong>虚函数</li>\n<li><strong>只有通过基类指针或引用，才能通过虚函数调用派生类对应函数</strong></li>\n<li>在派生类中可以对基类中的成员函数进行覆盖（重定义）</li>\n<li><strong>每个多态类有一个虚表（virtual table),虚表中有当前类的各个虚函数的入口地址,每个对象有一个指向当前类的虚表的指针（虚指针vptr）</strong></li>\n<li><strong>构造函数中为对象的虚指针赋值</strong>,通过多态类型的指针或引用调用成员函数时，通过虚指针找到虚表，进而找到所调用的虚函数的入口地址,通过该入口地址调用虚函数</li>\n<li>派生类可以不显式地用virtual声明虚函数,编译器会根据函数名称、参数个数、对应参数类型、const限定符是否相同</li>\n<li>派生类中的虚函数还会隐藏基类中同名函数的所有其它重载形式。<strong>先查找派生类的作用域</strong>，如果找到同名函数，就不再查找基类的作用域。适用于**成员函数、静态函数和虚函数。</li>\n<li><code>override</code>关键字标记派生类中的虚函数，如果没有覆盖已经存在的虚函数，就会报错</li>\n<li><code>final</code>用于标记某个函数，则该函数不能再被它的派生类覆盖，否则编译器报错。</li>\n</ul>\n<h3 id=\"纯虚函数和抽象类\">纯虚函数和抽象类<a class=\"anchor\" href=\"#纯虚函数和抽象类\">#</a></h3>\n<ul>\n<li>纯虚函数<code>virtual 函数类型 函数名(参数表) = 0;</code></li>\n<li>具有纯虚函数的类成为抽象类，**只能作为基类使用，不能实例化对象</li>\n</ul>\n<h2 id=\"第九章-模板\">第九章 模板<a class=\"anchor\" href=\"#第九章-模板\">#</a></h2>\n<h3 id=\"1函数模板\">1. <strong>函数模板</strong><a class=\"anchor\" href=\"#1函数模板\">#</a></h3>\n<p>函数模板允许定义一个通用的函数，可以用于多种数据类型。</p>\n<h4 id=\"语法\">语法<a class=\"anchor\" href=\"#语法\">#</a></h4>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">template </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">typename T</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">返回类型 函数名(参数列表) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">    // 函数体</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"template <typename T>\n返回类型 函数名(参数列表) {\n    // 函数体\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<ul>\n<li>\n<p><code>template &#x3C;typename T></code>：声明一个模板，<code>T</code> 是模板参数，表示任意类型。</p>\n</li>\n<li>\n<p><code>typename</code> 可以用 <code>class</code> 替换，两者在模板中含义相同。</p>\n</li>\n<li>\n<p><strong>函数模板可以使用自动类型推导，优先调用普通函数，普通函数无法实现再调用函数模板</strong>，函数模板也可以发生重载，但模板T不能有默认参数</p>\n<h4 id=\"示例通用的max函数\">示例：通用的 <code>max</code> 函数<a class=\"anchor\" href=\"#示例通用的max函数\">#</a></h4>\n</li>\n</ul>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">#include</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> &#x3C;iostream></span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">// 定义函数模板</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">template</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> &#x3C;</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">typename</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> T</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">T</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> max</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">T</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> a</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">T</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> b</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    return</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (a </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> b) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">?</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">:</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> b;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::cout </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> max</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">3</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">5</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::endl;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">         // 输出 5</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::cout </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> max</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">3.14</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2.71</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::endl;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">   // 输出 3.14</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::cout </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> max</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">'a'</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">'z'</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::endl;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">     // 输出 z</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    return</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"#include <iostream>\n// 定义函数模板\ntemplate <typename T>\nT max(T a, T b) {\n    return (a > b) ? a : b;\n}\n\nint main() {\n    std::cout << max(3, 5) << std::endl;         // 输出 5\n    std::cout << max(3.14, 2.71) << std::endl;   // 输出 3.14\n    std::cout << max(&#x27;a&#x27;, &#x27;z&#x27;) << std::endl;     // 输出 z\n    return 0;\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<hr>\n<h3 id=\"2类模板\">2. <strong>类模板</strong><a class=\"anchor\" href=\"#2类模板\">#</a></h3>\n<p>类模板允许定义一个通用的类，可以用于多种数据类型。</p>\n<h4 id=\"语法-1\">语法<a class=\"anchor\" href=\"#语法-1\">#</a></h4>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">template</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> &#x3C;</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">typename</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> T</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">class</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> 类名 {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">    // 类成员</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">};</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"template <typename T>\nclass 类名 {\n    // 类成员\n};\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<ul>\n<li><code>template &#x3C;typename T></code>：声明一个模板，<code>T</code> 是模板参数，表示任意类型。</li>\n<li>类模板的成员函数可以在类内定义（隐式内联），也可以在类外定义。</li>\n<li><strong>类模板不能使用自动类型推导，必须显示指定类型</strong></li>\n<li><strong>类模板中成员函数在调用时才创建</strong></li>\n</ul>\n<h4 id=\"示例通用的box类\">示例：通用的 <code>Box</code> 类<a class=\"anchor\" href=\"#示例通用的box类\">#</a></h4>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">#include</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> &#x3C;iostream></span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">// 定义类模板</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">template</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> &#x3C;</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">typename</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> T</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">class</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Box</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">private:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    T value;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">public:</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    Box</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">T</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> v</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) : </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">value</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(v) {}</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    T</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> getValue</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        return</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> value;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    Box</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;int></span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> intBox</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">42</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    Box</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::string</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">></span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> strBox</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"Hello, Templates!\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::cout </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> intBox.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">getValue</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::endl;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">  // 输出 42</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::cout </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> strBox.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">getValue</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::endl;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">  // 输出 Hello, Templates!</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    return</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"#include <iostream>\n// 定义类模板\ntemplate <typename T>\nclass Box {\nprivate:\n    T value;\npublic:\n    Box(T v) : value(v) {}\n    T getValue() const {\n        return value;\n    }\n};\n\nint main() {\n    Box<int> intBox(42);\n    Box<std::string> strBox(&#x22;Hello, Templates!&#x22;);\n\n    std::cout << intBox.getValue() << std::endl;  // 输出 42\n    std::cout << strBox.getValue() << std::endl;  // 输出 Hello, Templates!\n    return 0;\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<hr>\n<h3 id=\"3模板参数\">3. <strong>模板参数</strong><a class=\"anchor\" href=\"#3模板参数\">#</a></h3>\n<p>模板参数可以是类型参数（如 <code>typename T</code>），也可以是非类型参数（如整数、指针等）。</p>\n<h4 id=\"示例非类型模板参数\">示例：非类型模板参数<a class=\"anchor\" href=\"#示例非类型模板参数\">#</a></h4>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">#include</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> &#x3C;iostream></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">// 非类型模板参数（整数）</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">template</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> &#x3C;</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">typename</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> T</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> size</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">class</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Array</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">private:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    T data[size];</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">public:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    void</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> set</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> index</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">T</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> value</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        data[index] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> value;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    T</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> get</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> index</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        return</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> data[index];</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    Array</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">5</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> intArray;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    intArray.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">set</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">10</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::cout </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> intArray.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">get</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::endl;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">  // 输出 10</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    return</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"#include <iostream>\n\n// 非类型模板参数（整数）\ntemplate <typename T, int size>\nclass Array {\nprivate:\n    T data[size];\npublic:\n    void set(int index, T value) {\n        data[index] = value;\n    }\n    T get(int index) const {\n        return data[index];\n    }\n};\n\nint main() {\n    Array<int, 5> intArray;\n    intArray.set(0, 10);\n    std::cout << intArray.get(0) << std::endl;  // 输出 10\n    return 0;\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<hr>\n<h3 id=\"4模板特化\">4. <strong>模板特化</strong><a class=\"anchor\" href=\"#4模板特化\">#</a></h3>\n<p>模板特化允许为特定类型提供特殊的实现。</p>\n<h4 id=\"示例函数模板特化重载\">示例：函数模板特化（重载）<a class=\"anchor\" href=\"#示例函数模板特化重载\">#</a></h4>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">#include</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> &#x3C;iostream></span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">// 通用模板</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">template</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> &#x3C;</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">typename</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> T</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">void</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> print</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">T</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> value</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::cout </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"Generic: \"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> value </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::endl;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">// 特化版本（针对 const char*）</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">template</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> &#x3C;></span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">void</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> print</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> char*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">>(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> char*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> value) {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::cout </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"Specialized: \"</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> value </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::endl;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    print</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">42</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">              // 输出 Generic: 42</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    print</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"Hello, World!\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> // 输出 Specialized: Hello, World!</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    return</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"#include <iostream>\n// 通用模板\ntemplate <typename T>\nvoid print(T value) {\n    std::cout << &#x22;Generic: &#x22; << value << std::endl;\n}\n\n// 特化版本（针对 const char*）\ntemplate <>\nvoid print<const char*>(const char* value) {\n    std::cout << &#x22;Specialized: &#x22; << value << std::endl;\n}\n\nint main() {\n    print(42);              // 输出 Generic: 42\n    print(&#x22;Hello, World!&#x22;); // 输出 Specialized: Hello, World!\n    return 0;\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<hr>\n<h3 id=\"5类模板的默认参数\">5. <strong>类模板的默认参数</strong><a class=\"anchor\" href=\"#5类模板的默认参数\">#</a></h3>\n<p>可以为类模板参数指定默认值。</p>\n<h4 id=\"示例类模板的默认参数\">示例：类模板的默认参数<a class=\"anchor\" href=\"#示例类模板的默认参数\">#</a></h4>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">#include</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> &#x3C;iostream></span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">template</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> &#x3C;</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">typename</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> T</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> int, </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> size</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 10</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">class</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Array</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">private:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    T data[size];</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">public:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    void</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> set</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> index</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">T</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> value</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">        data[index] </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> value;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    T</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> get</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#E36209;--shiki-dark:#FFAB70\"> index</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">        return</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> data[index];</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    Array</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> intArray;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> // 使用默认参数 T=int, size=10</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    intArray.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">set</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">42</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">    std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::cout </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> intArray.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">get</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> std</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">::endl;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\">  // 输出 42</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">    return</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">cpp</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"#include <iostream>\ntemplate <typename T = int, int size = 10>\nclass Array {\nprivate:\n    T data[size];\npublic:\n    void set(int index, T value) {\n        data[index] = value;\n    }\n    T get(int index) const {\n        return data[index];\n    }\n};\n\nint main() {\n    Array<> intArray; // 使用默认参数 T=int, size=10\n    intArray.set(0, 42);\n    std::cout << intArray.get(0) << std::endl;  // 输出 42\n    return 0;\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n<h2 id=\"第十章-泛型程序设计与stl\">第十章 泛型程序设计与STL<a class=\"anchor\" href=\"#第十章-泛型程序设计与stl\">#</a></h2>\n<ul>\n<li>\n<p>STL基本组件：容器（container）、迭代器（iterator）、函数对象（function object）、算法（algorithms）</p>\n</li>\n<li>\n<p><strong>Iterators（迭代器）是算法和容器的桥梁。算法不直接操作容器中的数据，而是通过迭代器间接操作。</strong> 将迭代器作为算法的参数、通过迭代器来访问容器而不是把容器直接作为算法的参数</p>\n</li>\n<li>\n<p>函数对象（function object）：一个行为类似函数的对象，对它可以像调用函数一样调用</p>\n<ul>\n<li>\n<p>普通函数就是函数对象</p>\n</li>\n<li>\n<p>重载了“()”运算符的类的实例是函数对象</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">#include</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> &#x3C;iostream></span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">#include</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> &#x3C;numeric></span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">using namespace std;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">class MultClass {</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> //定义MultClass类</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">public:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> operator</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() (</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x, </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> y) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> { </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">return</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">*</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> y; }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//重载操作符operator()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">[]</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> =</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> { </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">3</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">4</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">5</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> };</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">const</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> N </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">=</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> sizeof</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(a) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">/</span><span style=\"color:#D73A49;--shiki-dark:#F97583\"> sizeof</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">cout </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"The result by multipling all elements in a is \"</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> accumulate</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(a, a </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">+</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> N, </span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">1</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">, </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">MultClass</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> endl;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#6A737D\">//将类multclass传递给通用算法</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">return</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"#include <iostream>\n#include <numeric>\nusing namespace std;\n\nclass MultClass { //定义MultClass类\npublic:\nint operator() (int x, int y) const { return x * y; }\n//重载操作符operator()\n};\n\nint main() {\nint a[] = { 1, 2, 3, 4, 5 };\nconst int N = sizeof(a) / sizeof(int);\ncout << &#x22;The result by multipling all elements in a is &#x22;\n<< accumulate(a, a + N, 1, MultClass()) << endl;\n//将类multclass传递给通用算法\nreturn 0;\n}\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n</li>\n</ul>\n</li>\n</ul>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./7.png&#x22;,&#x22;alt&#x22;:&#x22;7&#x22;,&#x22;class&#x22;:&#x22;zoomable&#x22;,&#x22;index&#x22;:0}\"></p>\n<h2 id=\"第十一章-流类库\">第十一章 流类库<a class=\"anchor\" href=\"#第十一章-流类库\">#</a></h2>\n<h3 id=\"1io流的概念及流类库结构\">1. <strong>I/O流的概念及流类库结构</strong><a class=\"anchor\" href=\"#1io流的概念及流类库结构\">#</a></h3>\n<ul>\n<li>\n<p><strong>流的概念</strong>：流是数据在生产者（如文件、键盘）和消费者（如程序、屏幕）之间流动的抽象。程序通过流对象与文件或设备进行交互。</p>\n</li>\n<li>\n<p><strong>流类库结构</strong>：</p>\n<ul>\n<li><strong>抽象流基类</strong>：<code>ios</code>是所有流类的基类。</li>\n<li><strong>输入流类</strong>：<code>istream</code>（通用输入流）、<code>ifstream</code>（文件输入流）、<code>istringstream</code>（字符串输入流）。</li>\n<li><strong>输出流类</strong>：<code>ostream</code>（通用输出流）、<code>ofstream</code>（文件输出流）、<code>ostringstream</code>（字符串输出流）。</li>\n<li><strong>输入/输出流类</strong>：<code>iostream</code>（通用输入/输出流）、<code>fstream</code>（文件输入/输出流）、<code>stringstream</code>（字符串输入/输出流）。</li>\n<li><strong>流缓冲区类</strong>：<code>streambuf</code>（抽象流缓冲区基类）、<code>filebuf</code>（磁盘文件流缓冲区）、<code>stringbuf</code>（字符串流缓冲区）。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"2输出流\">2. <strong>输出流</strong><a class=\"anchor\" href=\"#2输出流\">#</a></h3>\n<ul>\n<li>\n<p><strong>主要输出流对象</strong>：</p>\n<ul>\n<li><code>cout</code>：标准输出流，通常用于向屏幕输出。</li>\n<li><code>cerr</code>：标准错误输出流，无缓冲，立即输出。</li>\n<li><code>clog</code>：标准错误输出流，有缓冲，缓冲区满时输出。</li>\n</ul>\n</li>\n<li>\n<p><strong>文件输出流</strong>：</p>\n<ul>\n<li>\n<p><code>ofstream</code>：用于向文件输出数据。可以通过构造函数或<code>open</code>函数打开文件。</p>\n</li>\n<li>\n<p>示例：</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  ofstream </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">myFile</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"filename\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  myFile </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"Hello, World!\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">  myFile.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">close</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">();</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"  ofstream myFile(&#x22;filename&#x22;);\n  myFile << &#x22;Hello, World!&#x22;;\n  myFile.close();\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>输出格式控制</strong>：</p>\n<ul>\n<li>\n<p><strong>操纵符</strong>：如<code>setw</code>（设置输出宽度）、<code>setprecision</code>（设置浮点数精度）、<code>setiosflags</code>（设置对齐方式等）。</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">cout </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> setw</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">10</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> setiosflags</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(ios_base::left)</span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">setprecision</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\">2</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">) </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 3.14159</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> // 输出宽度为10，精度为2,左对齐，不指定fixed或scientific，精度值表示有效数字的位数,若指定了则是小数点后的位数</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"cout << setw(10) << setiosflags(ios_base::left)<<setprecision(2) << 3.14159; // 输出宽度为10，精度为2,左对齐，不指定fixed或scientific，精度值表示有效数字的位数,若指定了则是小数点后的位数\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"3输入流\">3. <strong>输入流</strong><a class=\"anchor\" href=\"#3输入流\">#</a></h3>\n<ul>\n<li>\n<p><strong>主要输入流对象</strong>：</p>\n<ul>\n<li>\n<p><code>cin</code>：标准输入流，通常用于从键盘输入。</p>\n</li>\n<li>\n<p><code>ifstream</code>：文件输入流，用于从文件读取数据。</p>\n</li>\n<li>\n<p><code>istringstream</code>：字符串输入流，用于从字符串读取数据。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>提取运算符</strong>：</p>\n<ul>\n<li><code>>></code>：用于从输入流中提取数据，默认以空白符为分隔符。</li>\n</ul>\n</li>\n<li>\n<p><strong>输入流相关函数</strong>：</p>\n<ul>\n<li>\n<p><code>get()</code>：读取单个字符，包括空白符。</p>\n</li>\n<li>\n<p><code>getline()</code>：读取一行数据，可以指定终止字符。</p>\n</li>\n<li>\n<p><code>read()</code>：从文件中读取二进制数据到内存。</p>\n<ul>\n<li><code>istream&#x26; read(char* buffer, streamsize size);</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>文件输入流</strong>：</p>\n<ul>\n<li>\n<p><code>ifstream</code>：用于从文件读取数据。可以通过构造函数或<code>open</code>函数打开文件。</p>\n</li>\n<li>\n<p><code>ios_base::binary</code>以二进制方式读取数据</p>\n</li>\n<li>\n<p>示例：</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">ifstream </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">myFile</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(</span><span style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"filename\"</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">string line;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">while</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">getline</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">(myFile, line)) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">    cout </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> line </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> endl;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">myFile.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">close</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">();</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"ifstream myFile(&#x22;filename&#x22;);\nstring line;\nwhile (getline(myFile, line)) {\n    cout << line << endl;\n}\nmyFile.close();\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"4输入输出流\">4. <strong>输入/输出流</strong><a class=\"anchor\" href=\"#4输入输出流\">#</a></h3>\n<ul>\n<li>\n<p><strong><code>fstream</code></strong>：同时支持文件的输入和输出操作。</p>\n</li>\n<li>\n<p><strong><code>stringstream</code></strong>：用于字符串的输入和输出，常用于数据类型转换。</p>\n<ul>\n<li>\n<p>示例：</p>\n<div class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><pre><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">stringstream ss;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">ss </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;</span><span style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 123</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F97583\">int</span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> value;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#E1E4E8\">ss </span><span style=\"color:#D73A49;--shiki-dark:#F97583\">>></span><span style=\"color:#24292E;--shiki-dark:#E1E4E8\"> value;</span><span style=\"color:#6A737D;--shiki-dark:#6A737D\"> // value = 123</span></span></code></pre><span class=\"language ps-1 pe-3 text-sm bg-muted text-muted-foreground\">c</span><button class=\"copy text-muted-foreground p-1 box-content border rounded bg-primary-foreground\" data-code=\"stringstream ss;\nss << 123;\nint value;\nss >> value; // value = 123\" onclick=\"\n          navigator.clipboard.writeText(this.dataset.code);\n          this.classList.add(&#x27;copied&#x27;);\n          setTimeout(() => this.classList.remove(&#x27;copied&#x27;), 2000)\n        \"><div class=\"ready\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-clipboard-line\"></use></svg></div><div class=\"success hidden\"><svg class=\"size-5\"><use href=\"/icons/code.svg#mingcute-file-check-line\"></use></svg></div></button></div>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第十二章-异常处理\">第十二章 异常处理<a class=\"anchor\" href=\"#第十二章-异常处理\">#</a></h2>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./8.png&#x22;,&#x22;alt&#x22;:&#x22;8&#x22;,&#x22;class&#x22;:&#x22;zoomable&#x22;,&#x22;index&#x22;:0}\"></p>\n<ul>\n<li>若有异常则通过throw操作创建一个异常对象并抛掷。</li>\n<li>**如果抛出异常后没有catch捕获，程序会调用 <code>std::terminate</code>，默认行为是终止程序。</li>\n<li>将可能抛出异常的程序段嵌在try块之中。控制通过正常的顺序执行到达try语句，然后执行try块内的保护段。</li>\n<li><strong>如果在保护段执行期间没有引起异常，那么跟在try块后的catch子句就不执行。程序从try块后跟随的最后一个catch子句后面的语句继续执行下去。</strong></li>\n</ul>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./9.png&#x22;,&#x22;alt&#x22;:&#x22;9&#x22;,&#x22;class&#x22;:&#x22;zoomable&#x22;,&#x22;index&#x22;:0}\"></p>\n<h3 id=\"异常处理中的构造与析构\">异常处理中的构造与析构<a class=\"anchor\" href=\"#异常处理中的构造与析构\">#</a></h3>\n<ul>\n<li>初始化异常参数。</li>\n<li>将从对应的try块开始到异常被抛掷处之间构造（且尚未析构）的所有自动对象进行析构。</li>\n<li>从最后一个catch处理之后开始恢复执行。</li>\n</ul>",{headings:444,localImagePaths:633,remoteImagePaths:634,frontmatter:635,imagePaths:640},[445,447,449,453,456,458,461,463,466,468,471,473,475,477,479,481,483,485,487,489,491,493,496,499,501,503,505,507,509,511,513,515,517,519,521,523,525,527,529,531,533,535,537,539,541,544,546,549,551,553,555,557,560,562,564,567,569,571,573,576,579,581,584,587,589,592,595,598,601,604,607,610,613,616,619,622,625,628,631],{depth:32,slug:446,text:446},"第二章",{depth:39,slug:448,text:448},"不同数据类型的转换",{depth:450,slug:451,text:452},4,"短-长","短->长",{depth:450,slug:454,text:455},"长-短","长->短",{depth:39,slug:457,text:457},"数据类型显示转换",{depth:39,slug:459,text:460},"简单io格式控制","简单IO格式控制",{depth:39,slug:462,text:462},"简单控制语句",{depth:464,slug:465,text:465},5,"switch",{depth:450,slug:467,text:467},"typedef声明",{depth:450,slug:469,text:470},"typedef-----c11新用法","typedef-----C++11新用法",{depth:450,slug:472,text:472},"auto和decltype",{depth:32,slug:474,text:474},"第三章",{depth:39,slug:476,text:476},"函数的参数传递",{depth:39,slug:478,text:478},"内联函数",{depth:39,slug:480,text:480},"constexpr函数",{depth:39,slug:482,text:482},"带默认形参的函数",{depth:39,slug:484,text:484},"函数重载",{depth:32,slug:486,text:486},"第四章",{depth:39,slug:488,text:488},"类的成员函数",{depth:39,slug:490,text:490},"构造函数",{depth:39,slug:492,text:492},"析构函数",{depth:39,slug:494,text:495},"移动构造函数不太可能考","移动构造函数(不太可能考)",{depth:39,slug:497,text:498},"default-delete-函数","default 、delete 函数",{depth:39,slug:500,text:500},"前向引用",{depth:39,slug:502,text:502},"结构体",{depth:39,slug:504,text:504},"联合体union",{depth:39,slug:506,text:506},"枚举union",{depth:32,slug:508,text:508},"第五章",{depth:39,slug:510,text:510},"标识符的作用域和可见性",{depth:39,slug:512,text:512},"生存期",{depth:39,slug:514,text:514},"类的静态成员",{depth:39,slug:516,text:516},"类的友元",{depth:39,slug:518,text:518},"共享数据的保护",{depth:32,slug:520,text:520},"第六章",{depth:39,slug:522,text:522},"数组",{depth:39,slug:524,text:524},"指针",{depth:39,slug:526,text:526},"输入整行字符串",{depth:39,slug:528,text:528},"指针数组",{depth:39,slug:530,text:530},"指针型函数",{depth:39,slug:532,text:532},"指向函数的指针",{depth:39,slug:534,text:534},"对象指针",{depth:39,slug:536,text:536},"this指针",{depth:39,slug:538,text:538},"指向类的非静态成员的指针",{depth:39,slug:540,text:540},"指向类的静态成员函数",{depth:39,slug:542,text:543},"new-delete","new delete",{depth:39,slug:545,text:545},"vector",{depth:39,slug:547,text:548},"浅拷贝深拷贝","浅拷贝、深拷贝",{depth:32,slug:550,text:550},"第七章",{depth:39,slug:552,text:552},"访问控制",{depth:39,slug:554,text:554},"类型兼容原则",{depth:39,slug:556,text:556},"派生类的构造和析构函数",{depth:39,slug:558,text:559},"构造析构函数的调用顺序","构造、析构函数的调用顺序",{depth:39,slug:561,text:561},"作用域分辨符",{depth:39,slug:563,text:563},"虚基类",{depth:32,slug:565,text:566},"第八章-多态","第八章 多态",{depth:39,slug:568,text:568},"运算符重载",{depth:39,slug:570,text:570},"虚函数",{depth:39,slug:572,text:572},"纯虚函数和抽象类",{depth:32,slug:574,text:575},"第九章-模板","第九章 模板",{depth:39,slug:577,text:578},"1函数模板","1. 函数模板",{depth:450,slug:580,text:580},"语法",{depth:450,slug:582,text:583},"示例通用的max函数","示例：通用的 max 函数",{depth:39,slug:585,text:586},"2类模板","2. 类模板",{depth:450,slug:588,text:580},"语法-1",{depth:450,slug:590,text:591},"示例通用的box类","示例：通用的 Box 类",{depth:39,slug:593,text:594},"3模板参数","3. 模板参数",{depth:450,slug:596,text:597},"示例非类型模板参数","示例：非类型模板参数",{depth:39,slug:599,text:600},"4模板特化","4. 模板特化",{depth:450,slug:602,text:603},"示例函数模板特化重载","示例：函数模板特化（重载）",{depth:39,slug:605,text:606},"5类模板的默认参数","5. 类模板的默认参数",{depth:450,slug:608,text:609},"示例类模板的默认参数","示例：类模板的默认参数",{depth:32,slug:611,text:612},"第十章-泛型程序设计与stl","第十章 泛型程序设计与STL",{depth:32,slug:614,text:615},"第十一章-流类库","第十一章 流类库",{depth:39,slug:617,text:618},"1io流的概念及流类库结构","1. I/O流的概念及流类库结构",{depth:39,slug:620,text:621},"2输出流","2. 输出流",{depth:39,slug:623,text:624},"3输入流","3. 输入流",{depth:39,slug:626,text:627},"4输入输出流","4. 输入/输出流",{depth:32,slug:629,text:630},"第十二章-异常处理","第十二章 异常处理",{depth:39,slug:632,text:632},"异常处理中的构造与析构",[431,432,433,434,435,436,437,438,439],[],{title:423,publishDate:636,updatedDate:636,description:424,tags:637,language:21,minutesRead:638,words:639},"2025-01-09",[59],"9 min read",1657,[431,432,433,434,435,436,437,438,439]];

export { _astro_dataLayerContent as default };
